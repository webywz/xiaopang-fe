import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.DPDPlp3K.js";const o=JSON.parse('{"title":"合约可升级性","description":"","frontmatter":{"title":"合约可升级性"},"headers":[],"relativePath":"solidity/upgradeability.md","filePath":"solidity/upgradeability.md","lastUpdated":1747119657000}'),e={name:"solidity/upgradeability.md"};function p(t,s,h,r,k,d){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="合约可升级性" tabindex="-1">合约可升级性 <a class="header-anchor" href="#合约可升级性" aria-label="Permalink to &quot;合约可升级性&quot;">​</a></h1><p>智能合约一旦部署到链上，代码本身不可更改。为应对业务迭代、修复漏洞等需求，需采用可升级设计。</p><h2 id="_1-为什么需要可升级合约" tabindex="-1">1. 为什么需要可升级合约 <a class="header-anchor" href="#_1-为什么需要可升级合约" aria-label="Permalink to &quot;1. 为什么需要可升级合约&quot;">​</a></h2><ul><li>业务需求变化，需增加新功能或修复Bug。</li><li>安全漏洞修复，避免资金损失。</li><li>降低部署新合约的迁移成本。</li></ul><h2 id="_2-主流可升级方案" tabindex="-1">2. 主流可升级方案 <a class="header-anchor" href="#_2-主流可升级方案" aria-label="Permalink to &quot;2. 主流可升级方案&quot;">​</a></h2><h3 id="_2-1-代理模式-proxy-pattern" tabindex="-1">2.1 代理模式（Proxy Pattern） <a class="header-anchor" href="#_2-1-代理模式-proxy-pattern" aria-label="Permalink to &quot;2.1 代理模式（Proxy Pattern）&quot;">​</a></h3><ul><li>通过代理合约转发调用到逻辑合约（实现合约），实现逻辑可更换，数据不变。</li><li>典型实现：Transparent Proxy、UUPS Proxy。</li></ul><h3 id="_2-2-transparent-proxy" tabindex="-1">2.2 Transparent Proxy <a class="header-anchor" href="#_2-2-transparent-proxy" aria-label="Permalink to &quot;2.2 Transparent Proxy&quot;">​</a></h3><ul><li>由OpenZeppelin实现，分为Proxy（代理）、Logic（逻辑）、Admin（管理员）三部分。</li><li>管理员可升级逻辑合约，普通用户透明调用。</li></ul><h3 id="_2-3-uups-universal-upgradeable-proxy-standard" tabindex="-1">2.3 UUPS（Universal Upgradeable Proxy Standard） <a class="header-anchor" href="#_2-3-uups-universal-upgradeable-proxy-standard" aria-label="Permalink to &quot;2.3 UUPS（Universal Upgradeable Proxy Standard）&quot;">​</a></h3><ul><li>逻辑合约自身实现升级函数，节省Gas，推荐新项目采用。</li></ul><h2 id="_3-代理合约实现原理" tabindex="-1">3. 代理合约实现原理 <a class="header-anchor" href="#_3-代理合约实现原理" aria-label="Permalink to &quot;3. 代理合约实现原理&quot;">​</a></h2><ul><li>代理合约通过<code>delegatecall</code>将调用转发到逻辑合约，数据存储在代理合约自身。</li><li>逻辑合约升级时仅需更换地址，数据不丢失。</li></ul><h2 id="_4-openzeppelin可升级库用法" tabindex="-1">4. OpenZeppelin可升级库用法 <a class="header-anchor" href="#_4-openzeppelin可升级库用法" aria-label="Permalink to &quot;4. OpenZeppelin可升级库用法&quot;">​</a></h2><ul><li>推荐使用@openzeppelin/contracts-upgradeable库。</li><li>需用<code>initializer</code>修饰初始化函数，避免构造函数。</li><li>使用Hardhat/Truffle插件辅助部署和升级。</li></ul><h2 id="_5-典型代码示例" tabindex="-1">5. 典型代码示例 <a class="header-anchor" href="#_5-典型代码示例" aria-label="Permalink to &quot;5. 典型代码示例&quot;">​</a></h2><div class="language-solidity vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// SPDX-License-Identifier: MIT</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">pragma</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;"> solidity</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ^0.8.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">contract</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyLogicV1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> is</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Initializable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OwnableUpgradeable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    uint256</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> initialize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uint256</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _value) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> initializer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        __Ownable_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _value;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uint256</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _value) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onlyOwner</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _value;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>升级部署示例（Hardhat）：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// scripts/deploy-upgradeable.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ethers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">upgrades</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hardhat&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MyLogicV1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ethers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getContractFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MyLogicV1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> proxy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> upgrades.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deployProxy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyLogicV1, [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], { initializer: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;initialize&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> proxy.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deployed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Proxy deployed to:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, proxy.address);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="_6-安全注意事项" tabindex="-1">6. 安全注意事项 <a class="header-anchor" href="#_6-安全注意事项" aria-label="Permalink to &quot;6. 安全注意事项&quot;">​</a></h2><ul><li>升级权限必须严格控制，建议多签或延时机制。</li><li>初始化函数只能调用一次，防止被二次初始化。</li><li>逻辑合约升级需兼容原有存储布局，避免数据错乱。</li><li>避免在逻辑合约中使用<code>selfdestruct</code>等危险操作。</li></ul><h2 id="_7-最佳实践与常见问题" tabindex="-1">7. 最佳实践与常见问题 <a class="header-anchor" href="#_7-最佳实践与常见问题" aria-label="Permalink to &quot;7. 最佳实践与常见问题&quot;">​</a></h2><ul><li><strong>优先选用社区成熟的可升级库和工具</strong>，如OpenZeppelin。</li><li><strong>升级前充分测试和审计</strong>，防止存储冲突和权限绕过。</li><li><strong>升级流程应有回滚和应急预案</strong>。</li><li><strong>文档中记录每次升级的变更内容和原因</strong>。</li></ul><hr><p>如需深入了解可升级合约的高级用法，可参考OpenZeppelin官方文档或本教程后续章节。</p>`,25)]))}const c=i(e,[["render",p]]);export{o as __pageData,c as default};
