import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.DPDPlp3K.js";const c=JSON.parse('{"title":"配置文件","description":"","frontmatter":{"title":"配置文件"},"headers":[],"relativePath":"spring/springboot/configuration.md","filePath":"spring/springboot/configuration.md","lastUpdated":1747111449000}'),e={name:"spring/springboot/configuration.md"};function p(t,s,r,h,o,d){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="配置文件" tabindex="-1">配置文件 <a class="header-anchor" href="#配置文件" aria-label="Permalink to &quot;配置文件&quot;">​</a></h1><p>SpringBoot 支持多种配置方式，核心为 <code>application.properties</code> 和 <code>application.yml</code>，并支持多环境、外部化、类型安全、加密等高级特性。</p><h2 id="_1-配置文件格式" tabindex="-1">1. 配置文件格式 <a class="header-anchor" href="#_1-配置文件格式" aria-label="Permalink to &quot;1. 配置文件格式&quot;">​</a></h2><ul><li><code>application.properties</code>：传统的 key=value 格式，适合简单配置</li><li><code>application.yml</code>：YAML 层级结构，适合复杂配置</li></ul><h3 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h3><div class="language-properties vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">properties</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">server.port</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=8080</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">spring.application.name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=demo</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">spring.datasource.url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=jdbc:mysql://localhost:3306/demo</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">spring.datasource.username</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=root</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">spring.datasource.password</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=123456</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-yaml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  port</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8080</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">spring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">demo</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  datasource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">jdbc:mysql://localhost:3306/demo</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    username</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">root</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    password</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123456</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="_2-分环境配置-profile" tabindex="-1">2. 分环境配置（Profile） <a class="header-anchor" href="#_2-分环境配置-profile" aria-label="Permalink to &quot;2. 分环境配置（Profile）&quot;">​</a></h2><ul><li>支持多环境文件：<code>application-dev.yml</code>、<code>application-prod.yml</code> 等</li><li>激活环境： <ul><li>配置文件：<code>spring.profiles.active=dev</code></li><li>启动参数：<code>--spring.profiles.active=prod</code></li></ul></li><li>多环境合并加载，默认配置优先，环境配置覆盖</li></ul><h2 id="_3-外部化配置" tabindex="-1">3. 外部化配置 <a class="header-anchor" href="#_3-外部化配置" aria-label="Permalink to &quot;3. 外部化配置&quot;">​</a></h2><ul><li>支持命令行参数、环境变量、外部文件、JNDI、系统属性等</li><li>优先级（从高到低）： <ol><li>命令行参数</li><li><code>application-{profile}.yml</code></li><li><code>application.yml</code></li><li>@PropertySource 注解</li><li>默认值</li></ol></li><li>示例：<div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">java</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -jar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app.jar</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --server.port=9000</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SPRING_DATASOURCE_USERNAME</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">produser</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ul><h2 id="_4-类型安全配置-configurationproperties" tabindex="-1">4. 类型安全配置（@ConfigurationProperties） <a class="header-anchor" href="#_4-类型安全配置-configurationproperties" aria-label="Permalink to &quot;4. 类型安全配置（@ConfigurationProperties）&quot;">​</a></h2><ul><li>推荐用法：将配置映射为类型安全的 Java Bean</li><li>示例：<div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Component</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ConfigurationProperties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prefix</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;myapp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyAppProperties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String name;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timeout;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // getter/setter</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li><li>配置文件：<div class="language-yaml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">myapp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;小胖博客&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  timeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li>支持嵌套、校验（@Validated）、默认值</li></ul><h2 id="_5-配置加密与安全" tabindex="-1">5. 配置加密与安全 <a class="header-anchor" href="#_5-配置加密与安全" aria-label="Permalink to &quot;5. 配置加密与安全&quot;">​</a></h2><ul><li>敏感信息（如密码、密钥）建议加密存储</li><li>常用方案：jasypt、Spring Cloud Config 加密</li><li>示例：<div class="language-properties vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">properties</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">spring.datasource.password</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=ENC(加密串)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li>配合环境变量、密钥管理服务（KMS）提升安全性</li></ul><h2 id="_6-配置热更新" tabindex="-1">6. 配置热更新 <a class="header-anchor" href="#_6-配置热更新" aria-label="Permalink to &quot;6. 配置热更新&quot;">​</a></h2><ul><li>开发环境推荐使用 Spring DevTools，支持配置文件热加载</li><li>IDEA 可自动重启或手动触发</li></ul><h2 id="_7-常见问题与排查" tabindex="-1">7. 常见问题与排查 <a class="header-anchor" href="#_7-常见问题与排查" aria-label="Permalink to &quot;7. 常见问题与排查&quot;">​</a></h2><ul><li>配置未生效：检查文件名、路径、激活环境、拼写</li><li>类型转换异常：检查配置类型、@ConfigurationProperties 映射</li><li>多环境冲突：优先级理解不清，建议明确 active</li><li>密码明文泄露：建议加密或用环境变量</li></ul><h2 id="_8-最佳实践" tabindex="-1">8. 最佳实践 <a class="header-anchor" href="#_8-最佳实践" aria-label="Permalink to &quot;8. 最佳实践&quot;">​</a></h2><ul><li>推荐使用 yml 格式，结构清晰</li><li>多环境配置拆分，避免混用</li><li>敏感信息不入库/代码仓库，优先用环境变量</li><li>配置类加 @Validated，提升健壮性</li><li>配置项命名规范，统一前缀</li></ul><h2 id="_9-faq" tabindex="-1">9. FAQ <a class="header-anchor" href="#_9-faq" aria-label="Permalink to &quot;9. FAQ&quot;">​</a></h2><h3 id="q-application-yml-和-application-properties-有什么区别" tabindex="-1">Q: application.yml 和 application.properties 有什么区别？ <a class="header-anchor" href="#q-application-yml-和-application-properties-有什么区别" aria-label="Permalink to &quot;Q: application.yml 和 application.properties 有什么区别？&quot;">​</a></h3><p>A: yml 支持层级结构，适合复杂配置；properties 适合简单场景。</p><h3 id="q-如何动态切换环境" tabindex="-1">Q: 如何动态切换环境？ <a class="header-anchor" href="#q-如何动态切换环境" aria-label="Permalink to &quot;Q: 如何动态切换环境？&quot;">​</a></h3><p>A: 启动参数 <code>--spring.profiles.active=xxx</code> 或配置文件设置。</p><h3 id="q-配置文件能否分模块管理" tabindex="-1">Q: 配置文件能否分模块管理？ <a class="header-anchor" href="#q-配置文件能否分模块管理" aria-label="Permalink to &quot;Q: 配置文件能否分模块管理？&quot;">​</a></h3><p>A: 可用 @PropertySource、@ImportResource、Spring Cloud Config 等实现。</p><hr><blockquote><p>配置文件是 SpringBoot 项目的灵魂，建议深入理解加载顺序、类型安全和安全加密等高级特性。</p></blockquote>`,30)]))}const u=i(e,[["render",p]]);export{c as __pageData,u as default};
