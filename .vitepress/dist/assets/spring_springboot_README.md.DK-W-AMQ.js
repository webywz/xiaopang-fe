import{_ as i,c as r,o as t,ag as a}from"./chunks/framework.DPDPlp3K.js";const S=JSON.parse('{"title":"SpringBoot简介","description":"","frontmatter":{"title":"SpringBoot简介"},"headers":[],"relativePath":"spring/springboot/README.md","filePath":"spring/springboot/README.md","lastUpdated":1747108361000}'),n={name:"spring/springboot/README.md"};function l(e,o,g,s,p,h){return t(),r("div",null,o[0]||(o[0]=[a('<p>/**</p><ul><li>SpringBoot 简介</li><li>@description 详细介绍 SpringBoot 的发展、核心理念、特性、生态、与 Spring 的关系、常见误区、FAQ 等 */</li></ul><h1 id="springboot-简介" tabindex="-1">SpringBoot 简介 <a class="header-anchor" href="#springboot-简介" aria-label="Permalink to &quot;SpringBoot 简介&quot;">​</a></h1><p>SpringBoot 是由 Pivotal 团队于 2014 年推出的开源框架，旨在简化 Spring 应用的开发与部署。它基于&quot;约定优于配置&quot;（Convention over Configuration）和&quot;开箱即用&quot;（Out of the box）的理念，极大地降低了 Spring 项目的上手门槛。</p><h2 id="发展历程" tabindex="-1">发展历程 <a class="header-anchor" href="#发展历程" aria-label="Permalink to &quot;发展历程&quot;">​</a></h2><ul><li><strong>2014年</strong>：SpringBoot 1.0 发布，标志着 Spring 生态进入自动化配置时代。</li><li><strong>2018年</strong>：SpringBoot 2.0 支持响应式编程，性能和生态进一步提升。</li><li><strong>2023年</strong>：SpringBoot 3.x 支持 Java 17+，全面拥抱云原生。</li></ul><h2 id="核心理念" tabindex="-1">核心理念 <a class="header-anchor" href="#核心理念" aria-label="Permalink to &quot;核心理念&quot;">​</a></h2><ul><li><strong>自动配置</strong>：根据依赖和配置自动推断并装配 Spring 组件。</li><li><strong>内嵌服务器</strong>：无需外部 Tomcat/Jetty，支持独立运行。</li><li><strong>无代码生成</strong>：所有配置均为自动推断，无需冗余 XML。</li><li><strong>生产级特性</strong>：内置健康检查、监控、指标、外部化配置等。</li></ul><h2 id="核心特性" tabindex="-1">核心特性 <a class="header-anchor" href="#核心特性" aria-label="Permalink to &quot;核心特性&quot;">​</a></h2><ul><li><strong>Starter 依赖</strong>：一行依赖引入一整套功能模块。</li><li><strong>Actuator</strong>：应用监控与管理端点。</li><li><strong>自动化测试支持</strong>：集成 JUnit、Mockito、MockMvc 等。</li><li><strong>Profile 多环境支持</strong>：轻松切换开发、测试、生产环境。</li><li><strong>安全集成</strong>：与 Spring Security、OAuth2、JWT 无缝对接。</li></ul><h2 id="典型应用场景" tabindex="-1">典型应用场景 <a class="header-anchor" href="#典型应用场景" aria-label="Permalink to &quot;典型应用场景&quot;">​</a></h2><ul><li>企业级 Web 应用与门户网站</li><li>RESTful API 服务与微服务架构</li><li>任务调度、批处理、消息中间件集成</li><li>云原生应用与容器化部署</li></ul><h2 id="springboot-与-spring-的关系" tabindex="-1">SpringBoot 与 Spring 的关系 <a class="header-anchor" href="#springboot-与-spring-的关系" aria-label="Permalink to &quot;SpringBoot 与 Spring 的关系&quot;">​</a></h2><ul><li>SpringBoot 是 Spring 生态的&quot;加速器&quot;，底层依然是 Spring Framework。</li><li>SpringBoot 负责自动装配、简化配置，Spring 提供核心功能。</li><li>SpringBoot 适合快速开发，Spring 适合高度定制。</li></ul><h2 id="springboot-生态" tabindex="-1">SpringBoot 生态 <a class="header-anchor" href="#springboot-生态" aria-label="Permalink to &quot;SpringBoot 生态&quot;">​</a></h2><ul><li><strong>Spring Cloud</strong>：微服务全家桶（注册中心、配置中心、网关等）</li><li><strong>Spring Data</strong>：数据访问（JPA、MongoDB、Redis 等）</li><li><strong>Spring Security</strong>：安全与认证</li><li><strong>Spring Batch</strong>：批处理</li><li><strong>Spring Integration</strong>：企业集成</li></ul><h2 id="常见误区" tabindex="-1">常见误区 <a class="header-anchor" href="#常见误区" aria-label="Permalink to &quot;常见误区&quot;">​</a></h2><ul><li>SpringBoot ≠ 微服务，但它是微服务的理想基础。</li><li>SpringBoot 不等于&quot;零配置&quot;，而是&quot;合理默认+可扩展配置&quot;。</li><li>SpringBoot 不是新语言，而是 Spring 的最佳实践集合。</li></ul><h2 id="常见问题-faq" tabindex="-1">常见问题 FAQ <a class="header-anchor" href="#常见问题-faq" aria-label="Permalink to &quot;常见问题 FAQ&quot;">​</a></h2><h3 id="q-springboot-适合什么项目" tabindex="-1">Q: SpringBoot 适合什么项目？ <a class="header-anchor" href="#q-springboot-适合什么项目" aria-label="Permalink to &quot;Q: SpringBoot 适合什么项目？&quot;">​</a></h3><p>A: 适合绝大多数 Java 后端项目，尤其是需要快速开发、易于维护、易于部署的场景。</p><h3 id="q-springboot-性能如何" tabindex="-1">Q: SpringBoot 性能如何？ <a class="header-anchor" href="#q-springboot-性能如何" aria-label="Permalink to &quot;Q: SpringBoot 性能如何？&quot;">​</a></h3><p>A: 性能优异，支持响应式、异步、分布式等多种高性能场景。</p><h3 id="q-springboot-如何与前端集成" tabindex="-1">Q: SpringBoot 如何与前端集成？ <a class="header-anchor" href="#q-springboot-如何与前端集成" aria-label="Permalink to &quot;Q: SpringBoot 如何与前端集成？&quot;">​</a></h3><p>A: 可作为 RESTful API 服务，前后端分离开发；也可集成 Thymeleaf、Freemarker 等模板引擎。</p><hr><blockquote><p>SpringBoot 让 Spring 更简单、更高效，是现代 Java 后端开发的首选。</p></blockquote>',27)]))}const d=i(n,[["render",l]]);export{S as __pageData,d as default};
