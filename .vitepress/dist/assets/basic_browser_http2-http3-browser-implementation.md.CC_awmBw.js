import{_ as i,c as s,o as e,ag as t}from"./chunks/framework.DPDPlp3K.js";const c=JSON.parse('{"title":"HTTP/2与HTTP/3在浏览器中的实现","description":"深入解析HTTP/2与HTTP/3协议在浏览器端的实现机制、优势与调试技巧，助你掌握现代Web通信基础。","frontmatter":{"layout":"doc","title":"HTTP/2与HTTP/3在浏览器中的实现","description":"深入解析HTTP/2与HTTP/3协议在浏览器端的实现机制、优势与调试技巧，助你掌握现代Web通信基础。"},"headers":[],"relativePath":"basic/browser/http2-http3-browser-implementation.md","filePath":"basic/browser/http2-http3-browser-implementation.md","lastUpdated":1746781833000}'),l={name:"basic/browser/http2-http3-browser-implementation.md"};function n(r,a,h,p,o,T){return e(),s("div",null,a[0]||(a[0]=[t(`<h1 id="http-2与http-3在浏览器中的实现" tabindex="-1">HTTP/2与HTTP/3在浏览器中的实现 <a class="header-anchor" href="#http-2与http-3在浏览器中的实现" aria-label="Permalink to &quot;HTTP/2与HTTP/3在浏览器中的实现&quot;">​</a></h1><p>HTTP/2与HTTP/3极大提升了Web通信效率。本文将系统讲解两者在浏览器端的实现机制、协议特性与调试技巧。</p><h2 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;目录&quot;">​</a></h2><ul><li><a href="#http2与http3协议简介">HTTP/2与HTTP/3协议简介</a></li><li><a href="#浏览器中的实现机制">浏览器中的实现机制</a></li><li><a href="#多路复用与头部压缩">多路复用与头部压缩</a></li><li><a href="#quic协议与http3">QUIC协议与HTTP/3</a></li><li><a href="#调试与兼容性分析">调试与兼容性分析</a></li></ul><h2 id="http-2与http-3协议简介" tabindex="-1">HTTP/2与HTTP/3协议简介 <a class="header-anchor" href="#http-2与http-3协议简介" aria-label="Permalink to &quot;HTTP/2与HTTP/3协议简介&quot;">​</a></h2><ul><li>HTTP/2基于TCP，支持多路复用、头部压缩、服务器推送</li><li>HTTP/3基于UDP的QUIC协议，连接更快、抗丢包能力强</li></ul><h2 id="浏览器中的实现机制" tabindex="-1">浏览器中的实现机制 <a class="header-anchor" href="#浏览器中的实现机制" aria-label="Permalink to &quot;浏览器中的实现机制&quot;">​</a></h2><ul><li>主流浏览器（Chrome、Firefox、Edge、Safari）均原生支持HTTP/2与HTTP/3</li><li>浏览器自动协商协议，优先使用更高版本</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 检查当前页面使用的HTTP协议</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@returns</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {string}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getHttpProtocol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> window.performance.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getEntriesByType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;navigation&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]?.nextHopProtocol;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="多路复用与头部压缩" tabindex="-1">多路复用与头部压缩 <a class="header-anchor" href="#多路复用与头部压缩" aria-label="Permalink to &quot;多路复用与头部压缩&quot;">​</a></h2><ul><li>多路复用：单连接并发多请求，避免队头阻塞</li><li>头部压缩（HPACK/QPACK）：减少冗余数据传输</li></ul><h2 id="quic协议与http-3" tabindex="-1">QUIC协议与HTTP/3 <a class="header-anchor" href="#quic协议与http-3" aria-label="Permalink to &quot;QUIC协议与HTTP/3&quot;">​</a></h2><ul><li>QUIC集成TLS加密，减少握手延迟</li><li>HTTP/3在弱网环境下表现更优</li></ul><h2 id="调试与兼容性分析" tabindex="-1">调试与兼容性分析 <a class="header-anchor" href="#调试与兼容性分析" aria-label="Permalink to &quot;调试与兼容性分析&quot;">​</a></h2><ul><li>Chrome DevTools &gt; Network面板查看协议类型</li><li>浏览器地址栏输入<code>chrome://net-internals/#http2</code>或<code>#quic</code>调试</li><li>关注服务器与CDN的协议支持情况</li></ul><hr><blockquote><p>参考资料：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Overview_of_HTTP" target="_blank" rel="noreferrer">MDN HTTP/2</a> | <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Overview_of_HTTP_3" target="_blank" rel="noreferrer">MDN HTTP/3</a></p></blockquote>`,17)]))}const k=i(l,[["render",n]]);export{c as __pageData,k as default};
