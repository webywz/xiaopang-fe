import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.DPDPlp3K.js";const c=JSON.parse('{"title":"Spring Framework 核心详解","description":"","frontmatter":{"title":"Spring Framework 核心详解"},"headers":[],"relativePath":"spring/spring-framework.md","filePath":"spring/spring-framework.md","lastUpdated":1747111449000}'),l={name:"spring/spring-framework.md"};function t(r,s,p,h,o,k){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="spring-framework-核心详解" tabindex="-1">Spring Framework 核心详解 <a class="header-anchor" href="#spring-framework-核心详解" aria-label="Permalink to &quot;Spring Framework 核心详解&quot;">​</a></h1><p>Spring Framework 是 Java 企业级开发的基石，提供了依赖注入（IoC）、面向切面编程（AOP）、声明式事务、数据访问、Web 框架等核心能力。</p><h2 id="_1-框架简介" tabindex="-1">1. 框架简介 <a class="header-anchor" href="#_1-框架简介" aria-label="Permalink to &quot;1. 框架简介&quot;">​</a></h2><ul><li>2002 年诞生，极大简化了 Java EE 开发</li><li>采用分层架构，核心容器、AOP、数据访问、Web、消息、测试等模块</li><li>SpringBoot、SpringCloud、SpringData 等均基于 Spring Framework</li></ul><h2 id="_2-核心原理" tabindex="-1">2. 核心原理 <a class="header-anchor" href="#_2-核心原理" aria-label="Permalink to &quot;2. 核心原理&quot;">​</a></h2><h3 id="_2-1-ioc-控制反转-与-di-依赖注入" tabindex="-1">2.1 IoC（控制反转）与 DI（依赖注入） <a class="header-anchor" href="#_2-1-ioc-控制反转-与-di-依赖注入" aria-label="Permalink to &quot;2.1 IoC（控制反转）与 DI（依赖注入）&quot;">​</a></h3><ul><li>IoC 容器负责对象的创建、管理、依赖注入</li><li>支持构造器注入、Setter 注入、字段注入</li><li>Bean 通过配置文件、注解、JavaConfig 注册到容器</li></ul><h4 id="典型代码" tabindex="-1">典型代码 <a class="header-anchor" href="#典型代码" aria-label="Permalink to &quot;典型代码&quot;">​</a></h4><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Component</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Autowired</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UserRepository userRepository;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_2-2-aop-面向切面编程" tabindex="-1">2.2 AOP（面向切面编程） <a class="header-anchor" href="#_2-2-aop-面向切面编程" aria-label="Permalink to &quot;2.2 AOP（面向切面编程）&quot;">​</a></h3><ul><li>通过切面（Aspect）实现横切关注点（如日志、事务、安全）</li><li>支持声明式事务、日志、权限校验等</li><li>基于 JDK 动态代理、CGLIB 字节码增强</li></ul><h4 id="典型代码-1" tabindex="-1">典型代码 <a class="header-anchor" href="#典型代码-1" aria-label="Permalink to &quot;典型代码&quot;">​</a></h4><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Aspect</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Component</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LogAspect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Before</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;execution(* com.example.service.*.*(..))&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> before</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="_2-3-bean-生命周期" tabindex="-1">2.3 Bean 生命周期 <a class="header-anchor" href="#_2-3-bean-生命周期" aria-label="Permalink to &quot;2.3 Bean 生命周期&quot;">​</a></h3><ul><li>实例化 -&gt; 属性注入 -&gt; 初始化 -&gt; 使用 -&gt; 销毁</li><li>支持自定义初始化/销毁方法、BeanPostProcessor、Aware 接口</li></ul><h4 id="生命周期回调" tabindex="-1">生命周期回调 <a class="header-anchor" href="#生命周期回调" aria-label="Permalink to &quot;生命周期回调&quot;">​</a></h4><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Component</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DemoBean</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> InitializingBean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DisposableBean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> afterPropertiesSet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 初始化逻辑 */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> destroy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 销毁逻辑 */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="_3-配置方式" tabindex="-1">3. 配置方式 <a class="header-anchor" href="#_3-配置方式" aria-label="Permalink to &quot;3. 配置方式&quot;">​</a></h2><h3 id="_3-1-xml-配置" tabindex="-1">3.1 XML 配置 <a class="header-anchor" href="#_3-1-xml-配置" aria-label="Permalink to &quot;3.1 XML 配置&quot;">​</a></h3><div class="language-xml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">bean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;userService&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.example.UserService&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">property</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;userRepository&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;userRepository&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">bean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_3-2-注解配置" tabindex="-1">3.2 注解配置 <a class="header-anchor" href="#_3-2-注解配置" aria-label="Permalink to &quot;3.2 注解配置&quot;">​</a></h3><ul><li><code>@Component</code>、<code>@Service</code>、<code>@Repository</code>、<code>@Controller</code></li><li><code>@Autowired</code>、<code>@Qualifier</code>、<code>@Value</code></li><li><code>@Configuration</code>、<code>@Bean</code></li></ul><h3 id="_3-3-javaconfig" tabindex="-1">3.3 JavaConfig <a class="header-anchor" href="#_3-3-javaconfig" aria-label="Permalink to &quot;3.3 JavaConfig&quot;">​</a></h3><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Configuration</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AppConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UserService </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">userService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="_4-常用注解" tabindex="-1">4. 常用注解 <a class="header-anchor" href="#_4-常用注解" aria-label="Permalink to &quot;4. 常用注解&quot;">​</a></h2><ul><li><code>@Component</code>：通用组件</li><li><code>@Service</code>：业务层</li><li><code>@Repository</code>：数据层</li><li><code>@Controller</code>：Web 层</li><li><code>@Autowired</code>：自动注入</li><li><code>@Qualifier</code>：指定 Bean 名称</li><li><code>@Value</code>：注入配置值</li><li><code>@Scope</code>：Bean 作用域</li><li><code>@PostConstruct</code>、<code>@PreDestroy</code>：生命周期回调</li><li><code>@Configuration</code>、<code>@Bean</code>：JavaConfig</li><li><code>@Aspect</code>、<code>@Before</code>、<code>@After</code>：AOP</li></ul><h2 id="_5-与-springboot-的关系" tabindex="-1">5. 与 SpringBoot 的关系 <a class="header-anchor" href="#_5-与-springboot-的关系" aria-label="Permalink to &quot;5. 与 SpringBoot 的关系&quot;">​</a></h2><ul><li>SpringBoot 基于 Spring Framework，自动装配、约定优于配置</li><li>SpringBoot 推荐注解+JavaConfig，极少用 XML</li><li>SpringBoot Starter 机制简化依赖管理</li></ul><h2 id="_6-典型应用场景" tabindex="-1">6. 典型应用场景 <a class="header-anchor" href="#_6-典型应用场景" aria-label="Permalink to &quot;6. 典型应用场景&quot;">​</a></h2><ul><li>企业级 Web 应用、微服务、REST API</li><li>复杂业务系统的解耦、扩展、测试</li><li>统一事务、日志、安全、缓存等横切关注点</li></ul><h2 id="_7-源码剖析-简要" tabindex="-1">7. 源码剖析（简要） <a class="header-anchor" href="#_7-源码剖析-简要" aria-label="Permalink to &quot;7. 源码剖析（简要）&quot;">​</a></h2><ul><li>ApplicationContext：IoC 容器核心接口</li><li>BeanDefinition：Bean 元数据描述</li><li>BeanFactoryPostProcessor、BeanPostProcessor：扩展点</li><li>AopProxy、Advisor、JoinPoint：AOP 核心</li></ul><h2 id="_8-最佳实践" tabindex="-1">8. 最佳实践 <a class="header-anchor" href="#_8-最佳实践" aria-label="Permalink to &quot;8. 最佳实践&quot;">​</a></h2><ul><li>推荐注解+JavaConfig，减少 XML</li><li>依赖注入优先用构造器，便于测试</li><li>合理拆分配置类，分层管理 Bean</li><li>善用 AOP 实现日志、权限、事务等横切逻辑</li><li>配置文件与代码分离，便于环境切换</li></ul><h2 id="_9-常见问题与-faq" tabindex="-1">9. 常见问题与 FAQ <a class="header-anchor" href="#_9-常见问题与-faq" aria-label="Permalink to &quot;9. 常见问题与 FAQ&quot;">​</a></h2><h3 id="q-bean-循环依赖如何解决" tabindex="-1">Q: Bean 循环依赖如何解决？ <a class="header-anchor" href="#q-bean-循环依赖如何解决" aria-label="Permalink to &quot;Q: Bean 循环依赖如何解决？&quot;">​</a></h3><p>A: Spring 支持构造器注入时检测循环依赖，Setter/字段注入可通过三级缓存解决。</p><h3 id="q-如何自定义-bean-生命周期" tabindex="-1">Q: 如何自定义 Bean 生命周期？ <a class="header-anchor" href="#q-如何自定义-bean-生命周期" aria-label="Permalink to &quot;Q: 如何自定义 Bean 生命周期？&quot;">​</a></h3><p>A: 实现 InitializingBean/DisposableBean 或用 @PostConstruct/@PreDestroy 注解。</p><h3 id="q-springboot-项目还能用-xml-配置吗" tabindex="-1">Q: SpringBoot 项目还能用 XML 配置吗？ <a class="header-anchor" href="#q-springboot-项目还能用-xml-配置吗" aria-label="Permalink to &quot;Q: SpringBoot 项目还能用 XML 配置吗？&quot;">​</a></h3><p>A: 可以，推荐注解+JavaConfig，兼容 XML。</p><h3 id="q-如何调试-ioc-aop-问题" tabindex="-1">Q: 如何调试 IoC/AOP 问题？ <a class="header-anchor" href="#q-如何调试-ioc-aop-问题" aria-label="Permalink to &quot;Q: 如何调试 IoC/AOP 问题？&quot;">​</a></h3><p>A: 开启日志、使用 ApplicationContext#getBeanDefinitionNames、AOP 代理调试工具。</p><hr><blockquote><p>Spring Framework 是 Java 后端开发的基石，建议深入理解 IoC、AOP、生命周期与配置方式，打好后续 SpringBoot/SpringCloud 的基础。</p></blockquote>`,45)]))}const g=i(l,[["render",t]]);export{c as __pageData,g as default};
