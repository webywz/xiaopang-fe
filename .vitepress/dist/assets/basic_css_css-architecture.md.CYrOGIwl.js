import{_ as a,c as i,o as n,ag as e}from"./chunks/framework.DPDPlp3K.js";const k=JSON.parse('{"title":"CSS架构设计：组织大型项目的CSS","description":"系统讲解CSS架构设计原则、常见模式与工程化实践，助你高效管理和维护大型前端项目的样式代码。","frontmatter":{"layout":"doc","title":"CSS架构设计：组织大型项目的CSS","description":"系统讲解CSS架构设计原则、常见模式与工程化实践，助你高效管理和维护大型前端项目的样式代码。"},"headers":[],"relativePath":"basic/css/css-architecture.md","filePath":"basic/css/css-architecture.md","lastUpdated":1746781833000}'),l={name:"basic/css/css-architecture.md"};function t(p,s,r,h,c,d){return n(),i("div",null,s[0]||(s[0]=[e(`<h1 id="css架构设计-组织大型项目的css" tabindex="-1">CSS架构设计：组织大型项目的CSS <a class="header-anchor" href="#css架构设计-组织大型项目的css" aria-label="Permalink to &quot;CSS架构设计：组织大型项目的CSS&quot;">​</a></h1><p>随着项目规模扩大，CSS的可维护性和可扩展性变得尤为重要。本文将介绍CSS架构设计的核心理念、主流模式与工程化实践。</p><h2 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;目录&quot;">​</a></h2><ul><li><a href="#为什么需要css架构">为什么需要CSS架构？</a></li><li><a href="#常见css架构模式">常见CSS架构模式</a></li><li><a href="#命名规范与分层">命名规范与分层</a></li><li><a href="#模块化与组件化">模块化与组件化</a></li><li><a href="#工程化与自动化">工程化与自动化</a></li><li><a href="#最佳实践与案例">最佳实践与案例</a></li></ul><h2 id="为什么需要css架构" tabindex="-1">为什么需要CSS架构？ <a class="header-anchor" href="#为什么需要css架构" aria-label="Permalink to &quot;为什么需要CSS架构？&quot;">​</a></h2><ul><li>避免样式冲突和全局污染</li><li>提升样式复用性和可维护性</li><li>降低协作成本</li></ul><h2 id="常见css架构模式" tabindex="-1">常见CSS架构模式 <a class="header-anchor" href="#常见css架构模式" aria-label="Permalink to &quot;常见CSS架构模式&quot;">​</a></h2><ul><li><strong>OOCSS</strong>（面向对象CSS）：关注结构与皮肤分离。</li><li><strong>BEM</strong>（块-元素-修饰符）：通过命名规范实现组件化。</li><li><strong>SMACSS</strong>：按功能分层组织样式。</li><li><strong>Atomic CSS</strong>：原子化类名，极致复用。</li></ul><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * BEM命名示例</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @example</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * .btn {}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * .btn--primary {}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * .btn__icon {}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="命名规范与分层" tabindex="-1">命名规范与分层 <a class="header-anchor" href="#命名规范与分层" aria-label="Permalink to &quot;命名规范与分层&quot;">​</a></h2><ul><li>统一前缀，避免全局冲突</li><li>按页面、模块、组件分层管理</li></ul><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.header__nav</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.header__nav--active</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="模块化与组件化" tabindex="-1">模块化与组件化 <a class="header-anchor" href="#模块化与组件化" aria-label="Permalink to &quot;模块化与组件化&quot;">​</a></h2><p>结合CSS Modules、Sass、Less等工具，实现样式的模块化和作用域隔离。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 使用CSS Modules导入样式</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@example</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * import styles from &#39;./Button.module.css&#39;;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * &lt;button className={styles.btn}&gt;按钮&lt;/button&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="工程化与自动化" tabindex="-1">工程化与自动化 <a class="header-anchor" href="#工程化与自动化" aria-label="Permalink to &quot;工程化与自动化&quot;">​</a></h2><ul><li>使用PostCSS、Stylelint等工具自动检查和修复样式</li><li>利用构建工具实现样式分割与按需加载</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * PostCSS自动前缀</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@example</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // postcss.config.js</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * module.exports = {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *   plugins: [require(&#39;autoprefixer&#39;)]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * };</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="最佳实践与案例" tabindex="-1">最佳实践与案例 <a class="header-anchor" href="#最佳实践与案例" aria-label="Permalink to &quot;最佳实践与案例&quot;">​</a></h2><ul><li>组件样式独立，避免全局污染</li><li>变量、混入、函数提升复用性</li><li>结合设计系统统一规范</li></ul><hr><blockquote><p>参考资料：<a href="https://css-tricks.com/architecture-for-css/" target="_blank" rel="noreferrer">CSS架构设计指南</a></p></blockquote>`,22)]))}const u=a(l,[["render",t]]);export{k as __pageData,u as default};
