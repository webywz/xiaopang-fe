import{_ as a,c as s,o as n,ag as e}from"./chunks/framework.DPDPlp3K.js";const c=JSON.parse('{"title":"核心注解","description":"","frontmatter":{"title":"核心注解"},"headers":[],"relativePath":"spring/springboot/annotations.md","filePath":"spring/springboot/annotations.md","lastUpdated":1747111449000}'),l={name:"spring/springboot/annotations.md"};function t(p,i,r,o,h,d){return n(),s("div",null,i[0]||(i[0]=[e(`<h1 id="核心注解" tabindex="-1">核心注解 <a class="header-anchor" href="#核心注解" aria-label="Permalink to &quot;核心注解&quot;">​</a></h1><p>SpringBoot 通过大量注解极大简化了开发流程。理解注解的原理和用法，是高效开发和排查问题的基础。</p><h2 id="_1-注解原理与分类" tabindex="-1">1. 注解原理与分类 <a class="header-anchor" href="#_1-注解原理与分类" aria-label="Permalink to &quot;1. 注解原理与分类&quot;">​</a></h2><ul><li><strong>元注解</strong>：用于定义其他注解的注解，如 <code>@Target</code>、<code>@Retention</code>、<code>@Documented</code>、<code>@Inherited</code></li><li><strong>组合注解</strong>：多个注解的集合，如 <code>@SpringBootApplication</code></li><li><strong>常用业务注解</strong>：如 <code>@RestController</code>、<code>@Service</code>、<code>@Repository</code>、<code>@Component</code></li><li><strong>配置与装配注解</strong>：如 <code>@Autowired</code>、<code>@Value</code>、<code>@Configuration</code>、<code>@Bean</code></li></ul><h2 id="_2-常用注解详解" tabindex="-1">2. 常用注解详解 <a class="header-anchor" href="#_2-常用注解详解" aria-label="Permalink to &quot;2. 常用注解详解&quot;">​</a></h2><h3 id="springbootapplication" tabindex="-1">@SpringBootApplication <a class="header-anchor" href="#springbootapplication" aria-label="Permalink to &quot;@SpringBootApplication&quot;">​</a></h3><ul><li>组合注解，等价于 <code>@Configuration</code> + <code>@EnableAutoConfiguration</code> + <code>@ComponentScan</code></li><li>标记主启动类，自动开启组件扫描和自动配置</li><li>源码：<div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ElementType.TYPE)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Retention</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SpringBootConfiguration</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">EnableAutoConfiguration</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ComponentScan</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> SpringBootApplication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li></ul><h3 id="restcontroller" tabindex="-1">@RestController <a class="header-anchor" href="#restcontroller" aria-label="Permalink to &quot;@RestController&quot;">​</a></h3><ul><li>标记类为 REST 控制器，返回 JSON 数据</li><li>等价于 <code>@Controller</code> + <code>@ResponseBody</code></li><li>常用于 API 层</li></ul><h3 id="requestmapping-getmapping-postmapping" tabindex="-1">@RequestMapping/@GetMapping/@PostMapping <a class="header-anchor" href="#requestmapping-getmapping-postmapping" aria-label="Permalink to &quot;@RequestMapping/@GetMapping/@PostMapping&quot;">​</a></h3><ul><li>映射 HTTP 路径和方法</li><li>支持路径参数、请求参数、请求体等</li><li>示例：<div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RestController</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RequestMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/api&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DemoController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GetMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RequestParam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello, &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li></ul><h3 id="autowired" tabindex="-1">@Autowired <a class="header-anchor" href="#autowired" aria-label="Permalink to &quot;@Autowired&quot;">​</a></h3><ul><li>自动注入 Spring 容器中的 Bean</li><li>支持构造器、字段、Setter 注入</li><li>推荐构造器注入（利于测试与可维护性）</li></ul><h3 id="value" tabindex="-1">@Value <a class="header-anchor" href="#value" aria-label="Permalink to &quot;@Value&quot;">​</a></h3><ul><li>注入配置文件中的属性值</li><li>支持 SpEL 表达式</li><li>示例：<div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${server.port}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> port;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ul><h3 id="component-service-repository" tabindex="-1">@Component/@Service/@Repository <a class="header-anchor" href="#component-service-repository" aria-label="Permalink to &quot;@Component/@Service/@Repository&quot;">​</a></h3><ul><li>标记类为 Spring 管理的 Bean</li><li><code>@Service</code> 用于业务层，<code>@Repository</code> 用于数据层，<code>@Component</code> 通用</li></ul><h3 id="configuration-bean" tabindex="-1">@Configuration/@Bean <a class="header-anchor" href="#configuration-bean" aria-label="Permalink to &quot;@Configuration/@Bean&quot;">​</a></h3><ul><li><code>@Configuration</code> 标记配置类，<code>@Bean</code> 声明方法返回的对象交由 Spring 容器管理</li><li>示例：<div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Configuration</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AppConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RestTemplate </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">restTemplate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RestTemplate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li></ul><h3 id="conditional" tabindex="-1">@Conditional <a class="header-anchor" href="#conditional" aria-label="Permalink to &quot;@Conditional&quot;">​</a></h3><ul><li>条件装配，常用于 Starter 自动配置</li><li>示例：<code>@ConditionalOnMissingBean</code>、<code>@ConditionalOnProperty</code></li></ul><h3 id="profile" tabindex="-1">@Profile <a class="header-anchor" href="#profile" aria-label="Permalink to &quot;@Profile&quot;">​</a></h3><ul><li>多环境配置切换</li><li>示例：<div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Profile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dev&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DataSource </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">devDataSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {...}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ul><h2 id="_3-组合注解与元注解" tabindex="-1">3. 组合注解与元注解 <a class="header-anchor" href="#_3-组合注解与元注解" aria-label="Permalink to &quot;3. 组合注解与元注解&quot;">​</a></h2><ul><li>组合注解可减少重复配置，提高可维护性</li><li>元注解如 <code>@Target</code>、<code>@Retention</code> 决定注解的作用范围和生命周期</li></ul><h2 id="_4-注解冲突与优先级" tabindex="-1">4. 注解冲突与优先级 <a class="header-anchor" href="#_4-注解冲突与优先级" aria-label="Permalink to &quot;4. 注解冲突与优先级&quot;">​</a></h2><ul><li>多个注解作用于同一 Bean 时，优先级由 Spring 解析顺序和配置决定</li><li>常见冲突如 <code>@Primary</code>、<code>@Qualifier</code> 配合使用</li></ul><h2 id="_5-最佳实践" tabindex="-1">5. 最佳实践 <a class="header-anchor" href="#_5-最佳实践" aria-label="Permalink to &quot;5. 最佳实践&quot;">​</a></h2><ul><li>推荐使用构造器注入，避免循环依赖</li><li>业务分层时优先用 <code>@Service</code>、<code>@Repository</code>，便于 AOP 和异常处理</li><li>配置类建议加 <code>@Configuration(proxyBeanMethods = false)</code> 提升性能</li></ul><h2 id="_6-易错点与面试高频问题" tabindex="-1">6. 易错点与面试高频问题 <a class="header-anchor" href="#_6-易错点与面试高频问题" aria-label="Permalink to &quot;6. 易错点与面试高频问题&quot;">​</a></h2><ul><li><code>@Autowired</code> 注入失败常见原因？（未被 Spring 扫描、类型冲突、循环依赖）</li><li><code>@ComponentScan</code> 默认扫描范围？（主类所在包及其子包）</li><li><code>@SpringBootApplication</code> 能否自定义扫描路径？（可用 <code>scanBasePackages</code>）</li><li><code>@Value</code> 注入 null 的原因？（属性名拼写、配置文件未加载、类型不匹配）</li></ul><h2 id="_7-faq" tabindex="-1">7. FAQ <a class="header-anchor" href="#_7-faq" aria-label="Permalink to &quot;7. FAQ&quot;">​</a></h2><h3 id="q-注解和-xml-配置能否混用" tabindex="-1">Q: 注解和 XML 配置能否混用？ <a class="header-anchor" href="#q-注解和-xml-配置能否混用" aria-label="Permalink to &quot;Q: 注解和 XML 配置能否混用？&quot;">​</a></h3><p>A: 可以，SpringBoot 推荐注解优先，兼容 XML。</p><h3 id="q-如何自定义注解" tabindex="-1">Q: 如何自定义注解？ <a class="header-anchor" href="#q-如何自定义注解" aria-label="Permalink to &quot;Q: 如何自定义注解？&quot;">​</a></h3><p>A: 使用 <code>@interface</code> 定义，结合元注解和 AOP 实现自定义逻辑。</p><hr><blockquote><p>注解是 SpringBoot 自动化和高效开发的核心，建议结合源码和实际项目深入理解和应用。</p></blockquote>`,38)]))}const u=a(l,[["render",t]]);export{c as __pageData,u as default};
