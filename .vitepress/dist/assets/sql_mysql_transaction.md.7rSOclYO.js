import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.DPDPlp3K.js";const o=JSON.parse('{"title":"MySQL 事务与锁（详解）","description":"","frontmatter":{},"headers":[],"relativePath":"sql/mysql/transaction.md","filePath":"sql/mysql/transaction.md","lastUpdated":1747206212000}'),t={name:"sql/mysql/transaction.md"};function h(e,s,p,k,r,d){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="mysql-事务与锁-详解" tabindex="-1">MySQL 事务与锁（详解） <a class="header-anchor" href="#mysql-事务与锁-详解" aria-label="Permalink to &quot;MySQL 事务与锁（详解）&quot;">​</a></h1><h2 id="_1-事务基础" tabindex="-1">1. 事务基础 <a class="header-anchor" href="#_1-事务基础" aria-label="Permalink to &quot;1. 事务基础&quot;">​</a></h2><p>事务（Transaction）是一组操作的集合，这些操作要么全部成功，要么全部失败回滚。MySQL 默认 InnoDB 存储引擎支持事务。</p><h2 id="_2-acid-特性" tabindex="-1">2. ACID 特性 <a class="header-anchor" href="#_2-acid-特性" aria-label="Permalink to &quot;2. ACID 特性&quot;">​</a></h2><ul><li><strong>原子性（Atomicity）</strong>：事务中的所有操作要么全部完成，要么全部不做。</li><li><strong>一致性（Consistency）</strong>：事务前后数据完整性保持一致。</li><li><strong>隔离性（Isolation）</strong>：并发事务之间互不影响。</li><li><strong>持久性（Durability）</strong>：事务提交后数据永久保存。</li></ul><h2 id="_3-事务的使用方法" tabindex="-1">3. 事务的使用方法 <a class="header-anchor" href="#_3-事务的使用方法" aria-label="Permalink to &quot;3. 事务的使用方法&quot;">​</a></h2><h3 id="_3-1-基本语法" tabindex="-1">3.1 基本语法 <a class="header-anchor" href="#_3-1-基本语法" aria-label="Permalink to &quot;3.1 基本语法&quot;">​</a></h3><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">START TRANSACTION</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 或 BEGIN;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">UPDATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> accounts </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> balance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> balance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">UPDATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> accounts </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> balance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> balance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COMMIT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 提交</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- ROLLBACK; -- 回滚</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_3-2-自动提交" tabindex="-1">3.2 自动提交 <a class="header-anchor" href="#_3-2-自动提交" aria-label="Permalink to &quot;3.2 自动提交&quot;">​</a></h3><ul><li>MySQL 默认 autocommit=1，每条语句自动提交。</li><li>关闭自动提交：<code>SET autocommit = 0;</code></li></ul><h2 id="_4-事务隔离级别" tabindex="-1">4. 事务隔离级别 <a class="header-anchor" href="#_4-事务隔离级别" aria-label="Permalink to &quot;4. 事务隔离级别&quot;">​</a></h2><p>MySQL 支持四种隔离级别：</p><table tabindex="0"><thead><tr><th>级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>READ UNCOMMITTED</td><td>√</td><td>√</td><td>√</td></tr><tr><td>READ COMMITTED</td><td>×</td><td>√</td><td>√</td></tr><tr><td>REPEATABLE READ*</td><td>×</td><td>×</td><td>√</td></tr><tr><td>SERIALIZABLE</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><blockquote><p>*InnoDB 默认 REPEATABLE READ，并通过间隙锁防止幻读。</p></blockquote><ul><li>设置隔离级别：</li></ul><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [SESSION|GLOBAL] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">TRANSACTION</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ISOLATION</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> LEVEL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> REPEATABLE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> READ</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="_5-死锁与并发控制" tabindex="-1">5. 死锁与并发控制 <a class="header-anchor" href="#_5-死锁与并发控制" aria-label="Permalink to &quot;5. 死锁与并发控制&quot;">​</a></h2><ul><li><strong>死锁</strong>：两个或多个事务互相等待对方释放锁，导致永久阻塞。</li><li><strong>检测与解决</strong>：InnoDB 会自动检测死锁并回滚其中一个事务。</li><li><strong>避免死锁建议</strong>： <ul><li>保持一致的操作顺序</li><li>控制事务粒度，缩短事务时间</li><li>合理设计索引，减少锁冲突</li></ul></li></ul><h2 id="_6-锁机制" tabindex="-1">6. 锁机制 <a class="header-anchor" href="#_6-锁机制" aria-label="Permalink to &quot;6. 锁机制&quot;">​</a></h2><ul><li><strong>行级锁</strong>：InnoDB 支持，锁定单行，支持高并发。</li><li><strong>表级锁</strong>：MyISAM 支持，锁定整张表，适合读多写少。</li><li><strong>意向锁</strong>：InnoDB 自动加锁，辅助行锁与表锁兼容。</li><li><strong>间隙锁/临键锁</strong>：防止幻读。</li></ul><h2 id="_7-常见问题与最佳实践" tabindex="-1">7. 常见问题与最佳实践 <a class="header-anchor" href="#_7-常见问题与最佳实践" aria-label="Permalink to &quot;7. 常见问题与最佳实践&quot;">​</a></h2><ul><li>避免长事务，及时提交或回滚</li><li>尽量使用默认的 InnoDB 存储引擎</li><li>只在必要时使用显式事务</li><li>事务中避免交互等待（如用户输入）</li><li>监控死锁日志，定期优化 SQL</li></ul><h2 id="_8-node-js-事务操作代码示例-jsdoc-注释" tabindex="-1">8. Node.js 事务操作代码示例（JSDoc 注释） <a class="header-anchor" href="#_8-node-js-事务操作代码示例-jsdoc-注释" aria-label="Permalink to &quot;8. Node.js 事务操作代码示例（JSDoc 注释）&quot;">​</a></h2><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 转账操作（带事务）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {import(&#39;mysql2/promise&#39;).Connection}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> conn</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {number}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fromId</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {number}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> toId</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {number}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> amount</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@returns</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {Promise&lt;void&gt;}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> transfer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">conn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">fromId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">toId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">amount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> conn.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">beginTransaction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> conn.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;UPDATE accounts SET balance = balance - ? WHERE id = ?&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [amount, fromId]);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> conn.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;UPDATE accounts SET balance = balance + ? WHERE id = ?&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [amount, toId]);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> conn.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">commit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (e) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> conn.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rollback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    throw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><hr><blockquote><p>事务是保障数据一致性和可靠性的核心机制，建议团队严格遵循最佳实践，定期复盘死锁和并发问题。</p></blockquote>`,26)]))}const c=i(t,[["render",h]]);export{o as __pageData,c as default};
