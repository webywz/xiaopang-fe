import{_ as a,c as i,o as n,ag as e}from"./chunks/framework.DPDPlp3K.js";const d=JSON.parse('{"title":"Spring Batch 详解","description":"","frontmatter":{"title":"Spring Batch 详解"},"headers":[],"relativePath":"spring/spring-batch.md","filePath":"spring/spring-batch.md","lastUpdated":1747111449000}'),l={name:"spring/spring-batch.md"};function t(r,s,p,h,k,o){return n(),i("div",null,s[0]||(s[0]=[e(`<h1 id="spring-batch-详解" tabindex="-1">Spring Batch 详解 <a class="header-anchor" href="#spring-batch-详解" aria-label="Permalink to &quot;Spring Batch 详解&quot;">​</a></h1><hr><h2 id="_1-批处理架构与spring-batch生态全景" tabindex="-1">1. 批处理架构与Spring Batch生态全景 <a class="header-anchor" href="#_1-批处理架构与spring-batch生态全景" aria-label="Permalink to &quot;1. 批处理架构与Spring Batch生态全景&quot;">​</a></h2><h3 id="_1-1-批处理场景与优势" tabindex="-1">1.1 批处理场景与优势 <a class="header-anchor" href="#_1-1-批处理场景与优势" aria-label="Permalink to &quot;1.1 批处理场景与优势&quot;">​</a></h3><ul><li>大数据量ETL、报表、数据迁移、定时任务、数据清洗</li><li>支持事务、容错、重试、分片、并发、监控</li></ul><h3 id="_1-2-spring-batch-生态组件" tabindex="-1">1.2 Spring Batch 生态组件 <a class="header-anchor" href="#_1-2-spring-batch-生态组件" aria-label="Permalink to &quot;1.2 Spring Batch 生态组件&quot;">​</a></h3><ul><li>Job、Step、JobRepository、JobLauncher、JobExplorer、JobOperator</li><li>ItemReader、ItemProcessor、ItemWriter</li><li>ExecutionContext、Listener、Partitioner、Tasklet</li></ul><h3 id="_1-3-架构图" tabindex="-1">1.3 架构图 <a class="header-anchor" href="#_1-3-架构图" aria-label="Permalink to &quot;1.3 架构图&quot;">​</a></h3><div class="language-mermaid vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">graph TD</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    A[JobLauncher] --&gt; B[Job]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B --&gt; C[Step]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    C --&gt; D[ItemReader]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    C --&gt; E[ItemProcessor]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    C --&gt; F[ItemWriter]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B --&gt; G[JobRepository]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B --&gt; H[ExecutionContext]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B --&gt; I[Listener]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><hr><h2 id="_2-job-step-executioncontext-jobrepository极致细化" tabindex="-1">2. Job/Step/ExecutionContext/JobRepository极致细化 <a class="header-anchor" href="#_2-job-step-executioncontext-jobrepository极致细化" aria-label="Permalink to &quot;2. Job/Step/ExecutionContext/JobRepository极致细化&quot;">​</a></h2><h3 id="_2-1-job-step-executioncontext原理" tabindex="-1">2.1 Job/Step/ExecutionContext原理 <a class="header-anchor" href="#_2-1-job-step-executioncontext原理" aria-label="Permalink to &quot;2.1 Job/Step/ExecutionContext原理&quot;">​</a></h3><ul><li>Job：批处理作业，包含多个Step</li><li>Step：最小执行单元，支持Tasklet/Chunk两种模式</li><li>ExecutionContext：作业/步骤上下文，支持断点续跑、参数传递</li><li>JobRepository：作业元数据持久化，支持重启、监控</li></ul><h3 id="_2-2-核心源码与时序图" tabindex="-1">2.2 核心源码与时序图 <a class="header-anchor" href="#_2-2-核心源码与时序图" aria-label="Permalink to &quot;2.2 核心源码与时序图&quot;">​</a></h3><div class="language-mermaid vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sequenceDiagram</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    participant User</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    participant JobLauncher</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    participant Job</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    participant Step</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    participant ItemReader</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    participant ItemProcessor</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    participant ItemWriter</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    User-&gt;&gt;JobLauncher: 启动作业</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    JobLauncher-&gt;&gt;Job: run</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Job-&gt;&gt;Step: execute</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Step-&gt;&gt;ItemReader: 读取数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Step-&gt;&gt;ItemProcessor: 处理数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Step-&gt;&gt;ItemWriter: 写出数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Step--&gt;&gt;Job: 完成</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Job--&gt;&gt;JobLauncher: 结果</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><ul><li>核心源码：SimpleJob、SimpleStepHandler、JobRepository、ExecutionContext</li></ul><h3 id="_2-3-job-step配置与实战" tabindex="-1">2.3 Job/Step配置与实战 <a class="header-anchor" href="#_2-3-job-step配置与实战" aria-label="Permalink to &quot;2.3 Job/Step配置与实战&quot;">​</a></h3><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Job </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">importJob</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(JobBuilderFactory jobBuilderFactory, Step step) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jobBuilderFactory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;importJob&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(step).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Step </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">step</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(StepBuilderFactory stepBuilderFactory, ItemReader reader, ItemProcessor processor, ItemWriter writer) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stepBuilderFactory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;step&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Input, Output</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chunk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(reader)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">processor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(processor)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(writer)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><hr><h2 id="_3-itemreader-processor-writer详解与实战" tabindex="-1">3. ItemReader/Processor/Writer详解与实战 <a class="header-anchor" href="#_3-itemreader-processor-writer详解与实战" aria-label="Permalink to &quot;3. ItemReader/Processor/Writer详解与实战&quot;">​</a></h2><h3 id="_3-1-itemreader" tabindex="-1">3.1 ItemReader <a class="header-anchor" href="#_3-1-itemreader" aria-label="Permalink to &quot;3.1 ItemReader&quot;">​</a></h3><ul><li>负责批量读取数据，支持FlatFile、Jdbc、Jpa、MyBatis、Kafka等</li><li>常用实现：FlatFileItemReader、JdbcCursorItemReader、JpaPagingItemReader</li></ul><h3 id="_3-2-itemprocessor" tabindex="-1">3.2 ItemProcessor <a class="header-anchor" href="#_3-2-itemprocessor" aria-label="Permalink to &quot;3.2 ItemProcessor&quot;">​</a></h3><ul><li>负责数据转换、校验、过滤、清洗</li><li>支持链式组合、条件分支</li></ul><h3 id="_3-3-itemwriter" tabindex="-1">3.3 ItemWriter <a class="header-anchor" href="#_3-3-itemwriter" aria-label="Permalink to &quot;3.3 ItemWriter&quot;">​</a></h3><ul><li>负责批量写出数据，支持FlatFile、Jdbc、Jpa、MyBatis、Kafka等</li><li>常用实现：FlatFileItemWriter、JdbcBatchItemWriter、JpaItemWriter</li></ul><h3 id="_3-4-读写实战与自动化测试" tabindex="-1">3.4 读写实战与自动化测试 <a class="header-anchor" href="#_3-4-读写实战与自动化测试" aria-label="Permalink to &quot;3.4 读写实战与自动化测试&quot;">​</a></h3><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FlatFileItemReader</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MyData</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> reader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { ... }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ItemProcessor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MyData, MyData</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> processor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { ... }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> JdbcBatchItemWriter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MyData</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> writer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { ... }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><hr><h2 id="_4-任务调度与分片极致细化" tabindex="-1">4. 任务调度与分片极致细化 <a class="header-anchor" href="#_4-任务调度与分片极致细化" aria-label="Permalink to &quot;4. 任务调度与分片极致细化&quot;">​</a></h2><h3 id="_4-1-分区-并发-远程分片原理" tabindex="-1">4.1 分区/并发/远程分片原理 <a class="header-anchor" href="#_4-1-分区-并发-远程分片原理" aria-label="Permalink to &quot;4.1 分区/并发/远程分片原理&quot;">​</a></h3><ul><li>Partitioner：分区器，按数据/区间/ID分片</li><li>TaskExecutor：并发执行Step</li><li>远程分片：主节点分片，子节点远程执行</li></ul><h3 id="_4-2-分片源码与时序图" tabindex="-1">4.2 分片源码与时序图 <a class="header-anchor" href="#_4-2-分片源码与时序图" aria-label="Permalink to &quot;4.2 分片源码与时序图&quot;">​</a></h3><div class="language-mermaid vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sequenceDiagram</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    participant Master</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    participant Slave1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    participant Slave2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Master-&gt;&gt;Slave1: 分片任务1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Master-&gt;&gt;Slave2: 分片任务2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Slave1-&gt;&gt;JobRepository: 上报进度</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Slave2-&gt;&gt;JobRepository: 上报进度</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="_4-3-分片配置与实战" tabindex="-1">4.3 分片配置与实战 <a class="header-anchor" href="#_4-3-分片配置与实战" aria-label="Permalink to &quot;4.3 分片配置与实战&quot;">​</a></h3><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Step </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">partitionedStep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(StepBuilderFactory stepBuilderFactory, Partitioner partitioner, Step slaveStep, TaskExecutor executor) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stepBuilderFactory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;partitionedStep&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">partitioner</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;slaveStep&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, partitioner)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">step</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(slaveStep)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">taskExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(executor)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><hr><h2 id="_5-容错与重试极致细化" tabindex="-1">5. 容错与重试极致细化 <a class="header-anchor" href="#_5-容错与重试极致细化" aria-label="Permalink to &quot;5. 容错与重试极致细化&quot;">​</a></h2><h3 id="_5-1-skip-retry-restart机制" tabindex="-1">5.1 Skip/Retry/Restart机制 <a class="header-anchor" href="#_5-1-skip-retry-restart机制" aria-label="Permalink to &quot;5.1 Skip/Retry/Restart机制&quot;">​</a></h3><ul><li>Skip：跳过异常数据，继续处理</li><li>Retry：失败重试，支持最大次数、间隔</li><li>Restart：断点续跑，支持失败后重启</li></ul><h3 id="_5-2-容错源码与配置" tabindex="-1">5.2 容错源码与配置 <a class="header-anchor" href="#_5-2-容错源码与配置" aria-label="Permalink to &quot;5.2 容错源码与配置&quot;">​</a></h3><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Step </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stepWithRetry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(StepBuilderFactory stepBuilderFactory, ItemReader reader, ItemProcessor processor, ItemWriter writer) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stepBuilderFactory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;stepWithRetry&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Input, Output</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chunk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(reader)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">processor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(processor)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(writer)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">faultTolerant</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">skip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Exception.class)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">skipLimit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">retry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Exception.class)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">retryLimit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><hr><h2 id="_6-事务管理与幂等性设计极致细化" tabindex="-1">6. 事务管理与幂等性设计极致细化 <a class="header-anchor" href="#_6-事务管理与幂等性设计极致细化" aria-label="Permalink to &quot;6. 事务管理与幂等性设计极致细化&quot;">​</a></h2><h3 id="_6-1-事务边界与回滚机制" tabindex="-1">6.1 事务边界与回滚机制 <a class="header-anchor" href="#_6-1-事务边界与回滚机制" aria-label="Permalink to &quot;6.1 事务边界与回滚机制&quot;">​</a></h3><ul><li>Step/Chunk级事务，支持回滚、补偿</li><li>支持多数据源、分布式事务（集成Seata）</li></ul><h3 id="_6-2-幂等性设计" tabindex="-1">6.2 幂等性设计 <a class="header-anchor" href="#_6-2-幂等性设计" aria-label="Permalink to &quot;6.2 幂等性设计&quot;">​</a></h3><ul><li>唯一索引、幂等表、状态机、分布式锁</li><li>典型场景：数据重复导入、断点续跑</li></ul><hr><h2 id="_7-批量数据校验、分批提交、性能调优极致细化" tabindex="-1">7. 批量数据校验、分批提交、性能调优极致细化 <a class="header-anchor" href="#_7-批量数据校验、分批提交、性能调优极致细化" aria-label="Permalink to &quot;7. 批量数据校验、分批提交、性能调优极致细化&quot;">​</a></h2><h3 id="_7-1-数据校验" tabindex="-1">7.1 数据校验 <a class="header-anchor" href="#_7-1-数据校验" aria-label="Permalink to &quot;7.1 数据校验&quot;">​</a></h3><ul><li>JSR-303注解、Processor中自定义校验、批量校验报告</li></ul><h3 id="_7-2-分批提交与性能调优" tabindex="-1">7.2 分批提交与性能调优 <a class="header-anchor" href="#_7-2-分批提交与性能调优" aria-label="Permalink to &quot;7.2 分批提交与性能调优&quot;">​</a></h3><ul><li>chunkSize调优、批量SQL、并发分片、内存溢出防护</li><li>监控：Actuator、Prometheus、日志埋点</li></ul><hr><h2 id="_8-作业参数、监听器、高级用法极致细化" tabindex="-1">8. 作业参数、监听器、高级用法极致细化 <a class="header-anchor" href="#_8-作业参数、监听器、高级用法极致细化" aria-label="Permalink to &quot;8. 作业参数、监听器、高级用法极致细化&quot;">​</a></h2><h3 id="_8-1-jobparameters-executioncontext" tabindex="-1">8.1 JobParameters/ExecutionContext <a class="header-anchor" href="#_8-1-jobparameters-executioncontext" aria-label="Permalink to &quot;8.1 JobParameters/ExecutionContext&quot;">​</a></h3><ul><li>支持参数传递、断点续跑、动态作业</li></ul><h3 id="_8-2-listener-jobexplorer-joboperator" tabindex="-1">8.2 Listener/JobExplorer/JobOperator <a class="header-anchor" href="#_8-2-listener-jobexplorer-joboperator" aria-label="Permalink to &quot;8.2 Listener/JobExplorer/JobOperator&quot;">​</a></h3><ul><li>作业/步骤监听器，支持前置/后置/失败回调</li><li>JobExplorer：查询作业状态</li><li>JobOperator：远程启动/停止/重启/查询</li></ul><h3 id="_8-3-高级用法" tabindex="-1">8.3 高级用法 <a class="header-anchor" href="#_8-3-高级用法" aria-label="Permalink to &quot;8.3 高级用法&quot;">​</a></h3><ul><li>动态Job注册、Job嵌套、条件分支、决策器、流式Step</li></ul><hr><h2 id="_9-与spring-boot集成、自动装配、监控极致细化" tabindex="-1">9. 与Spring Boot集成、自动装配、监控极致细化 <a class="header-anchor" href="#_9-与spring-boot集成、自动装配、监控极致细化" aria-label="Permalink to &quot;9. 与Spring Boot集成、自动装配、监控极致细化&quot;">​</a></h2><h3 id="_9-1-spring-boot自动装配" tabindex="-1">9.1 Spring Boot自动装配 <a class="header-anchor" href="#_9-1-spring-boot自动装配" aria-label="Permalink to &quot;9.1 Spring Boot自动装配&quot;">​</a></h3><ul><li>spring-boot-starter-batch、自动注册Job、Step、Listener</li><li>application.yml配置示例</li></ul><h3 id="_9-2-监控与健康检查" tabindex="-1">9.2 监控与健康检查 <a class="header-anchor" href="#_9-2-监控与健康检查" aria-label="Permalink to &quot;9.2 监控与健康检查&quot;">​</a></h3><ul><li>Actuator端点、Job/Step状态、Prometheus监控、告警脚本</li></ul><hr><h2 id="_10-生产环境部署、运维、ci-cd极致细化" tabindex="-1">10. 生产环境部署、运维、CI/CD极致细化 <a class="header-anchor" href="#_10-生产环境部署、运维、ci-cd极致细化" aria-label="Permalink to &quot;10. 生产环境部署、运维、CI/CD极致细化&quot;">​</a></h2><h3 id="_10-1-dockerfile-k8s部署yaml" tabindex="-1">10.1 Dockerfile/K8s部署YAML <a class="header-anchor" href="#_10-1-dockerfile-k8s部署yaml" aria-label="Permalink to &quot;10.1 Dockerfile/K8s部署YAML&quot;">​</a></h3><ul><li>Dockerfile、k8s-deployment.yaml、健康检查、弹性伸缩</li></ul><h3 id="_10-2-自动化运维与ci-cd" tabindex="-1">10.2 自动化运维与CI/CD <a class="header-anchor" href="#_10-2-自动化运维与ci-cd" aria-label="Permalink to &quot;10.2 自动化运维与CI/CD&quot;">​</a></h3><ul><li>Jenkinsfile、定时调度、失败告警、日志采集</li></ul><hr><h2 id="_11-常见问题与faq、面试高频题、最佳实践极致细化" tabindex="-1">11. 常见问题与FAQ、面试高频题、最佳实践极致细化 <a class="header-anchor" href="#_11-常见问题与faq、面试高频题、最佳实践极致细化" aria-label="Permalink to &quot;11. 常见问题与FAQ、面试高频题、最佳实践极致细化&quot;">​</a></h2><h3 id="_11-1-faq" tabindex="-1">11.1 FAQ <a class="header-anchor" href="#_11-1-faq" aria-label="Permalink to &quot;11.1 FAQ&quot;">​</a></h3><ul><li>如何实现断点续跑？</li><li>如何处理幂等与重复数据？</li><li>如何监控批处理作业？</li><li>如何实现分布式分片？</li><li>如何与Spring Cloud集成？</li></ul><h3 id="_11-2-高频面试题与标准答案" tabindex="-1">11.2 高频面试题与标准答案 <a class="header-anchor" href="#_11-2-高频面试题与标准答案" aria-label="Permalink to &quot;11.2 高频面试题与标准答案&quot;">​</a></h3><ul><li>Q: Spring Batch核心组件？ A: Job、Step、JobRepository、JobLauncher、ItemReader/Processor/Writer、ExecutionContext、Listener等。</li><li>Q: 如何实现批处理容错？ A: skip、retry、restart机制，支持异常跳过、失败重试、断点续跑。</li><li>Q: 如何实现批量数据高性能？ A: chunk分批、批量SQL、并发分片、内存优化。</li><li>Q: 如何与Spring Boot集成？ A: spring-boot-starter-batch自动装配，配置Job、Step、Listener，支持Actuator监控。</li></ul><h3 id="_11-3-最佳实践" tabindex="-1">11.3 最佳实践 <a class="header-anchor" href="#_11-3-最佳实践" aria-label="Permalink to &quot;11.3 最佳实践&quot;">​</a></h3><ul><li>Job/Step/Chunk/参数/监听器分层设计</li><li>统一异常处理与告警</li><li>生产环境幂等与安全基线</li><li>自动化测试与监控</li></ul><hr><blockquote><p>本文档已极致细化 Spring Batch 全部核心与进阶知识点，适合企业级批处理架构设计、攻防实战与面试深度准备。</p></blockquote>`,84)]))}const c=a(l,[["render",t]]);export{d as __pageData,c as default};
