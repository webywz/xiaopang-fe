import{_ as a,c as i,o as e,ag as n}from"./chunks/framework.DPDPlp3K.js";const c=JSON.parse('{"title":"浏览器缓存机制详解","description":"全面解析浏览器缓存的类型、原理、控制策略与优化技巧，助你提升Web性能与用户体验。","frontmatter":{"layout":"doc","title":"浏览器缓存机制详解","description":"全面解析浏览器缓存的类型、原理、控制策略与优化技巧，助你提升Web性能与用户体验。"},"headers":[],"relativePath":"basic/browser/browser-caching-mechanisms.md","filePath":"basic/browser/browser-caching-mechanisms.md","lastUpdated":1746781833000}'),l={name:"basic/browser/browser-caching-mechanisms.md"};function h(t,s,r,p,k,d){return e(),i("div",null,s[0]||(s[0]=[n(`<h1 id="浏览器缓存机制详解" tabindex="-1">浏览器缓存机制详解 <a class="header-anchor" href="#浏览器缓存机制详解" aria-label="Permalink to &quot;浏览器缓存机制详解&quot;">​</a></h1><p>浏览器缓存是提升Web性能的关键机制。本文将系统讲解缓存的类型、原理、控制策略与优化技巧。</p><h2 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;目录&quot;">​</a></h2><ul><li><a href="#浏览器缓存类型概述">浏览器缓存类型概述</a></li><li><a href="#强缓存与协商缓存原理">强缓存与协商缓存原理</a></li><li><a href="#缓存控制策略与header">缓存控制策略与Header</a></li><li><a href="#缓存失效与更新机制">缓存失效与更新机制</a></li><li><a href="#优化技巧与调试工具">优化技巧与调试工具</a></li></ul><h2 id="浏览器缓存类型概述" tabindex="-1">浏览器缓存类型概述 <a class="header-anchor" href="#浏览器缓存类型概述" aria-label="Permalink to &quot;浏览器缓存类型概述&quot;">​</a></h2><ul><li><strong>强缓存</strong>：无需请求服务器，直接使用本地缓存（如Expires、Cache-Control: max-age）</li><li><strong>协商缓存</strong>：需向服务器验证缓存有效性（如Last-Modified/If-Modified-Since、ETag/If-None-Match）</li><li><strong>其他缓存</strong>：Service Worker、Cache Storage、IndexedDB等</li></ul><h2 id="强缓存与协商缓存原理" tabindex="-1">强缓存与协商缓存原理 <a class="header-anchor" href="#强缓存与协商缓存原理" aria-label="Permalink to &quot;强缓存与协商缓存原理&quot;">​</a></h2><ul><li>强缓存命中时直接返回本地资源，状态码200（from disk/memory cache）</li><li>协商缓存需与服务器通信，若未变更返回304</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 检查资源是否命中强缓存</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {Response}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> fetch响应对象</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@returns</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {boolean}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isStrongCache</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res.headers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Age&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res.headers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Cache-Control&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">includes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;max-age&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="缓存控制策略与header" tabindex="-1">缓存控制策略与Header <a class="header-anchor" href="#缓存控制策略与header" aria-label="Permalink to &quot;缓存控制策略与Header&quot;">​</a></h2><ul><li><code>Cache-Control</code>：max-age、no-cache、no-store、public、private等</li><li><code>Expires</code>：资源过期时间（HTTP/1.0）</li><li><code>ETag</code>/<code>Last-Modified</code>：协商缓存标识</li></ul><div class="language-http vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Cache-Control</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> max-age=3600, public</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ETag</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;abc123&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="缓存失效与更新机制" tabindex="-1">缓存失效与更新机制 <a class="header-anchor" href="#缓存失效与更新机制" aria-label="Permalink to &quot;缓存失效与更新机制&quot;">​</a></h2><ul><li>资源内容变更需更新ETag/Last-Modified，或更改文件名（hash）</li><li>Service Worker可实现更灵活的缓存更新策略</li></ul><h2 id="优化技巧与调试工具" tabindex="-1">优化技巧与调试工具 <a class="header-anchor" href="#优化技巧与调试工具" aria-label="Permalink to &quot;优化技巧与调试工具&quot;">​</a></h2><ul><li>合理设置缓存Header，提升命中率</li><li>静态资源采用文件指纹（hash）防止误缓存</li><li>Chrome DevTools &gt; Network面板分析缓存命中与失效</li></ul><hr><blockquote><p>参考资料：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Caching" target="_blank" rel="noreferrer">MDN 浏览器缓存</a></p></blockquote>`,18)]))}const g=a(l,[["render",h]]);export{c as __pageData,g as default};
