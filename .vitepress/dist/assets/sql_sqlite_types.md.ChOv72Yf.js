import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.DPDPlp3K.js";const c=JSON.parse('{"title":"SQLite 数据类型","description":"","frontmatter":{},"headers":[],"relativePath":"sql/sqlite/types.md","filePath":"sql/sqlite/types.md","lastUpdated":1747206212000}'),e={name:"sql/sqlite/types.md"};function t(h,s,p,r,k,d){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="sqlite-数据类型" tabindex="-1">SQLite 数据类型 <a class="header-anchor" href="#sqlite-数据类型" aria-label="Permalink to &quot;SQLite 数据类型&quot;">​</a></h1><p>内容建设中，敬请期待。</p><h1 id="sqlite-常用数据类型" tabindex="-1">SQLite 常用数据类型 <a class="header-anchor" href="#sqlite-常用数据类型" aria-label="Permalink to &quot;SQLite 常用数据类型&quot;">​</a></h1><h2 id="数值类型" tabindex="-1">数值类型 <a class="header-anchor" href="#数值类型" aria-label="Permalink to &quot;数值类型&quot;">​</a></h2><ul><li>INTEGER：整型，支持自增（PRIMARY KEY AUTOINCREMENT）</li><li>REAL：浮点数</li><li>NUMERIC：高精度数值，自动适配存储</li></ul><h2 id="字符串类型" tabindex="-1">字符串类型 <a class="header-anchor" href="#字符串类型" aria-label="Permalink to &quot;字符串类型&quot;">​</a></h2><ul><li>TEXT：变长字符串，无长度限制</li><li>VARCHAR(n)：等价于 TEXT（SQLite 不强制长度）</li></ul><h2 id="日期与时间类型" tabindex="-1">日期与时间类型 <a class="header-anchor" href="#日期与时间类型" aria-label="Permalink to &quot;日期与时间类型&quot;">​</a></h2><ul><li>SQLite 无专用日期类型，推荐用 TEXT（ISO8601）、REAL（Julian day）、INTEGER（Unix 时间戳）存储</li><li>常用函数：date()、datetime()、strftime()</li></ul><h2 id="布尔与特殊类型" tabindex="-1">布尔与特殊类型 <a class="header-anchor" href="#布尔与特殊类型" aria-label="Permalink to &quot;布尔与特殊类型&quot;">​</a></h2><ul><li>BOOLEAN：实际存储为 0/1（INTEGER）</li><li>BLOB：二进制大对象</li></ul><h2 id="类型转换与兼容性" tabindex="-1">类型转换与兼容性 <a class="header-anchor" href="#类型转换与兼容性" aria-label="Permalink to &quot;类型转换与兼容性&quot;">​</a></h2><ul><li>SQLite 类型系统宽松，字段可存储任意类型（类型亲和性）</li><li>跨库迁移需注意类型严格性差异</li></ul><h2 id="设计建议与常见误区" tabindex="-1">设计建议与常见误区 <a class="header-anchor" href="#设计建议与常见误区" aria-label="Permalink to &quot;设计建议与常见误区&quot;">​</a></h2><ul><li>主键建议用 INTEGER PRIMARY KEY，自动 ROWID</li><li>日期统一格式存储，便于查询与迁移</li><li>避免依赖类型约束，应用层需做校验</li></ul><h2 id="典型-sql-示例" tabindex="-1">典型 SQL 示例 <a class="header-anchor" href="#典型-sql-示例" aria-label="Permalink to &quot;典型 SQL 示例&quot;">​</a></h2><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 创建表</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> logs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INTEGER</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> PRIMARY KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AUTOINCREMENT,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  message</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TEXT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  created_at </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">TEXT</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  -- 推荐存储为 ISO8601 字符串</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="node-js-代码示例-含-jsdoc-注释" tabindex="-1">Node.js 代码示例（含 JSDoc 注释） <a class="header-anchor" href="#node-js-代码示例-含-jsdoc-注释" aria-label="Permalink to &quot;Node.js 代码示例（含 JSDoc 注释）&quot;">​</a></h2><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 插入日志数据</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {sqlite3.Database}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> db</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {object}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> log</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> {message:string,created_at:string}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@returns</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {Promise&lt;void&gt;}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> insertLog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">db</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    db.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;INSERT INTO logs (message, created_at) VALUES (?, ?)&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [log.message, log.created_at], </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (err) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(err);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><hr><p>SQLite 类型宽松，建议统一字段格式，关键数据应用层校验，便于后续迁移与维护。</p>`,21)]))}const o=i(e,[["render",t]]);export{c as __pageData,o as default};
