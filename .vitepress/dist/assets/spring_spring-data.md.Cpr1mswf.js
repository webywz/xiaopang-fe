import{_ as a,c as s,o as e,ag as l}from"./chunks/framework.DPDPlp3K.js";const c=JSON.parse('{"title":"Spring Data 详解","description":"","frontmatter":{"title":"Spring Data 详解"},"headers":[],"relativePath":"spring/spring-data.md","filePath":"spring/spring-data.md","lastUpdated":1747111449000}'),t={name:"spring/spring-data.md"};function n(r,i,h,p,o,d){return e(),s("div",null,i[0]||(i[0]=[l(`<h1 id="spring-data-详解" tabindex="-1">Spring Data 详解 <a class="header-anchor" href="#spring-data-详解" aria-label="Permalink to &quot;Spring Data 详解&quot;">​</a></h1><p>Spring Data 是 Spring 生态下的数据访问家族，极大简化了关系型数据库、NoSQL、搜索引擎等的数据访问开发。</p><h2 id="_1-框架简介" tabindex="-1">1. 框架简介 <a class="header-anchor" href="#_1-框架简介" aria-label="Permalink to &quot;1. 框架简介&quot;">​</a></h2><ul><li>Spring Data 提供统一的 Repository 抽象，支持 JPA、MongoDB、Redis、Elasticsearch、Cassandra、Neo4j 等</li><li>通过接口定义和方法命名规则自动实现数据访问</li><li>与 SpringBoot 无缝集成，自动配置数据源、事务、缓存等</li></ul><h2 id="_2-核心原理" tabindex="-1">2. 核心原理 <a class="header-anchor" href="#_2-核心原理" aria-label="Permalink to &quot;2. 核心原理&quot;">​</a></h2><h3 id="_2-1-repository-接口体系" tabindex="-1">2.1 Repository 接口体系 <a class="header-anchor" href="#_2-1-repository-接口体系" aria-label="Permalink to &quot;2.1 Repository 接口体系&quot;">​</a></h3><ul><li><code>CrudRepository</code>：基础增删改查</li><li><code>PagingAndSortingRepository</code>：分页与排序</li><li><code>JpaRepository</code>：JPA 扩展</li><li><code>MongoRepository</code>、<code>ElasticsearchRepository</code> 等 NoSQL 扩展</li></ul><h3 id="_2-2-自动实现与查询方法" tabindex="-1">2.2 自动实现与查询方法 <a class="header-anchor" href="#_2-2-自动实现与查询方法" aria-label="Permalink to &quot;2.2 自动实现与查询方法&quot;">​</a></h3><ul><li>通过接口方法命名自动生成 SQL/查询语句</li><li>支持 <code>findByXxx</code>、<code>countByXxx</code>、<code>deleteByXxx</code>、<code>existsByXxx</code> 等</li><li>支持 <code>@Query</code> 注解自定义 JPQL/SQL/DSL</li></ul><h4 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h4><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserRepository</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JpaRepository</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    List&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">findByUsernameAndStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">username</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Integer </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Query</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;select u from User u where u.email like %:email%&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    List&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">searchByEmail</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Param</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;email&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">email</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="_3-常用注解" tabindex="-1">3. 常用注解 <a class="header-anchor" href="#_3-常用注解" aria-label="Permalink to &quot;3. 常用注解&quot;">​</a></h2><ul><li><code>@Entity</code>、<code>@Table</code>、<code>@Id</code>、<code>@GeneratedValue</code>（JPA）</li><li><code>@Document</code>（MongoDB/Elasticsearch）</li><li><code>@Query</code>、<code>@Modifying</code>、<code>@Transactional</code></li><li><code>@EnableJpaRepositories</code>、<code>@EnableMongoRepositories</code> 等</li></ul><h2 id="_4-配置与集成" tabindex="-1">4. 配置与集成 <a class="header-anchor" href="#_4-配置与集成" aria-label="Permalink to &quot;4. 配置与集成&quot;">​</a></h2><h3 id="_4-1-jpa-配置" tabindex="-1">4.1 JPA 配置 <a class="header-anchor" href="#_4-1-jpa-配置" aria-label="Permalink to &quot;4.1 JPA 配置&quot;">​</a></h3><ul><li>依赖：<code>spring-boot-starter-data-jpa</code></li><li>application.yml 配置数据源、JPA 属性</li><li>支持多数据源、主从分离</li></ul><h3 id="_4-2-mongodb-redis-elasticsearch-配置" tabindex="-1">4.2 MongoDB/Redis/Elasticsearch 配置 <a class="header-anchor" href="#_4-2-mongodb-redis-elasticsearch-配置" aria-label="Permalink to &quot;4.2 MongoDB/Redis/Elasticsearch 配置&quot;">​</a></h3><ul><li>依赖：<code>spring-boot-starter-data-mongodb</code>、<code>spring-boot-starter-data-redis</code>、<code>spring-boot-starter-data-elasticsearch</code></li><li>application.yml 配置主机、端口、认证、连接池等</li></ul><h3 id="_4-3-事务管理" tabindex="-1">4.3 事务管理 <a class="header-anchor" href="#_4-3-事务管理" aria-label="Permalink to &quot;4.3 事务管理&quot;">​</a></h3><ul><li>JPA 默认支持声明式事务（@Transactional）</li><li>MongoDB/Redis/ES 支持部分事务特性</li></ul><h2 id="_5-分页与排序" tabindex="-1">5. 分页与排序 <a class="header-anchor" href="#_5-分页与排序" aria-label="Permalink to &quot;5. 分页与排序&quot;">​</a></h2><ul><li><code>Pageable</code>、<code>Sort</code> 接口</li><li>支持方法参数自动注入</li><li>示例：<div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Page</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">User</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> findByStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Integer status, Pageable pageable);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul><h2 id="_6-复杂查询与动态查询" tabindex="-1">6. 复杂查询与动态查询 <a class="header-anchor" href="#_6-复杂查询与动态查询" aria-label="Permalink to &quot;6. 复杂查询与动态查询&quot;">​</a></h2><ul><li><code>@Query</code> 注解自定义 JPQL/SQL/DSL</li><li><code>Specification</code> 动态条件查询（JPA）</li><li>QueryDSL、Criteria API 支持复杂查询</li></ul><h3 id="示例-1" tabindex="-1">示例 <a class="header-anchor" href="#示例-1" aria-label="Permalink to &quot;示例&quot;">​</a></h3><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserRepository</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JpaRepository</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">JpaSpecificationExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Service 层</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Specification&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; spec </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (root, query, cb) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cb.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">equal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(root.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;status&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">List&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; users </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userRepository.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">findAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(spec);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="_7-缓存与性能优化" tabindex="-1">7. 缓存与性能优化 <a class="header-anchor" href="#_7-缓存与性能优化" aria-label="Permalink to &quot;7. 缓存与性能优化&quot;">​</a></h2><ul><li>支持二级缓存（EhCache、Redis）</li><li>查询投影、DTO 映射、只查必要字段</li><li>批量操作、懒加载、分页优化</li></ul><h2 id="_8-与-springboot-的集成" tabindex="-1">8. 与 SpringBoot 的集成 <a class="header-anchor" href="#_8-与-springboot-的集成" aria-label="Permalink to &quot;8. 与 SpringBoot 的集成&quot;">​</a></h2><ul><li>SpringBoot 自动装配数据源、事务、Repository</li><li>application.yml 配置即可，无需 XML</li><li>支持多数据源、分库分表、读写分离</li></ul><h2 id="_9-源码剖析-简要" tabindex="-1">9. 源码剖析（简要） <a class="header-anchor" href="#_9-源码剖析-简要" aria-label="Permalink to &quot;9. 源码剖析（简要）&quot;">​</a></h2><ul><li>RepositoryFactoryBean：自动实现接口</li><li>SimpleJpaRepository：JPA 默认实现</li><li>QueryLookupStrategy：方法名解析</li><li>MappingContext：实体映射元数据</li></ul><h2 id="_10-最佳实践" tabindex="-1">10. 最佳实践 <a class="header-anchor" href="#_10-最佳实践" aria-label="Permalink to &quot;10. 最佳实践&quot;">​</a></h2><ul><li>Repository 只做数据访问，业务逻辑下沉到 Service</li><li>方法命名规范，复杂查询用 @Query 或 Specification</li><li>合理分页、排序、缓存，提升性能</li><li>事务边界清晰，避免嵌套事务</li><li>多数据源/分库分表用专用中间件</li></ul><h2 id="_11-常见问题与-faq" tabindex="-1">11. 常见问题与 FAQ <a class="header-anchor" href="#_11-常见问题与-faq" aria-label="Permalink to &quot;11. 常见问题与 FAQ&quot;">​</a></h2><h3 id="q-findbyxxx-方法支持哪些关键字" tabindex="-1">Q: findByXxx 方法支持哪些关键字？ <a class="header-anchor" href="#q-findbyxxx-方法支持哪些关键字" aria-label="Permalink to &quot;Q: findByXxx 方法支持哪些关键字？&quot;">​</a></h3><p>A: 支持 And、Or、Between、LessThan、Like、In、Not、OrderBy 等，详见官方文档。</p><h3 id="q-如何实现多表关联查询" tabindex="-1">Q: 如何实现多表关联查询？ <a class="header-anchor" href="#q-如何实现多表关联查询" aria-label="Permalink to &quot;Q: 如何实现多表关联查询？&quot;">​</a></h3><p>A: JPA 用 @Query + JPQL，或用 Specification/QueryDSL；MongoDB/ES 用聚合管道/DSL。</p><h3 id="q-如何优化大表分页" tabindex="-1">Q: 如何优化大表分页？ <a class="header-anchor" href="#q-如何优化大表分页" aria-label="Permalink to &quot;Q: 如何优化大表分页？&quot;">​</a></h3><p>A: 推荐用游标分页（keyset pagination）、只查必要字段、加索引。</p><h3 id="q-如何自定义-repository-实现" tabindex="-1">Q: 如何自定义 Repository 实现？ <a class="header-anchor" href="#q-如何自定义-repository-实现" aria-label="Permalink to &quot;Q: 如何自定义 Repository 实现？&quot;">​</a></h3><p>A: 接口继承 + 实现类命名规范（Impl），或用 @Repository 注解。</p><hr><blockquote><p>Spring Data 极大提升了数据访问开发效率，建议熟练掌握 Repository、查询方法、事务与性能优化，结合业务场景灵活选型。</p></blockquote>`,45)]))}const E=a(t,[["render",n]]);export{c as __pageData,E as default};
