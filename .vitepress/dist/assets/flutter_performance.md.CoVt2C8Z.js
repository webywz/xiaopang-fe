import{_ as i,c as l,o as e,ag as t}from"./chunks/framework.DPDPlp3K.js";const p=JSON.parse('{"title":"性能优化","description":"","frontmatter":{"title":"性能优化"},"headers":[],"relativePath":"flutter/performance.md","filePath":"flutter/performance.md","lastUpdated":1747310844000}'),r={name:"flutter/performance.md"};function s(o,a,n,h,d,u){return e(),l("div",null,a[0]||(a[0]=[t('<p>/**</p><ul><li>Flutter性能优化</li><li>@description 介绍Flutter常见的性能优化方法与建议。 */</li></ul><h1 id="性能优化" tabindex="-1">性能优化 <a class="header-anchor" href="#性能优化" aria-label="Permalink to &quot;性能优化&quot;">​</a></h1><h2 id="构建优化" tabindex="-1">构建优化 <a class="header-anchor" href="#构建优化" aria-label="Permalink to &quot;构建优化&quot;">​</a></h2><ul><li>使用 const 构造函数，减少不必要的重建。</li><li>合理拆分 Widget，避免大组件树。</li><li>使用 const Text、const Widget 提升性能。</li></ul><h2 id="渲染优化" tabindex="-1">渲染优化 <a class="header-anchor" href="#渲染优化" aria-label="Permalink to &quot;渲染优化&quot;">​</a></h2><ul><li>避免在 build 方法中执行耗时操作。</li><li>使用 ListView.builder 优化长列表。</li><li>使用 RepaintBoundary 隔离重绘区域。</li></ul><h2 id="内存优化" tabindex="-1">内存优化 <a class="header-anchor" href="#内存优化" aria-label="Permalink to &quot;内存优化&quot;">​</a></h2><ul><li>及时释放不再使用的资源（如图片、控制器）。</li><li>避免内存泄漏，关注 Stream、Controller 的关闭。</li></ul><h2 id="启动速度优化" tabindex="-1">启动速度优化 <a class="header-anchor" href="#启动速度优化" aria-label="Permalink to &quot;启动速度优化&quot;">​</a></h2><ul><li>精简依赖，减少包体积。</li><li>使用延迟加载（deferred import）按需加载模块。</li><li>首页尽量只渲染必要内容，异步加载次要内容。</li></ul><h2 id="图片与资源优化" tabindex="-1">图片与资源优化 <a class="header-anchor" href="#图片与资源优化" aria-label="Permalink to &quot;图片与资源优化&quot;">​</a></h2><ul><li>使用合适分辨率的图片，避免过大。</li><li>图片懒加载与缓存（如 cached_network_image）。</li><li>SVG、矢量图优先。</li></ul><h2 id="代码分包与按需加载" tabindex="-1">代码分包与按需加载 <a class="header-anchor" href="#代码分包与按需加载" aria-label="Permalink to &quot;代码分包与按需加载&quot;">​</a></h2><ul><li>使用 Flutter 的 deferred import 实现代码分包。</li><li>按需加载大模块，提升首屏速度。</li></ul><h2 id="性能监控与分析工具" tabindex="-1">性能监控与分析工具 <a class="header-anchor" href="#性能监控与分析工具" aria-label="Permalink to &quot;性能监控与分析工具&quot;">​</a></h2><ul><li>DevTools 性能分析、帧率监控、内存检测。</li><li>使用 Flutter Inspector 检查 Widget 树。</li></ul><h2 id="性能优化实战建议" tabindex="-1">性能优化实战建议 <a class="header-anchor" href="#性能优化实战建议" aria-label="Permalink to &quot;性能优化实战建议&quot;">​</a></h2><ul><li>定期分析性能瓶颈，持续优化。</li><li>关注官方性能优化文档与社区最佳实践。</li></ul><h2 id="常见优化点" tabindex="-1">常见优化点 <a class="header-anchor" href="#常见优化点" aria-label="Permalink to &quot;常见优化点&quot;">​</a></h2><ul><li>避免不必要的重建（如合理使用 const、Key）</li><li>使用 ListView.builder 优化长列表</li><li>图片懒加载与缓存</li><li>合理拆分组件，减少 Widget 层级</li><li>使用 DevTools 进行性能分析</li></ul><h2 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h2><div class="language-dart vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;常量文本&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="工具推荐" tabindex="-1">工具推荐 <a class="header-anchor" href="#工具推荐" aria-label="Permalink to &quot;工具推荐&quot;">​</a></h2><ul><li>DevTools</li><li>Flutter Inspector</li></ul>',25)]))}const b=i(r,[["render",s]]);export{p as __pageData,b as default};
