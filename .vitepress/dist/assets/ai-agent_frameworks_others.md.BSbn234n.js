import{_ as a,c as i,o as n,ag as t}from"./chunks/framework.DPDPlp3K.js";const o=JSON.parse('{"title":"其他 AI Agent 框架","description":"","frontmatter":{},"headers":[],"relativePath":"ai-agent/frameworks/others.md","filePath":"ai-agent/frameworks/others.md","lastUpdated":1747212070000}'),l={name:"ai-agent/frameworks/others.md"};function e(h,s,p,r,k,d){return n(),i("div",null,s[0]||(s[0]=[t(`<h1 id="其他-ai-agent-框架" tabindex="-1">其他 AI Agent 框架 <a class="header-anchor" href="#其他-ai-agent-框架" aria-label="Permalink to &quot;其他 AI Agent 框架&quot;">​</a></h1><h2 id="_1-主流框架与生态简介" tabindex="-1">1. 主流框架与生态简介 <a class="header-anchor" href="#_1-主流框架与生态简介" aria-label="Permalink to &quot;1. 主流框架与生态简介&quot;">​</a></h2><p>除 LangChain、AutoGen、CrewAI、MetaGPT、Haystack、Flowise、AgentVerse 外，AI Agent 领域还有众多主流框架和平台，涵盖国际与国内生态。</p><h3 id="openai-function-calling" tabindex="-1">OpenAI Function Calling <a class="header-anchor" href="#openai-function-calling" aria-label="Permalink to &quot;OpenAI Function Calling&quot;">​</a></h3><ul><li><strong>简介</strong>：OpenAI 官方推出的函数调用机制，支持 LLM 直接调用外部函数，实现工具集成与自动化。</li><li><strong>核心特性</strong>：原生支持 GPT-4/3.5，自动参数解析，安全沙箱执行。</li><li><strong>适用场景</strong>：智能问答、自动化办公、API 集成等。</li></ul><h3 id="百度文心-agent" tabindex="-1">百度文心 Agent <a class="header-anchor" href="#百度文心-agent" aria-label="Permalink to &quot;百度文心 Agent&quot;">​</a></h3><ul><li><strong>简介</strong>：基于文心大模型的智能体开发平台，支持多模态感知、工具链集成、企业级应用。</li><li><strong>核心特性</strong>：多模态输入、丰富插件生态、企业知识库对接。</li><li><strong>适用场景</strong>：企业智能助手、知识管理、自动化办公。</li></ul><h3 id="阿里通义-agent" tabindex="-1">阿里通义 Agent <a class="header-anchor" href="#阿里通义-agent" aria-label="Permalink to &quot;阿里通义 Agent&quot;">​</a></h3><ul><li><strong>简介</strong>：阿里云推出的通义大模型智能体平台，支持多智能体协作、流程自动化、插件扩展。</li><li><strong>核心特性</strong>：多 Agent 协作、流程编排、云原生集成。</li><li><strong>适用场景</strong>：企业自动化、智能客服、数据分析。</li></ul><h3 id="智谱-glm-agent" tabindex="-1">智谱 GLM Agent <a class="header-anchor" href="#智谱-glm-agent" aria-label="Permalink to &quot;智谱 GLM Agent&quot;">​</a></h3><ul><li><strong>简介</strong>：智谱 AI 推出的 GLM 大模型智能体框架，支持多语言、多模态、插件化开发。</li><li><strong>核心特性</strong>：多语言支持、插件机制、知识库集成。</li><li><strong>适用场景</strong>：多语言问答、知识检索、企业应用。</li></ul><h2 id="_2-框架对比与选型建议" tabindex="-1">2. 框架对比与选型建议 <a class="header-anchor" href="#_2-框架对比与选型建议" aria-label="Permalink to &quot;2. 框架对比与选型建议&quot;">​</a></h2><table tabindex="0"><thead><tr><th>框架/平台</th><th>主要特性</th><th>适用场景</th></tr></thead><tbody><tr><td>OpenAI Function Calling</td><td>原生 LLM 函数调用，API 集成</td><td>通用智能体、自动化办公</td></tr><tr><td>百度文心 Agent</td><td>多模态、企业级、插件生态</td><td>企业知识管理、智能助手</td></tr><tr><td>阿里通义 Agent</td><td>多 Agent 协作、流程自动化</td><td>企业自动化、客服</td></tr><tr><td>智谱 GLM Agent</td><td>多语言、多模态、插件化</td><td>多语言问答、知识检索</td></tr></tbody></table><h2 id="_3-jsdoc-代码示例" tabindex="-1">3. JSDoc 代码示例 <a class="header-anchor" href="#_3-jsdoc-代码示例" aria-label="Permalink to &quot;3. JSDoc 代码示例&quot;">​</a></h2><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * OpenAI Function Calling 示例</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {string}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> functionName</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> - 函数名称</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {object}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> params</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> - 参数对象</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {object}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> openai</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> - OpenAI 接口实例</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@returns</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {Promise&lt;any&gt;}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 调用结果</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> callOpenAIFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">functionName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">params</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">openai</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> openai.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">callFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(functionName, params);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 插件集成调用示例</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {string}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pluginName</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> - 插件名称</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {object}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> params</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> - 参数对象</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {object}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> agent</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> - 智能体实例</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@returns</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {Promise&lt;any&gt;}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 插件调用结果</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> callPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">pluginName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">params</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">agent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> agent.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">usePlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pluginName, params);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h2 id="_4-实践要点与扩展建议" tabindex="-1">4. 实践要点与扩展建议 <a class="header-anchor" href="#_4-实践要点与扩展建议" aria-label="Permalink to &quot;4. 实践要点与扩展建议&quot;">​</a></h2><ul><li>根据业务需求选择合适的框架，关注生态与扩展性</li><li>善用原生函数调用与插件机制，提升系统能力</li><li>关注数据安全、合规与多模态支持</li><li>可结合主流框架实现混合架构，适应复杂场景</li></ul><hr><p>AI Agent 生态持续丰富，选型时应结合实际需求、技术栈和生态支持，灵活集成多种能力。</p>`,19)]))}const c=a(l,[["render",e]]);export{o as __pageData,c as default};
