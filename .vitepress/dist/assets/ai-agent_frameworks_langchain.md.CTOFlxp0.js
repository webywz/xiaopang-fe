import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.DPDPlp3K.js";const o=JSON.parse('{"title":"LangChain","description":"","frontmatter":{},"headers":[],"relativePath":"ai-agent/frameworks/langchain.md","filePath":"ai-agent/frameworks/langchain.md","lastUpdated":1747212070000}'),h={name:"ai-agent/frameworks/langchain.md"};function e(t,s,p,k,r,g){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="langchain" tabindex="-1">LangChain <a class="header-anchor" href="#langchain" aria-label="Permalink to &quot;LangChain&quot;">​</a></h1><h2 id="_1-框架简介" tabindex="-1">1. 框架简介 <a class="header-anchor" href="#_1-框架简介" aria-label="Permalink to &quot;1. 框架简介&quot;">​</a></h2><p>LangChain 是当前最流行的 LLM Agent 框架之一，专为大语言模型（LLM）驱动的智能体应用设计。它支持链式思维（Chain-of-Thought）、工具集成、多 Agent 协作等能力，极大简化了智能体开发流程。</p><h2 id="_2-核心特性" tabindex="-1">2. 核心特性 <a class="header-anchor" href="#_2-核心特性" aria-label="Permalink to &quot;2. 核心特性&quot;">​</a></h2><ul><li>支持多种 LLM（如 OpenAI、Anthropic、GLM 等）</li><li>丰富的工具链与插件生态</li><li>链式调用与任务分解（Chain/Agent/Tool）</li><li>多智能体协作与消息通信</li><li>记忆与上下文管理模块</li><li>易于扩展与二次开发</li></ul><h2 id="_3-技术原理与架构" tabindex="-1">3. 技术原理与架构 <a class="header-anchor" href="#_3-技术原理与架构" aria-label="Permalink to &quot;3. 技术原理与架构&quot;">​</a></h2><p>LangChain 采用&quot;链（Chain）+ 智能体（Agent）+ 工具（Tool）&quot;的分层架构：</p><ul><li><strong>Chain</strong>：将多个任务/模块串联为流水线，支持分步推理与多轮交互</li><li><strong>Agent</strong>：具备自主决策、工具调用、上下文管理等能力</li><li><strong>Tool</strong>：可插拔的外部功能模块，如搜索、数据库、API 等</li><li><strong>Memory</strong>：支持短期/长期记忆，提升多轮对话体验</li></ul><h2 id="_4-典型应用场景" tabindex="-1">4. 典型应用场景 <a class="header-anchor" href="#_4-典型应用场景" aria-label="Permalink to &quot;4. 典型应用场景&quot;">​</a></h2><ul><li>智能问答与对话系统</li><li>自动化办公与流程机器人</li><li>多智能体协作与自动编程</li><li>检索增强生成（RAG）</li><li>企业知识库与数据分析</li></ul><h2 id="_5-jsdoc-代码示例" tabindex="-1">5. JSDoc 代码示例 <a class="header-anchor" href="#_5-jsdoc-代码示例" aria-label="Permalink to &quot;5. JSDoc 代码示例&quot;">​</a></h2><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * LangChain Agent 初始化示例</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {object}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> config</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> - Agent 配置参数</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {object}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tools</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> - 工具集</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@returns</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {object}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> Agent 实例</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> initLangChainAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">tools</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 假设有 LangChainAgent 类</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LangChainAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(config, tools);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 链式调用示例</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {object}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> agent</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> - Agent 实例</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {string}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> input</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> - 用户输入</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@returns</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {Promise&lt;string&gt;}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 智能体响应</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> runChain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">agent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> agent.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h2 id="_6-实践要点与扩展建议" tabindex="-1">6. 实践要点与扩展建议 <a class="header-anchor" href="#_6-实践要点与扩展建议" aria-label="Permalink to &quot;6. 实践要点与扩展建议&quot;">​</a></h2><ul><li>合理设计 Chain/Agent/Tool 层次，提升系统可维护性</li><li>善用记忆与上下文管理，优化多轮对话体验</li><li>可结合自定义工具与外部 API 扩展能力</li><li>适合快速原型开发与复杂智能体系统落地</li></ul><hr><p>LangChain 是 LLM Agent 应用开发的首选框架之一，适合各类智能体场景的快速实现与扩展。</p>`,16)]))}const c=i(h,[["render",e]]);export{o as __pageData,c as default};
