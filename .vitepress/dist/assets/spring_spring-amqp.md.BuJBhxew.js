import{_ as i,c as s,o as n,ag as e}from"./chunks/framework.DPDPlp3K.js";const u=JSON.parse('{"title":"Spring AMQP 详解","description":"","frontmatter":{"title":"Spring AMQP 详解"},"headers":[],"relativePath":"spring/spring-amqp.md","filePath":"spring/spring-amqp.md","lastUpdated":1747111449000}'),l={name:"spring/spring-amqp.md"};function t(r,a,h,p,k,d){return n(),s("div",null,a[0]||(a[0]=[e(`<h1 id="spring-amqp-详解" tabindex="-1">Spring AMQP 详解 <a class="header-anchor" href="#spring-amqp-详解" aria-label="Permalink to &quot;Spring AMQP 详解&quot;">​</a></h1><hr><h2 id="_1-消息中间件与spring-amqp生态全景" tabindex="-1">1. 消息中间件与Spring AMQP生态全景 <a class="header-anchor" href="#_1-消息中间件与spring-amqp生态全景" aria-label="Permalink to &quot;1. 消息中间件与Spring AMQP生态全景&quot;">​</a></h2><h3 id="_1-1-消息中间件场景与优势" tabindex="-1">1.1 消息中间件场景与优势 <a class="header-anchor" href="#_1-1-消息中间件场景与优势" aria-label="Permalink to &quot;1.1 消息中间件场景与优势&quot;">​</a></h3><ul><li>系统解耦、异步削峰、流量削峰、可靠传递、事件驱动</li><li>典型场景：订单、支付、通知、日志、数据同步</li></ul><h3 id="_1-2-spring-amqp-生态组件" tabindex="-1">1.2 Spring AMQP 生态组件 <a class="header-anchor" href="#_1-2-spring-amqp-生态组件" aria-label="Permalink to &quot;1.2 Spring AMQP 生态组件&quot;">​</a></h3><ul><li>RabbitTemplate、AmqpAdmin、MessageListenerContainer、Message、Exchange、Queue、Binding</li><li>支持RabbitMQ、Qpid等AMQP协议实现</li></ul><h3 id="_1-3-架构图" tabindex="-1">1.3 架构图 <a class="header-anchor" href="#_1-3-架构图" aria-label="Permalink to &quot;1.3 架构图&quot;">​</a></h3><div class="language-mermaid vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">graph TD</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    A[Producer] --&gt; B[RabbitTemplate]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B --&gt; C[Exchange]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    C --&gt; D[Queue]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    D --&gt; E[Consumer]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    E --&gt; F[MessageListenerContainer]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><hr><h2 id="_2-核心原理与源码极致细化" tabindex="-1">2. 核心原理与源码极致细化 <a class="header-anchor" href="#_2-核心原理与源码极致细化" aria-label="Permalink to &quot;2. 核心原理与源码极致细化&quot;">​</a></h2><h3 id="_2-1-rabbittemplate-amqpadmin-listenercontainer原理" tabindex="-1">2.1 RabbitTemplate/AmqpAdmin/ListenerContainer原理 <a class="header-anchor" href="#_2-1-rabbittemplate-amqpadmin-listenercontainer原理" aria-label="Permalink to &quot;2.1 RabbitTemplate/AmqpAdmin/ListenerContainer原理&quot;">​</a></h3><ul><li>RabbitTemplate：消息发送/接收、事务、回调</li><li>AmqpAdmin：队列、交换机、绑定声明与管理</li><li>MessageListenerContainer：消息监听、消费、并发、ACK</li><li>Message：消息体+Header</li></ul><h3 id="_2-2-源码与时序图" tabindex="-1">2.2 源码与时序图 <a class="header-anchor" href="#_2-2-源码与时序图" aria-label="Permalink to &quot;2.2 源码与时序图&quot;">​</a></h3><div class="language-mermaid vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sequenceDiagram</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    participant Producer</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    participant RabbitTemplate</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    participant Exchange</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    participant Queue</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    participant ListenerContainer</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    participant Consumer</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Producer-&gt;&gt;RabbitTemplate: convertAndSend</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    RabbitTemplate-&gt;&gt;Exchange: 路由消息</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Exchange-&gt;&gt;Queue: 投递消息</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ListenerContainer-&gt;&gt;Queue: 拉取消息</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Queue-&gt;&gt;ListenerContainer: 消息</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ListenerContainer-&gt;&gt;Consumer: onMessage</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><ul><li>核心源码：RabbitTemplate、SimpleMessageListenerContainer、Message、AmqpAdmin</li></ul><h3 id="_2-3-配置与实战" tabindex="-1">2.3 配置与实战 <a class="header-anchor" href="#_2-3-配置与实战" aria-label="Permalink to &quot;2.3 配置与实战&quot;">​</a></h3><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Queue </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">queue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Queue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;test-queue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DirectExchange </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exchange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DirectExchange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;test-ex&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Binding </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">binding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BindingBuilder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">queue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exchange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;rk&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RabbitTemplate </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rabbitTemplate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ConnectionFactory cf) { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RabbitTemplate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cf); }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><hr><h2 id="_3-交换机、队列、路由极致细化" tabindex="-1">3. 交换机、队列、路由极致细化 <a class="header-anchor" href="#_3-交换机、队列、路由极致细化" aria-label="Permalink to &quot;3. 交换机、队列、路由极致细化&quot;">​</a></h2><h3 id="_3-1-交换机类型" tabindex="-1">3.1 交换机类型 <a class="header-anchor" href="#_3-1-交换机类型" aria-label="Permalink to &quot;3.1 交换机类型&quot;">​</a></h3><ul><li>DirectExchange：点对点，精确路由</li><li>TopicExchange：通配符路由，适合多级主题</li><li>FanoutExchange：广播，所有绑定队列都收到</li><li>HeadersExchange：按Header匹配路由</li></ul><h3 id="_3-2-队列与绑定" tabindex="-1">3.2 队列与绑定 <a class="header-anchor" href="#_3-2-队列与绑定" aria-label="Permalink to &quot;3.2 队列与绑定&quot;">​</a></h3><ul><li>Queue：消息缓存，支持持久化、排他、自动删除</li><li>Binding：队列与交换机的路由关系</li></ul><h3 id="_3-3-路由源码与配置" tabindex="-1">3.3 路由源码与配置 <a class="header-anchor" href="#_3-3-路由源码与配置" aria-label="Permalink to &quot;3.3 路由源码与配置&quot;">​</a></h3><ul><li>BindingBuilder、ExchangeBuilder、QueueBuilder</li><li>配置：application.yml</li></ul><div class="language-yaml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">spring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  rabbitmq</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    host</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">localhost</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    port</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5672</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    username</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">guest</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    password</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">guest</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_3-4-实战案例" tabindex="-1">3.4 实战案例 <a class="header-anchor" href="#_3-4-实战案例" aria-label="Permalink to &quot;3.4 实战案例&quot;">​</a></h3><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rabbitTemplate.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">convertAndSend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;test-ex&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;rk&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><hr><h2 id="_4-消息生产与消费、事务、死信、延迟极致细化" tabindex="-1">4. 消息生产与消费、事务、死信、延迟极致细化 <a class="header-anchor" href="#_4-消息生产与消费、事务、死信、延迟极致细化" aria-label="Permalink to &quot;4. 消息生产与消费、事务、死信、延迟极致细化&quot;">​</a></h2><h3 id="_4-1-消息生产与消费" tabindex="-1">4.1 消息生产与消费 <a class="header-anchor" href="#_4-1-消息生产与消费" aria-label="Permalink to &quot;4.1 消息生产与消费&quot;">​</a></h3><ul><li>生产：RabbitTemplate.convertAndSend、消息确认、回调</li><li>消费：@RabbitListener、MessageListenerContainer、ACK模式</li></ul><h3 id="_4-2-事务与幂等" tabindex="-1">4.2 事务与幂等 <a class="header-anchor" href="#_4-2-事务与幂等" aria-label="Permalink to &quot;4.2 事务与幂等&quot;">​</a></h3><ul><li>生产端事务：channel.txSelect/txCommit/txRollback</li><li>消费端幂等：唯一ID、幂等表、分布式锁</li></ul><h3 id="_4-3-重试、死信队列、延迟队列" tabindex="-1">4.3 重试、死信队列、延迟队列 <a class="header-anchor" href="#_4-3-重试、死信队列、延迟队列" aria-label="Permalink to &quot;4.3 重试、死信队列、延迟队列&quot;">​</a></h3><ul><li>重试：RetryTemplate、消费端异常重试</li><li>死信队列：DLX、DLQ、消息转发</li><li>延迟队列：TTL+DLX、RabbitMQ延迟插件</li></ul><h3 id="_4-4-实战与自动化测试" tabindex="-1">4.4 实战与自动化测试 <a class="header-anchor" href="#_4-4-实战与自动化测试" aria-label="Permalink to &quot;4.4 实战与自动化测试&quot;">​</a></h3><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RabbitListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">queues</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;test-queue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String msg) { ... }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><hr><h2 id="_5-消息序列化、安全机制极致细化" tabindex="-1">5. 消息序列化、安全机制极致细化 <a class="header-anchor" href="#_5-消息序列化、安全机制极致细化" aria-label="Permalink to &quot;5. 消息序列化、安全机制极致细化&quot;">​</a></h2><h3 id="_5-1-序列化、压缩、加密、签名" tabindex="-1">5.1 序列化、压缩、加密、签名 <a class="header-anchor" href="#_5-1-序列化、压缩、加密、签名" aria-label="Permalink to &quot;5.1 序列化、压缩、加密、签名&quot;">​</a></h3><ul><li>支持JDK、JSON、Kryo、Protobuf等序列化</li><li>消息压缩：GZIP、Snappy</li><li>加密：AES、RSA</li><li>签名：HMAC、数字签名</li><li>配置：spring.rabbitmq.listener.simple.message-converter</li></ul><h3 id="_5-2-安全机制" tabindex="-1">5.2 安全机制 <a class="header-anchor" href="#_5-2-安全机制" aria-label="Permalink to &quot;5.2 安全机制&quot;">​</a></h3><ul><li>TLS加密、登录认证、权限控制、消息签名、接口限流</li></ul><hr><h2 id="_6-消息可靠性、幂等性、顺序性极致细化" tabindex="-1">6. 消息可靠性、幂等性、顺序性极致细化 <a class="header-anchor" href="#_6-消息可靠性、幂等性、顺序性极致细化" aria-label="Permalink to &quot;6. 消息可靠性、幂等性、顺序性极致细化&quot;">​</a></h2><h3 id="_6-1-可靠性保障" tabindex="-1">6.1 可靠性保障 <a class="header-anchor" href="#_6-1-可靠性保障" aria-label="Permalink to &quot;6.1 可靠性保障&quot;">​</a></h3><ul><li>持久化、Confirm、Return、ACK、重试、死信</li><li>配置：publisher-confirm-type、publisher-returns</li></ul><h3 id="_6-2-幂等性与去重" tabindex="-1">6.2 幂等性与去重 <a class="header-anchor" href="#_6-2-幂等性与去重" aria-label="Permalink to &quot;6.2 幂等性与去重&quot;">​</a></h3><ul><li>唯一业务ID、幂等表、Redis去重、分布式锁</li></ul><h3 id="_6-3-顺序性" tabindex="-1">6.3 顺序性 <a class="header-anchor" href="#_6-3-顺序性" aria-label="Permalink to &quot;6.3 顺序性&quot;">​</a></h3><ul><li>单队列顺序、分区有序、全局有序难度大</li></ul><hr><h2 id="_7-消息监控、告警、自动化测试极致细化" tabindex="-1">7. 消息监控、告警、自动化测试极致细化 <a class="header-anchor" href="#_7-消息监控、告警、自动化测试极致细化" aria-label="Permalink to &quot;7. 消息监控、告警、自动化测试极致细化&quot;">​</a></h2><h3 id="_7-1-监控与健康检查" tabindex="-1">7.1 监控与健康检查 <a class="header-anchor" href="#_7-1-监控与健康检查" aria-label="Permalink to &quot;7.1 监控与健康检查&quot;">​</a></h3><ul><li>RabbitMQ管理控制台、Prometheus、Actuator、告警脚本</li></ul><h3 id="_7-2-自动化测试" tabindex="-1">7.2 自动化测试 <a class="header-anchor" href="#_7-2-自动化测试" aria-label="Permalink to &quot;7.2 自动化测试&quot;">​</a></h3><ul><li>JUnit+Testcontainers、MockRabbitMQ、集成测试</li></ul><hr><h2 id="_8-与spring-boot集成、自动装配、监控极致细化" tabindex="-1">8. 与Spring Boot集成、自动装配、监控极致细化 <a class="header-anchor" href="#_8-与spring-boot集成、自动装配、监控极致细化" aria-label="Permalink to &quot;8. 与Spring Boot集成、自动装配、监控极致细化&quot;">​</a></h2><h3 id="_8-1-spring-boot自动装配" tabindex="-1">8.1 Spring Boot自动装配 <a class="header-anchor" href="#_8-1-spring-boot自动装配" aria-label="Permalink to &quot;8.1 Spring Boot自动装配&quot;">​</a></h3><ul><li>spring-boot-starter-amqp、自动注册RabbitTemplate、Listener、配置优先级</li><li>application.yml配置示例</li></ul><h3 id="_8-2-监控与健康检查" tabindex="-1">8.2 监控与健康检查 <a class="header-anchor" href="#_8-2-监控与健康检查" aria-label="Permalink to &quot;8.2 监控与健康检查&quot;">​</a></h3><ul><li>Actuator端点、RabbitMQ状态、Prometheus监控、告警脚本</li></ul><hr><h2 id="_9-生产环境部署、运维、ci-cd极致细化" tabindex="-1">9. 生产环境部署、运维、CI/CD极致细化 <a class="header-anchor" href="#_9-生产环境部署、运维、ci-cd极致细化" aria-label="Permalink to &quot;9. 生产环境部署、运维、CI/CD极致细化&quot;">​</a></h2><h3 id="_9-1-dockerfile-k8s部署yaml" tabindex="-1">9.1 Dockerfile/K8s部署YAML <a class="header-anchor" href="#_9-1-dockerfile-k8s部署yaml" aria-label="Permalink to &quot;9.1 Dockerfile/K8s部署YAML&quot;">​</a></h3><ul><li>Dockerfile、k8s-deployment.yaml、健康检查、弹性伸缩</li></ul><h3 id="_9-2-自动化运维与ci-cd" tabindex="-1">9.2 自动化运维与CI/CD <a class="header-anchor" href="#_9-2-自动化运维与ci-cd" aria-label="Permalink to &quot;9.2 自动化运维与CI/CD&quot;">​</a></h3><ul><li>Jenkinsfile、定时清理、失败告警、日志采集</li></ul><h3 id="_9-3-性能调优" tabindex="-1">9.3 性能调优 <a class="header-anchor" href="#_9-3-性能调优" aria-label="Permalink to &quot;9.3 性能调优&quot;">​</a></h3><ul><li>连接池、批量确认、预取、分区、监控</li></ul><hr><h2 id="_10-常见问题与faq、面试高频题、最佳实践极致细化" tabindex="-1">10. 常见问题与FAQ、面试高频题、最佳实践极致细化 <a class="header-anchor" href="#_10-常见问题与faq、面试高频题、最佳实践极致细化" aria-label="Permalink to &quot;10. 常见问题与FAQ、面试高频题、最佳实践极致细化&quot;">​</a></h2><h3 id="_10-1-faq" tabindex="-1">10.1 FAQ <a class="header-anchor" href="#_10-1-faq" aria-label="Permalink to &quot;10.1 FAQ&quot;">​</a></h3><ul><li>如何保证消息可靠性？</li><li>如何实现消息幂等？</li><li>如何处理死信与延迟？</li><li>如何监控RabbitMQ？</li><li>如何与Spring Boot集成？</li></ul><h3 id="_10-2-高频面试题与标准答案" tabindex="-1">10.2 高频面试题与标准答案 <a class="header-anchor" href="#_10-2-高频面试题与标准答案" aria-label="Permalink to &quot;10.2 高频面试题与标准答案&quot;">​</a></h3><ul><li>Q: Spring AMQP核心组件？ A: RabbitTemplate、AmqpAdmin、MessageListenerContainer、Exchange、Queue、Binding、Message等。</li><li>Q: 如何实现消息可靠性？ A: 持久化、Confirm、ACK、重试、死信队列、监控。</li><li>Q: 如何实现消息幂等？ A: 唯一ID、幂等表、Redis去重、分布式锁。</li><li>Q: 如何与Spring Boot集成？ A: spring-boot-starter-amqp自动装配，配置RabbitTemplate、Listener，支持Actuator监控。</li></ul><h3 id="_10-3-最佳实践" tabindex="-1">10.3 最佳实践 <a class="header-anchor" href="#_10-3-最佳实践" aria-label="Permalink to &quot;10.3 最佳实践&quot;">​</a></h3><ul><li>交换机/队列/路由/Listener分层设计</li><li>统一异常处理与告警</li><li>生产环境幂等与安全基线</li><li>自动化测试与监控</li></ul><hr><blockquote><p>本文档已极致细化 Spring AMQP 全部核心与进阶知识点，适合企业级消息架构设计、攻防实战与面试深度准备。</p></blockquote>`,83)]))}const c=i(l,[["render",t]]);export{u as __pageData,c as default};
