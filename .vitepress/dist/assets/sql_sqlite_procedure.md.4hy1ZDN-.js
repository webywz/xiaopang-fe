import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.DPDPlp3K.js";const c=JSON.parse('{"title":"SQLite 存储过程与函数","description":"","frontmatter":{},"headers":[],"relativePath":"sql/sqlite/procedure.md","filePath":"sql/sqlite/procedure.md","lastUpdated":1747206212000}'),e={name:"sql/sqlite/procedure.md"};function t(p,s,h,k,r,d){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="sqlite-存储过程与函数" tabindex="-1">SQLite 存储过程与函数 <a class="header-anchor" href="#sqlite-存储过程与函数" aria-label="Permalink to &quot;SQLite 存储过程与函数&quot;">​</a></h1><h2 id="_1-基础与应用场景" tabindex="-1">1. 基础与应用场景 <a class="header-anchor" href="#_1-基础与应用场景" aria-label="Permalink to &quot;1. 基础与应用场景&quot;">​</a></h2><ul><li>SQLite 不支持传统存储过程，但支持触发器（TRIGGER）和自定义函数（UDF）</li><li>适合自动化操作、数据校验、业务逻辑下推等场景</li></ul><h2 id="_2-触发器实现批量逻辑" tabindex="-1">2. 触发器实现批量逻辑 <a class="header-anchor" href="#_2-触发器实现批量逻辑" aria-label="Permalink to &quot;2. 触发器实现批量逻辑&quot;">​</a></h2><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 创建插入触发器</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TRIGGER</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> log_insert</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> AFTER</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> INSERT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> users</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BEGIN</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  INSERT INTO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> logs(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, created_at) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VALUES</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;新用户插入&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">datetime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;now&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">END</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 删除触发器</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DROP</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TRIGGER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> log_insert;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="_3-自定义函数-udf" tabindex="-1">3. 自定义函数（UDF） <a class="header-anchor" href="#_3-自定义函数-udf" aria-label="Permalink to &quot;3. 自定义函数（UDF）&quot;">​</a></h2><ul><li>可用 Node.js/sqlite3/better-sqlite3 注册 JS 函数为 SQL 函数</li></ul><h2 id="_4-性能与安全注意事项" tabindex="-1">4. 性能与安全注意事项 <a class="header-anchor" href="#_4-性能与安全注意事项" aria-label="Permalink to &quot;4. 性能与安全注意事项&quot;">​</a></h2><ul><li>触发器逻辑应简洁，避免递归和死循环</li><li>复杂业务建议在应用层实现</li></ul><h2 id="_5-node-js-代码示例-含-jsdoc-注释" tabindex="-1">5. Node.js 代码示例（含 JSDoc 注释） <a class="header-anchor" href="#_5-node-js-代码示例-含-jsdoc-注释" aria-label="Permalink to &quot;5. Node.js 代码示例（含 JSDoc 注释）&quot;">​</a></h2><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sqlite3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;sqlite3&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">verbose</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 注册自定义函数（UDF）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {sqlite3.Database}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> db</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> registerUDF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">db</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  db.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create_function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;add_prefix&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;prefix_&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><hr><p>SQLite 不支持传统存储过程，建议结合触发器与应用层逻辑实现复杂业务。</p>`,13)]))}const o=i(e,[["render",t]]);export{c as __pageData,o as default};
