import{_ as a,c as i,o as l,ag as e}from"./chunks/framework.DPDPlp3K.js";const c=JSON.parse('{"title":"Spring MVC 详解","description":"","frontmatter":{"title":"Spring MVC 详解"},"headers":[],"relativePath":"spring/spring-mvc.md","filePath":"spring/spring-mvc.md","lastUpdated":1747111449000}'),n={name:"spring/spring-mvc.md"};function t(r,s,p,h,k,d){return l(),i("div",null,s[0]||(s[0]=[e(`<h1 id="spring-mvc-详解" tabindex="-1">Spring MVC 详解 <a class="header-anchor" href="#spring-mvc-详解" aria-label="Permalink to &quot;Spring MVC 详解&quot;">​</a></h1><p>Spring MVC 是 Spring Framework 的 Web 层核心模块，广泛应用于企业级 Web、RESTful API、微服务等场景。</p><h2 id="_1-框架简介" tabindex="-1">1. 框架简介 <a class="header-anchor" href="#_1-框架简介" aria-label="Permalink to &quot;1. 框架简介&quot;">​</a></h2><ul><li>基于 Servlet 规范，提供强大的 Web MVC 能力</li><li>支持 RESTful、模板渲染、文件上传、拦截器、数据校验等</li><li>SpringBoot 默认集成 Spring MVC</li></ul><h3 id="_1-1-spring-mvc-全链路请求时序图" tabindex="-1">1.1 Spring MVC 全链路请求时序图 <a class="header-anchor" href="#_1-1-spring-mvc-全链路请求时序图" aria-label="Permalink to &quot;1.1 Spring MVC 全链路请求时序图&quot;">​</a></h3><div class="language-mermaid vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sequenceDiagram</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    participant Client</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    participant DispatcherServlet</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    participant HandlerMapping</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    participant HandlerAdapter</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    participant Controller</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    participant Service</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    participant Dao</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    participant ViewResolver</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Client-&gt;&gt;DispatcherServlet: HTTP请求</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    DispatcherServlet-&gt;&gt;HandlerMapping: 查找Handler</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    HandlerMapping--&gt;&gt;DispatcherServlet: Handler</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    DispatcherServlet-&gt;&gt;HandlerAdapter: 适配Handler</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    HandlerAdapter-&gt;&gt;Controller: 调用方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Controller-&gt;&gt;Service: 业务处理</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Service-&gt;&gt;Dao: 数据库操作</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Dao--&gt;&gt;Service: 结果</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Service--&gt;&gt;Controller: 结果</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Controller--&gt;&gt;HandlerAdapter: ModelAndView/ResponseBody</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    HandlerAdapter--&gt;&gt;DispatcherServlet: 结果</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    DispatcherServlet-&gt;&gt;ViewResolver: 渲染视图</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ViewResolver--&gt;&gt;DispatcherServlet: 视图</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    DispatcherServlet--&gt;&gt;Client: 响应</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h3 id="_1-2-工程结构与ci-cd" tabindex="-1">1.2 工程结构与CI/CD <a class="header-anchor" href="#_1-2-工程结构与ci-cd" aria-label="Permalink to &quot;1.2 工程结构与CI/CD&quot;">​</a></h3><ul><li>推荐分层结构：controller、service、dao、model、config、exception、interceptor、util</li><li>关键配置：application.yml、logback.xml、Dockerfile、Jenkinsfile、k8s-deployment.yaml</li></ul><h2 id="_2-核心原理与架构" tabindex="-1">2. 核心原理与架构 <a class="header-anchor" href="#_2-核心原理与架构" aria-label="Permalink to &quot;2. 核心原理与架构&quot;">​</a></h2><h3 id="_2-1-dispatcherservlet" tabindex="-1">2.1 DispatcherServlet <a class="header-anchor" href="#_2-1-dispatcherservlet" aria-label="Permalink to &quot;2.1 DispatcherServlet&quot;">​</a></h3><ul><li>前端控制器，所有请求统一入口</li><li>负责请求分发、参数绑定、异常处理、视图渲染</li></ul><h3 id="_2-2-主要组件" tabindex="-1">2.2 主要组件 <a class="header-anchor" href="#_2-2-主要组件" aria-label="Permalink to &quot;2.2 主要组件&quot;">​</a></h3><ul><li>HandlerMapping：请求与处理器映射</li><li>HandlerAdapter：适配不同类型的处理器</li><li>ViewResolver：视图解析（JSP、Thymeleaf、Freemarker）</li><li>LocaleResolver：国际化</li><li>MultipartResolver：文件上传</li><li>ExceptionResolver：异常处理</li></ul><h3 id="_2-3-请求处理流程" tabindex="-1">2.3 请求处理流程 <a class="header-anchor" href="#_2-3-请求处理流程" aria-label="Permalink to &quot;2.3 请求处理流程&quot;">​</a></h3><ol><li>客户端请求 -&gt; DispatcherServlet</li><li>HandlerMapping 匹配 Controller</li><li>HandlerAdapter 调用 Controller 方法</li><li>参数绑定、数据校验</li><li>返回 ModelAndView 或 ResponseBody</li><li>ViewResolver 渲染视图或返回 JSON</li><li>响应客户端</li></ol><h3 id="_2-4-dispatcherservlet-源码调用链" tabindex="-1">2.4 DispatcherServlet 源码调用链 <a class="header-anchor" href="#_2-4-dispatcherservlet-源码调用链" aria-label="Permalink to &quot;2.4 DispatcherServlet 源码调用链&quot;">​</a></h3><ul><li>doDispatch -&gt; getHandler -&gt; getHandlerAdapter -&gt; HandlerAdapter.handle -&gt; applyPreHandle -&gt; invokeHandlerMethod -&gt; processDispatchResult</li></ul><h3 id="_2-5-主要组件类图" tabindex="-1">2.5 主要组件类图 <a class="header-anchor" href="#_2-5-主要组件类图" aria-label="Permalink to &quot;2.5 主要组件类图&quot;">​</a></h3><div class="language-mermaid vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">classDiagram</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    class DispatcherServlet</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    class HandlerMapping</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    class HandlerAdapter</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    class ViewResolver</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    class LocaleResolver</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    class MultipartResolver</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    class ExceptionResolver</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    DispatcherServlet --&gt; HandlerMapping</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    DispatcherServlet --&gt; HandlerAdapter</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    DispatcherServlet --&gt; ViewResolver</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    DispatcherServlet --&gt; ExceptionResolver</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="_3-常用注解与用法" tabindex="-1">3. 常用注解与用法 <a class="header-anchor" href="#_3-常用注解与用法" aria-label="Permalink to &quot;3. 常用注解与用法&quot;">​</a></h2><ul><li><code>@Controller</code>：标记控制器类</li><li><code>@RestController</code>：返回 JSON，等价于 @Controller + @ResponseBody</li><li><code>@RequestMapping</code>：类/方法级路由</li><li><code>@GetMapping</code>/<code>@PostMapping</code>/<code>@PutMapping</code>/<code>@DeleteMapping</code>：HTTP 方法映射</li><li><code>@RequestParam</code>：请求参数绑定</li><li><code>@PathVariable</code>：路径参数绑定</li><li><code>@RequestBody</code>：请求体 JSON 绑定</li><li><code>@ResponseBody</code>：返回 JSON</li><li><code>@ModelAttribute</code>：表单对象绑定</li><li><code>@RequestHeader</code>、<code>@CookieValue</code>：请求头/Cookie</li></ul><h3 id="_3-1-注解源码与反射原理" tabindex="-1">3.1 注解源码与反射原理 <a class="header-anchor" href="#_3-1-注解源码与反射原理" aria-label="Permalink to &quot;3.1 注解源码与反射原理&quot;">​</a></h3><ul><li>RequestMappingHandlerMapping 通过反射扫描@Controller/@RequestMapping注解，注册路由</li><li>HandlerMethod 反射调用Controller方法</li></ul><h3 id="_3-2-注解驱动开发最佳实践" tabindex="-1">3.2 注解驱动开发最佳实践 <a class="header-anchor" href="#_3-2-注解驱动开发最佳实践" aria-label="Permalink to &quot;3.2 注解驱动开发最佳实践&quot;">​</a></h3><ul><li>路由统一前缀、分组</li><li>参数校验注解分组</li><li>统一返回结构注解</li></ul><h3 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h3><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RestController</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RequestMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/api&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GetMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/user/{id}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> User </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">PathVariable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Long </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { ... }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">PostMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> User </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RequestBody</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> User </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { ... }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="_4-参数绑定与数据校验" tabindex="-1">4. 参数绑定与数据校验 <a class="header-anchor" href="#_4-参数绑定与数据校验" aria-label="Permalink to &quot;4. 参数绑定与数据校验&quot;">​</a></h2><ul><li>支持基本类型、对象、集合、数组、Map</li><li>支持 JSR-303/JSR-380 注解校验（@Valid、@Validated）</li><li>支持自定义参数解析器（HandlerMethodArgumentResolver）</li></ul><h3 id="_4-1-参数绑定源码流程" tabindex="-1">4.1 参数绑定源码流程 <a class="header-anchor" href="#_4-1-参数绑定源码流程" aria-label="Permalink to &quot;4.1 参数绑定源码流程&quot;">​</a></h3><ul><li>HandlerMethodArgumentResolverComposite -&gt; resolveArgument -&gt; 反射赋值</li></ul><h3 id="_4-2-数据校验自动化测试" tabindex="-1">4.2 数据校验自动化测试 <a class="header-anchor" href="#_4-2-数据校验自动化测试" aria-label="Permalink to &quot;4.2 数据校验自动化测试&quot;">​</a></h3><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SpringBootTest</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AutoConfigureMockMvc</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserControllerTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Autowired</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MockMvc mockMvc;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> testCreateUser_invalid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        mockMvc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">perform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/api/user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">contentType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MediaType.APPLICATION_JSON))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">andExpect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isBadRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="_5-拦截器与过滤器" tabindex="-1">5. 拦截器与过滤器 <a class="header-anchor" href="#_5-拦截器与过滤器" aria-label="Permalink to &quot;5. 拦截器与过滤器&quot;">​</a></h2><ul><li>HandlerInterceptor：登录校验、权限、日志、限流</li><li>WebMvcConfigurer 注册拦截器</li><li>Filter：全局请求预处理、XSS 防护</li></ul><h3 id="_5-1-handlerinterceptor-源码调用链" tabindex="-1">5.1 HandlerInterceptor 源码调用链 <a class="header-anchor" href="#_5-1-handlerinterceptor-源码调用链" aria-label="Permalink to &quot;5.1 HandlerInterceptor 源码调用链&quot;">​</a></h3><ul><li>DispatcherServlet -&gt; applyPreHandle -&gt; HandlerInterceptor.preHandle</li><li>HandlerInterceptor.postHandle/afterCompletion</li></ul><h3 id="_5-2-限流-日志-安全拦截实战" tabindex="-1">5.2 限流/日志/安全拦截实战 <a class="header-anchor" href="#_5-2-限流-日志-安全拦截实战" aria-label="Permalink to &quot;5.2 限流/日志/安全拦截实战&quot;">​</a></h3><ul><li>限流：基于IP/用户/接口计数，Redis+Lua实现</li><li>日志：AOP+拦截器埋点</li><li>安全：JWT鉴权、XSS防护</li></ul><h3 id="_5-3-拦截器自动化测试" tabindex="-1">5.3 拦截器自动化测试 <a class="header-anchor" href="#_5-3-拦截器自动化测试" aria-label="Permalink to &quot;5.3 拦截器自动化测试&quot;">​</a></h3><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> testAuthInterceptor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() throws Exception {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    mockMvc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">perform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/api/secure&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">andExpect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isUnauthorized</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="_6-全局异常处理" tabindex="-1">6. 全局异常处理 <a class="header-anchor" href="#_6-全局异常处理" aria-label="Permalink to &quot;6. 全局异常处理&quot;">​</a></h2><ul><li>@ControllerAdvice + @ExceptionHandler 捕获全局异常</li><li>支持自定义异常、参数校验异常、404/405/500 等</li></ul><h3 id="_6-1-exceptionresolver-源码调用链" tabindex="-1">6.1 ExceptionResolver 源码调用链 <a class="header-anchor" href="#_6-1-exceptionresolver-源码调用链" aria-label="Permalink to &quot;6.1 ExceptionResolver 源码调用链&quot;">​</a></h3><ul><li>DispatcherServlet -&gt; processHandlerException -&gt; ExceptionHandlerExceptionResolver</li></ul><h3 id="_6-2-全局异常处理最佳实践" tabindex="-1">6.2 全局异常处理最佳实践/ <a class="header-anchor" href="#_6-2-全局异常处理最佳实践" aria-label="Permalink to &quot;6.2 全局异常处理最佳实践/&quot;">​</a></h3><ul><li>统一返回结构、错误码、日志脱敏、异常告警</li></ul><h3 id="_6-3-异常处理自动化测试" tabindex="-1">6.3 异常处理自动化测试 <a class="header-anchor" href="#_6-3-异常处理自动化测试" aria-label="Permalink to &quot;6.3 异常处理自动化测试&quot;">​</a></h3><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@Test</span></span>
<span class="line"><span>public void testGlobalException() throws Exception {</span></span>
<span class="line"><span>    mockMvc.perform(get(&quot;/api/error&quot;)).andExpect(status().isInternalServerError());</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="_7-文件上传与下载" tabindex="-1">7. 文件上传与下载 <a class="header-anchor" href="#_7-文件上传与下载" aria-label="Permalink to &quot;7. 文件上传与下载&quot;">​</a></h2><ul><li>MultipartFile 支持单/多文件上传</li><li>配置最大文件大小、存储路径</li></ul><h3 id="_7-1-multipartresolver-源码流程" tabindex="-1">7.1 MultipartResolver 源码流程 <a class="header-anchor" href="#_7-1-multipartresolver-源码流程" aria-label="Permalink to &quot;7.1 MultipartResolver 源码流程&quot;">​</a></h3><ul><li>DispatcherServlet -&gt; checkMultipart -&gt; MultipartResolver.resolveMultipart</li></ul><h3 id="_7-2-文件上传安全与自动化测试" tabindex="-1">7.2 文件上传安全与自动化测试 <a class="header-anchor" href="#_7-2-文件上传安全与自动化测试" aria-label="Permalink to &quot;7.2 文件上传安全与自动化测试&quot;">​</a></h3><ul><li>校验文件类型、大小、存储路径</li><li>自动化测试：MockMultipartFile</li></ul><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> testUpload</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() throws Exception {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    MockMultipartFile file </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MockMultipartFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;file&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;test.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text/plain&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getBytes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    mockMvc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">perform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">multipart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/upload&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(file)).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">andExpect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isOk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="_8-与-springboot-的集成" tabindex="-1">8. 与 SpringBoot 的集成 <a class="header-anchor" href="#_8-与-springboot-的集成" aria-label="Permalink to &quot;8. 与 SpringBoot 的集成&quot;">​</a></h2><ul><li>SpringBoot 自动装配 Spring MVC，无需手动配置</li><li>application.yml 配置端口、静态资源、CORS、文件上传等</li><li>推荐注解驱动开发，极少用 XML</li></ul><h3 id="_8-1-自动装配源码分析" tabindex="-1">8.1 自动装配源码分析 <a class="header-anchor" href="#_8-1-自动装配源码分析" aria-label="Permalink to &quot;8.1 自动装配源码分析&quot;">​</a></h3><ul><li>WebMvcAutoConfiguration -&gt; DispatcherServletAutoConfiguration</li><li>@ConditionalOnClass、@ConditionalOnMissingBean</li></ul><h3 id="_8-2-k8s部署与自动化运维" tabindex="-1">8.2 K8s部署与自动化运维 <a class="header-anchor" href="#_8-2-k8s部署与自动化运维" aria-label="Permalink to &quot;8.2 K8s部署与自动化运维&quot;">​</a></h3><ul><li>Dockerfile、k8s-deployment.yaml、健康检查、弹性伸缩</li></ul><h2 id="_9-源码剖析-进阶" tabindex="-1">9. 源码剖析（进阶） <a class="header-anchor" href="#_9-源码剖析-进阶" aria-label="Permalink to &quot;9. 源码剖析（进阶）&quot;">​</a></h2><h3 id="_9-1-dispatcherservlet-源码流程图" tabindex="-1">9.1 DispatcherServlet 源码流程图 <a class="header-anchor" href="#_9-1-dispatcherservlet-源码流程图" aria-label="Permalink to &quot;9.1 DispatcherServlet 源码流程图&quot;">​</a></h3><div class="language-mermaid vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">flowchart TD</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    A[doDispatch] --&gt; B[getHandler]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B --&gt; C[getHandlerAdapter]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    C --&gt; D[applyPreHandle]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    D --&gt; E[invokeHandlerMethod]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    E --&gt; F[processDispatchResult]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_9-2-handlermapping-handleradapter-exceptionresolver-关键源码" tabindex="-1">9.2 HandlerMapping/HandlerAdapter/ExceptionResolver 关键源码 <a class="header-anchor" href="#_9-2-handlermapping-handleradapter-exceptionresolver-关键源码" aria-label="Permalink to &quot;9.2 HandlerMapping/HandlerAdapter/ExceptionResolver 关键源码&quot;">​</a></h3><ul><li>RequestMappingHandlerMapping#getHandlerInternal</li><li>RequestMappingHandlerAdapter#handleInternal</li><li>ExceptionHandlerExceptionResolver#doResolveException</li></ul><h2 id="_10-最佳实践" tabindex="-1">10. 最佳实践 <a class="header-anchor" href="#_10-最佳实践" aria-label="Permalink to &quot;10. 最佳实践&quot;">​</a></h2><ul><li>路由统一加前缀，便于管理</li><li>Controller 只做参数校验和分发，业务逻辑下沉到 Service</li><li>统一异常处理，返回结构标准化</li><li>参数校验与分组，提升健壮性</li><li>静态资源与接口分离，前后端协作</li><li>善用拦截器实现安全、日志、限流</li></ul><h3 id="_10-1-性能调优与容量规划" tabindex="-1">10.1 性能调优与容量规划 <a class="header-anchor" href="#_10-1-性能调优与容量规划" aria-label="Permalink to &quot;10.1 性能调优与容量规划&quot;">​</a></h3><ul><li>线程池参数、连接池、缓存、限流、异步处理</li><li>静态资源CDN、接口分流、分布式部署</li></ul><h3 id="_10-2-生产安全与攻防演练" tabindex="-1">10.2 生产安全与攻防演练 <a class="header-anchor" href="#_10-2-生产安全与攻防演练" aria-label="Permalink to &quot;10.2 生产安全与攻防演练&quot;">​</a></h3><ul><li>XSS/CSRF/SQL注入自动化检测脚本</li><li>日志脱敏、接口签名、敏感操作二次确认</li></ul><h2 id="_11-常见问题与faq、面试高频题、最佳实践" tabindex="-1">11. 常见问题与FAQ、面试高频题、最佳实践 <a class="header-anchor" href="#_11-常见问题与faq、面试高频题、最佳实践" aria-label="Permalink to &quot;11. 常见问题与FAQ、面试高频题、最佳实践&quot;">​</a></h2><h3 id="_11-1-faq" tabindex="-1">11.1 FAQ <a class="header-anchor" href="#_11-1-faq" aria-label="Permalink to &quot;11.1 FAQ&quot;">​</a></h3><ul><li>@RestController和@Controller区别？</li><li>如何自定义参数解析器？</li><li>如何处理全局异常？</li><li>SpringBoot能否自定义DispatcherServlet？</li><li>如何实现接口幂等？</li><li>如何优雅处理大文件上传？</li><li>如何实现接口灰度发布？</li></ul><h3 id="_11-2-高频面试题与标准答案" tabindex="-1">11.2 高频面试题与标准答案 <a class="header-anchor" href="#_11-2-高频面试题与标准答案" aria-label="Permalink to &quot;11.2 高频面试题与标准答案&quot;">​</a></h3><ul><li>Q: Spring MVC请求流程？ A: DispatcherServlet统一入口，HandlerMapping查找，HandlerAdapter适配，Controller执行业务，ViewResolver渲染，响应客户端。</li><li>Q: HandlerInterceptor和Filter区别？ A: Filter基于Servlet规范，拦截所有请求，HandlerInterceptor基于Spring MVC，只拦截Controller映射。</li><li>Q: 如何实现全局异常处理？ A: @ControllerAdvice+@ExceptionHandler统一捕获，ExceptionResolver处理。</li><li>Q: 参数校验如何实现？ A: @Valid/@Validated注解+JSR-303/JSR-380，支持分组和自定义校验器。</li></ul><h3 id="_11-3-最佳实践" tabindex="-1">11.3 最佳实践 <a class="header-anchor" href="#_11-3-最佳实践" aria-label="Permalink to &quot;11.3 最佳实践&quot;">​</a></h3><ul><li>Controller只做分发和校验，业务下沉Service</li><li>统一返回结构和错误码</li><li>拦截器/异常处理/参数校验全链路自动化测试</li><li>生产环境安全基线检测与日志合规</li></ul><h1 id="真实案例与架构演进" tabindex="-1">真实案例与架构演进 <a class="header-anchor" href="#真实案例与架构演进" aria-label="Permalink to &quot;真实案例与架构演进&quot;">​</a></h1><ul><li>某大型互联网公司Spring MVC+SpringBoot落地架构演进、踩坑与优化经验</li><li>多模块/多团队协作、接口规范、Mock联调、自动化测试体系</li><li>典型QPS、RT、并发数、文件上传等容量规划建议</li><li>生产环境常见故障与应急预案模板</li></ul><hr><blockquote><p>Spring MVC 是企业级 Web 和 REST API 的核心，建议深入理解请求流程、注解用法、参数校验与异常处理，提升项目健壮性与可维护性。</p></blockquote>`,84)]))}const E=a(n,[["render",t]]);export{c as __pageData,E as default};
