import{_ as s,c as a,o as e,ag as l}from"./chunks/framework.DPDPlp3K.js";const u=JSON.parse('{"title":"状态管理","description":"","frontmatter":{"title":"状态管理"},"headers":[],"relativePath":"flutter/state-management.md","filePath":"flutter/state-management.md","lastUpdated":1747310844000}'),t={name:"flutter/state-management.md"};function n(r,i,h,p,d,k){return e(),a("div",null,i[0]||(i[0]=[l(`<p>/**</p><ul><li>Flutter状态管理</li><li>@description 介绍Flutter常用的状态管理方式及其适用场景。 */</li></ul><h1 id="状态管理" tabindex="-1">状态管理 <a class="header-anchor" href="#状态管理" aria-label="Permalink to &quot;状态管理&quot;">​</a></h1><h2 id="setstate原理与用法" tabindex="-1">setState原理与用法 <a class="header-anchor" href="#setstate原理与用法" aria-label="Permalink to &quot;setState原理与用法&quot;">​</a></h2><ul><li>适用于局部状态更新，简单高效。</li></ul><div class="language-dart vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>仅影响当前 Widget 及其子树。</li></ul><h2 id="inheritedwidget-inheritedmodel" tabindex="-1">InheritedWidget/InheritedModel <a class="header-anchor" href="#inheritedwidget-inheritedmodel" aria-label="Permalink to &quot;InheritedWidget/InheritedModel&quot;">​</a></h2><ul><li>用于全局状态传递，适合小型全局数据。</li><li>需手动实现依赖关系和通知机制。</li></ul><h2 id="provider详解" tabindex="-1">Provider详解 <a class="header-anchor" href="#provider详解" aria-label="Permalink to &quot;Provider详解&quot;">​</a></h2><ul><li>社区主流方案，基于 InheritedWidget 封装，简单易用。</li></ul><div class="language-dart vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ChangeNotifierProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  create</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (_) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CounterModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  child</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Consumer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CounterModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    builder</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (context, model, child) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">model</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">count</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li>支持依赖注入、响应式更新。</li></ul><h2 id="riverpod用法" tabindex="-1">Riverpod用法 <a class="header-anchor" href="#riverpod用法" aria-label="Permalink to &quot;Riverpod用法&quot;">​</a></h2><ul><li>Provider 的升级版，支持无Context、类型安全、全局管理。</li><li>支持 StateProvider、FutureProvider、StreamProvider 等。</li></ul><h2 id="bloc-cubit模式" tabindex="-1">Bloc/Cubit模式 <a class="header-anchor" href="#bloc-cubit模式" aria-label="Permalink to &quot;Bloc/Cubit模式&quot;">​</a></h2><ul><li>适合大型项目，响应式编程思想。</li><li>Bloc 通过事件驱动状态流转，解耦 UI 与业务。</li></ul><h2 id="getx、mobx等第三方方案" tabindex="-1">GetX、MobX等第三方方案 <a class="header-anchor" href="#getx、mobx等第三方方案" aria-label="Permalink to &quot;GetX、MobX等第三方方案&quot;">​</a></h2><ul><li>GetX：极简、性能高、API丰富。</li><li>MobX：响应式、自动依赖追踪。</li></ul><h2 id="状态管理选型建议" tabindex="-1">状态管理选型建议 <a class="header-anchor" href="#状态管理选型建议" aria-label="Permalink to &quot;状态管理选型建议&quot;">​</a></h2><ul><li>小型项目可用 setState/Provider</li><li>大型项目推荐 Bloc/Riverpod</li><li>需考虑团队熟悉度与社区活跃度</li></ul><h2 id="状态管理实战案例" tabindex="-1">状态管理实战案例 <a class="header-anchor" href="#状态管理实战案例" aria-label="Permalink to &quot;状态管理实战案例&quot;">​</a></h2><ul><li>计数器、TodoList、登录状态等</li></ul>`,23)]))}const c=s(t,[["render",n]]);export{u as __pageData,c as default};
