import{_ as s,c as i,o as n,ag as l}from"./chunks/framework.DPDPlp3K.js";const o=JSON.parse('{"title":"Spring Integration 详解","description":"","frontmatter":{"title":"Spring Integration 详解"},"headers":[],"relativePath":"spring/spring-integration.md","filePath":"spring/spring-integration.md","lastUpdated":1747111449000}'),e={name:"spring/spring-integration.md"};function t(h,a,r,p,k,d){return n(),i("div",null,a[0]||(a[0]=[l(`<h1 id="spring-integration-详解" tabindex="-1">Spring Integration 详解 <a class="header-anchor" href="#spring-integration-详解" aria-label="Permalink to &quot;Spring Integration 详解&quot;">​</a></h1><hr><h2 id="_1-企业集成模式与spring-integration生态全景" tabindex="-1">1. 企业集成模式与Spring Integration生态全景 <a class="header-anchor" href="#_1-企业集成模式与spring-integration生态全景" aria-label="Permalink to &quot;1. 企业集成模式与Spring Integration生态全景&quot;">​</a></h2><h3 id="_1-1-企业集成模式-eip-简介" tabindex="-1">1.1 企业集成模式（EIP）简介 <a class="header-anchor" href="#_1-1-企业集成模式-eip-简介" aria-label="Permalink to &quot;1.1 企业集成模式（EIP）简介&quot;">​</a></h3><ul><li>消息驱动、解耦、异步、可扩展</li><li>23种EIP模式：通道、过滤器、转换器、路由器、聚合器、分割器等</li></ul><h3 id="_1-2-spring-integration-生态组件" tabindex="-1">1.2 Spring Integration 生态组件 <a class="header-anchor" href="#_1-2-spring-integration-生态组件" aria-label="Permalink to &quot;1.2 Spring Integration 生态组件&quot;">​</a></h3><ul><li>Message、MessageChannel、MessageHandler、MessageSource、Endpoint</li><li>通道类型：Direct、Queue、PublishSubscribe、Priority、Executor</li><li>适配器：File、JMS、Kafka、RabbitMQ、HTTP、FTP等</li><li>EIP组件：Filter、Transformer、Splitter、Aggregator、Router</li><li>流程编排：IntegrationFlow、DSL</li><li>监控：IntegrationMBeanExporter、Actuator</li></ul><h3 id="_1-3-架构图" tabindex="-1">1.3 架构图 <a class="header-anchor" href="#_1-3-架构图" aria-label="Permalink to &quot;1.3 架构图&quot;">​</a></h3><div class="language-mermaid vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">graph TD</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    A[MessageSource] --&gt; B[MessageChannel]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B --&gt; C[MessageHandler]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    C --&gt; D[Adapter]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B --&gt; E[Filter/Transformer/Splitter/Aggregator/Router]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    E --&gt; F[MessageChannel]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><hr><h2 id="_2-消息通道、消息、handler、source极致细化" tabindex="-1">2. 消息通道、消息、Handler、Source极致细化 <a class="header-anchor" href="#_2-消息通道、消息、handler、source极致细化" aria-label="Permalink to &quot;2. 消息通道、消息、Handler、Source极致细化&quot;">​</a></h2><h3 id="_2-1-核心原理" tabindex="-1">2.1 核心原理 <a class="header-anchor" href="#_2-1-核心原理" aria-label="Permalink to &quot;2.1 核心原理&quot;">​</a></h3><ul><li>Message：数据+Header</li><li>MessageChannel：通道，解耦生产者/消费者</li><li>MessageHandler：处理消息，支持同步/异步</li><li>MessageSource：消息来源，定时/事件/外部系统</li></ul><h3 id="_2-2-源码与时序图" tabindex="-1">2.2 源码与时序图 <a class="header-anchor" href="#_2-2-源码与时序图" aria-label="Permalink to &quot;2.2 源码与时序图&quot;">​</a></h3><div class="language-mermaid vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sequenceDiagram</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    participant Source</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    participant Channel</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    participant Handler</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Source-&gt;&gt;Channel: send(Message)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Channel-&gt;&gt;Handler: dispatch(Message)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Handler--&gt;&gt;Channel: 处理结果</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li>核心源码：GenericMessage、DirectChannel、QueueChannel、AbstractMessageHandler、PollingConsumer</li></ul><h3 id="_2-3-配置与实战" tabindex="-1">2.3 配置与实战 <a class="header-anchor" href="#_2-3-配置与实战" aria-label="Permalink to &quot;2.3 配置与实战&quot;">​</a></h3><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MessageChannel </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">inputChannel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DirectChannel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IntegrationFlow </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">flow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IntegrationFlows.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">inputChannel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">handle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(msg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(msg.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getPayload</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><hr><h2 id="_3-通道类型极致细化" tabindex="-1">3. 通道类型极致细化 <a class="header-anchor" href="#_3-通道类型极致细化" aria-label="Permalink to &quot;3. 通道类型极致细化&quot;">​</a></h2><h3 id="_3-1-directchannel" tabindex="-1">3.1 DirectChannel <a class="header-anchor" href="#_3-1-directchannel" aria-label="Permalink to &quot;3.1 DirectChannel&quot;">​</a></h3><ul><li>点对点、同步、低延迟</li><li>适合高性能场景</li></ul><h3 id="_3-2-queuechannel" tabindex="-1">3.2 QueueChannel <a class="header-anchor" href="#_3-2-queuechannel" aria-label="Permalink to &quot;3.2 QueueChannel&quot;">​</a></h3><ul><li>点对点、异步、队列缓存</li><li>支持容量、阻塞、超时</li></ul><h3 id="_3-3-publishsubscribechannel" tabindex="-1">3.3 PublishSubscribeChannel <a class="header-anchor" href="#_3-3-publishsubscribechannel" aria-label="Permalink to &quot;3.3 PublishSubscribeChannel&quot;">​</a></h3><ul><li>广播、异步、支持多个订阅者</li></ul><h3 id="_3-4-prioritychannel" tabindex="-1">3.4 PriorityChannel <a class="header-anchor" href="#_3-4-prioritychannel" aria-label="Permalink to &quot;3.4 PriorityChannel&quot;">​</a></h3><ul><li>按优先级出队，适合任务调度</li></ul><h3 id="_3-5-executorchannel" tabindex="-1">3.5 ExecutorChannel <a class="header-anchor" href="#_3-5-executorchannel" aria-label="Permalink to &quot;3.5 ExecutorChannel&quot;">​</a></h3><ul><li>基于线程池，异步高并发</li></ul><h3 id="_3-6-通道类型源码与实战" tabindex="-1">3.6 通道类型源码与实战 <a class="header-anchor" href="#_3-6-通道类型源码与实战" aria-label="Permalink to &quot;3.6 通道类型源码与实战&quot;">​</a></h3><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> QueueChannel </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">queueChannel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> QueueChannel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ExecutorChannel </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">executorChannel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TaskExecutor executor) { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ExecutorChannel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(executor); }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><hr><h2 id="_4-适配器极致细化" tabindex="-1">4. 适配器极致细化 <a class="header-anchor" href="#_4-适配器极致细化" aria-label="Permalink to &quot;4. 适配器极致细化&quot;">​</a></h2><h3 id="_4-1-file-jms-kafka-rabbitmq-http-ftp适配器原理" tabindex="-1">4.1 File/JMS/Kafka/RabbitMQ/HTTP/FTP适配器原理 <a class="header-anchor" href="#_4-1-file-jms-kafka-rabbitmq-http-ftp适配器原理" aria-label="Permalink to &quot;4.1 File/JMS/Kafka/RabbitMQ/HTTP/FTP适配器原理&quot;">​</a></h3><ul><li>File：文件轮询/写入</li><li>JMS：与ActiveMQ/Artemis集成</li><li>Kafka：高吞吐、分区、幂等</li><li>RabbitMQ：AMQP协议、路由、确认</li><li>HTTP：REST、WebService、Webhook</li><li>FTP/SFTP：文件同步</li></ul><h3 id="_4-2-适配器源码与配置" tabindex="-1">4.2 适配器源码与配置 <a class="header-anchor" href="#_4-2-适配器源码与配置" aria-label="Permalink to &quot;4.2 适配器源码与配置&quot;">​</a></h3><ul><li>FileReadingMessageSource、JmsMessageDrivenEndpoint、KafkaMessageDrivenChannelAdapter、AmqpInboundChannelAdapter、Http.inboundGateway</li></ul><h3 id="_4-3-适配器实战" tabindex="-1">4.3 适配器实战 <a class="header-anchor" href="#_4-3-适配器实战" aria-label="Permalink to &quot;4.3 适配器实战&quot;">​</a></h3><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IntegrationFlow </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fileFlow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IntegrationFlows.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Files.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">inboundAdapter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> File</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/tmp/in&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">handle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(msg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(msg.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getPayload</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IntegrationFlow </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kafkaFlow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IntegrationFlows.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Kafka.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">messageDrivenChannelAdapter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(consumerFactory, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;topic&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">handle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(msg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> process</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(msg.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getPayload</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><hr><h2 id="_5-eip组件极致细化" tabindex="-1">5. EIP组件极致细化 <a class="header-anchor" href="#_5-eip组件极致细化" aria-label="Permalink to &quot;5. EIP组件极致细化&quot;">​</a></h2><h3 id="_5-1-过滤器-filter" tabindex="-1">5.1 过滤器（Filter） <a class="header-anchor" href="#_5-1-过滤器-filter" aria-label="Permalink to &quot;5.1 过滤器（Filter）&quot;">​</a></h3><ul><li>条件过滤消息，支持表达式、Java实现</li></ul><h3 id="_5-2-转换器-transformer" tabindex="-1">5.2 转换器（Transformer） <a class="header-anchor" href="#_5-2-转换器-transformer" aria-label="Permalink to &quot;5.2 转换器（Transformer）&quot;">​</a></h3><ul><li>消息格式转换、类型转换、加解密</li></ul><h3 id="_5-3-分割器-splitter" tabindex="-1">5.3 分割器（Splitter） <a class="header-anchor" href="#_5-3-分割器-splitter" aria-label="Permalink to &quot;5.3 分割器（Splitter）&quot;">​</a></h3><ul><li>拆分集合/大消息为多个子消息</li></ul><h3 id="_5-4-聚合器-aggregator" tabindex="-1">5.4 聚合器（Aggregator） <a class="header-anchor" href="#_5-4-聚合器-aggregator" aria-label="Permalink to &quot;5.4 聚合器（Aggregator）&quot;">​</a></h3><ul><li>多消息聚合为一个，支持超时、分组、策略</li></ul><h3 id="_5-5-路由器-router" tabindex="-1">5.5 路由器（Router） <a class="header-anchor" href="#_5-5-路由器-router" aria-label="Permalink to &quot;5.5 路由器（Router）&quot;">​</a></h3><ul><li>动态路由，支持表达式、Header、内容</li></ul><h3 id="_5-6-eip组件源码与实战" tabindex="-1">5.6 EIP组件源码与实战 <a class="header-anchor" href="#_5-6-eip组件源码与实战" aria-label="Permalink to &quot;5.6 EIP组件源码与实战&quot;">​</a></h3><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IntegrationFlow </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filterFlow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IntegrationFlows.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">inputChannel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((String p) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startsWith</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;A&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">handle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(System.out</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">println)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IntegrationFlow </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">splitterAggregatorFlow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IntegrationFlows.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">inputChannel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">split</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">channel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">queueChannel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">aggregate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">handle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(System.out</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">println)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><hr><h2 id="_6-流程编排、dsl、测试、监控极致细化" tabindex="-1">6. 流程编排、DSL、测试、监控极致细化 <a class="header-anchor" href="#_6-流程编排、dsl、测试、监控极致细化" aria-label="Permalink to &quot;6. 流程编排、DSL、测试、监控极致细化&quot;">​</a></h2><h3 id="_6-1-integrationflow与dsl" tabindex="-1">6.1 IntegrationFlow与DSL <a class="header-anchor" href="#_6-1-integrationflow与dsl" aria-label="Permalink to &quot;6.1 IntegrationFlow与DSL&quot;">​</a></h3><ul><li>Java DSL流式编排，支持条件、分支、循环、子流程</li></ul><h3 id="_6-2-集成测试" tabindex="-1">6.2 集成测试 <a class="header-anchor" href="#_6-2-集成测试" aria-label="Permalink to &quot;6.2 集成测试&quot;">​</a></h3><ul><li>@SpringIntegrationTest、MessageCollector、TestChannelBinder</li></ul><h3 id="_6-3-监控与健康检查" tabindex="-1">6.3 监控与健康检查 <a class="header-anchor" href="#_6-3-监控与健康检查" aria-label="Permalink to &quot;6.3 监控与健康检查&quot;">​</a></h3><ul><li>IntegrationMBeanExporter、Actuator、Prometheus、告警脚本</li></ul><hr><h2 id="_7-事务、幂等、错误处理极致细化" tabindex="-1">7. 事务、幂等、错误处理极致细化 <a class="header-anchor" href="#_7-事务、幂等、错误处理极致细化" aria-label="Permalink to &quot;7. 事务、幂等、错误处理极致细化&quot;">​</a></h2><h3 id="_7-1-事务管理" tabindex="-1">7.1 事务管理 <a class="header-anchor" href="#_7-1-事务管理" aria-label="Permalink to &quot;7.1 事务管理&quot;">​</a></h3><ul><li>支持本地事务、JTA、分布式事务</li><li>事务边界：通道、Handler、Adapter</li></ul><h3 id="_7-2-幂等性设计" tabindex="-1">7.2 幂等性设计 <a class="header-anchor" href="#_7-2-幂等性设计" aria-label="Permalink to &quot;7.2 幂等性设计&quot;">​</a></h3><ul><li>唯一ID、去重表、状态机、分布式锁</li></ul><h3 id="_7-3-错误处理与重试" tabindex="-1">7.3 错误处理与重试 <a class="header-anchor" href="#_7-3-错误处理与重试" aria-label="Permalink to &quot;7.3 错误处理与重试&quot;">​</a></h3><ul><li>ErrorChannel、RetryTemplate、异常路由、死信队列</li></ul><hr><h2 id="_8-与spring-boot集成、自动装配、监控极致细化" tabindex="-1">8. 与Spring Boot集成、自动装配、监控极致细化 <a class="header-anchor" href="#_8-与spring-boot集成、自动装配、监控极致细化" aria-label="Permalink to &quot;8. 与Spring Boot集成、自动装配、监控极致细化&quot;">​</a></h2><h3 id="_8-1-spring-boot自动装配" tabindex="-1">8.1 Spring Boot自动装配 <a class="header-anchor" href="#_8-1-spring-boot自动装配" aria-label="Permalink to &quot;8.1 Spring Boot自动装配&quot;">​</a></h3><ul><li>spring-boot-starter-integration、自动注册Flow、Channel、Adapter</li><li>application.yml配置示例</li></ul><h3 id="_8-2-监控与健康检查" tabindex="-1">8.2 监控与健康检查 <a class="header-anchor" href="#_8-2-监控与健康检查" aria-label="Permalink to &quot;8.2 监控与健康检查&quot;">​</a></h3><ul><li>Actuator端点、IntegrationMBeanExporter、Prometheus监控、告警脚本</li></ul><hr><h2 id="_9-生产环境部署、运维、ci-cd极致细化" tabindex="-1">9. 生产环境部署、运维、CI/CD极致细化 <a class="header-anchor" href="#_9-生产环境部署、运维、ci-cd极致细化" aria-label="Permalink to &quot;9. 生产环境部署、运维、CI/CD极致细化&quot;">​</a></h2><h3 id="_9-1-dockerfile-k8s部署yaml" tabindex="-1">9.1 Dockerfile/K8s部署YAML <a class="header-anchor" href="#_9-1-dockerfile-k8s部署yaml" aria-label="Permalink to &quot;9.1 Dockerfile/K8s部署YAML&quot;">​</a></h3><ul><li>Dockerfile、k8s-deployment.yaml、健康检查、弹性伸缩</li></ul><h3 id="_9-2-自动化运维与ci-cd" tabindex="-1">9.2 自动化运维与CI/CD <a class="header-anchor" href="#_9-2-自动化运维与ci-cd" aria-label="Permalink to &quot;9.2 自动化运维与CI/CD&quot;">​</a></h3><ul><li>Jenkinsfile、定时调度、失败告警、日志采集</li></ul><hr><h2 id="_10-常见问题与faq、面试高频题、最佳实践极致细化" tabindex="-1">10. 常见问题与FAQ、面试高频题、最佳实践极致细化 <a class="header-anchor" href="#_10-常见问题与faq、面试高频题、最佳实践极致细化" aria-label="Permalink to &quot;10. 常见问题与FAQ、面试高频题、最佳实践极致细化&quot;">​</a></h2><h3 id="_10-1-faq" tabindex="-1">10.1 FAQ <a class="header-anchor" href="#_10-1-faq" aria-label="Permalink to &quot;10.1 FAQ&quot;">​</a></h3><ul><li>如何实现高可用与消息幂等？</li><li>如何监控消息流转与瓶颈？</li><li>如何自定义EIP组件？</li><li>如何与Spring Cloud Stream集成？</li></ul><h3 id="_10-2-高频面试题与标准答案" tabindex="-1">10.2 高频面试题与标准答案 <a class="header-anchor" href="#_10-2-高频面试题与标准答案" aria-label="Permalink to &quot;10.2 高频面试题与标准答案&quot;">​</a></h3><ul><li>Q: Spring Integration核心组件？ A: Message、MessageChannel、MessageHandler、MessageSource、Endpoint、Adapter、EIP组件等。</li><li>Q: 如何实现消息幂等？ A: 唯一ID、去重表、状态机、分布式锁、ErrorChannel。</li><li>Q: 如何实现消息重试与错误处理？ A: ErrorChannel、RetryTemplate、异常路由、死信队列。</li><li>Q: 如何与Spring Boot集成？ A: spring-boot-starter-integration自动装配，配置Flow、Channel、Adapter，支持Actuator监控。</li></ul><h3 id="_10-3-最佳实践" tabindex="-1">10.3 最佳实践 <a class="header-anchor" href="#_10-3-最佳实践" aria-label="Permalink to &quot;10.3 最佳实践&quot;">​</a></h3><ul><li>Flow/Channel/Adapter/EIP分层设计</li><li>统一异常处理与告警</li><li>生产环境幂等与安全基线</li><li>自动化测试与监控</li></ul><hr><blockquote><p>本文档已极致细化 Spring Integration 全部核心与进阶知识点，适合企业级集成架构设计、攻防实战与面试深度准备。</p></blockquote>`,92)]))}const g=s(e,[["render",t]]);export{o as __pageData,g as default};
