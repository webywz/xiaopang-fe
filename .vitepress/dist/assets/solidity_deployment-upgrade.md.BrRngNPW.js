import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.DPDPlp3K.js";const o=JSON.parse('{"title":"合约部署与升级","description":"","frontmatter":{"title":"合约部署与升级"},"headers":[],"relativePath":"solidity/deployment-upgrade.md","filePath":"solidity/deployment-upgrade.md","lastUpdated":1747119657000}'),e={name:"solidity/deployment-upgrade.md"};function p(h,s,t,k,r,d){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="合约部署与升级" tabindex="-1">合约部署与升级 <a class="header-anchor" href="#合约部署与升级" aria-label="Permalink to &quot;合约部署与升级&quot;">​</a></h1><p>合约部署与升级是智能合约开发生命周期中的重要环节，直接关系到项目的安全性、可维护性和可扩展性。</p><h2 id="_1-合约部署流程" tabindex="-1">1. 合约部署流程 <a class="header-anchor" href="#_1-合约部署流程" aria-label="Permalink to &quot;1. 合约部署流程&quot;">​</a></h2><h3 id="_1-1-部署前准备" tabindex="-1">1.1 部署前准备 <a class="header-anchor" href="#_1-1-部署前准备" aria-label="Permalink to &quot;1.1 部署前准备&quot;">​</a></h3><ul><li>编写和测试合约代码，确保无漏洞。</li><li>配置好钱包（如MetaMask）、节点（如Infura）、测试网环境。</li><li>选择合适的部署工具（Remix、Truffle、Hardhat、Foundry等）。</li></ul><h3 id="_1-2-部署到测试网与主网" tabindex="-1">1.2 部署到测试网与主网 <a class="header-anchor" href="#_1-2-部署到测试网与主网" aria-label="Permalink to &quot;1.2 部署到测试网与主网&quot;">​</a></h3><ul><li>推荐先在测试网（如Goerli、Sepolia）部署，验证合约逻辑。</li><li>部署到主网前需再次审计和测试。</li><li>部署命令示例（Hardhat）：</li></ul><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hardhat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> scripts/deploy.js</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --network</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> goerli</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_1-3-部署工具" tabindex="-1">1.3 部署工具 <a class="header-anchor" href="#_1-3-部署工具" aria-label="Permalink to &quot;1.3 部署工具&quot;">​</a></h3><ul><li><strong>Remix</strong>：适合小型项目和快速原型。</li><li><strong>Truffle/Hardhat/Foundry</strong>：适合团队协作、自动化部署和复杂项目。</li></ul><h2 id="_2-合约升级模式" tabindex="-1">2. 合约升级模式 <a class="header-anchor" href="#_2-合约升级模式" aria-label="Permalink to &quot;2. 合约升级模式&quot;">​</a></h2><h3 id="_2-1-代理合约模式-proxy" tabindex="-1">2.1 代理合约模式（Proxy） <a class="header-anchor" href="#_2-1-代理合约模式-proxy" aria-label="Permalink to &quot;2.1 代理合约模式（Proxy）&quot;">​</a></h3><ul><li>通过代理合约与逻辑合约分离，实现合约升级。</li><li>常用实现：OpenZeppelin的Transparent Proxy、UUPS Proxy。</li></ul><div class="language-solidity vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 伪代码示例</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">contract</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Proxy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  address</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> implementation;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> upgrade</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">address</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> newImpl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { implementation </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newImpl; }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  fallback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">external</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* delegatecall到implementation */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_2-2-数据分离与逻辑分离" tabindex="-1">2.2 数据分离与逻辑分离 <a class="header-anchor" href="#_2-2-数据分离与逻辑分离" aria-label="Permalink to &quot;2.2 数据分离与逻辑分离&quot;">​</a></h3><ul><li>状态变量存储在代理合约，逻辑代码在实现合约。</li><li>升级时只需更换逻辑合约地址，数据不变。</li></ul><h3 id="_2-3-升级的风险与注意事项" tabindex="-1">2.3 升级的风险与注意事项 <a class="header-anchor" href="#_2-3-升级的风险与注意事项" aria-label="Permalink to &quot;2.3 升级的风险与注意事项&quot;">​</a></h3><ul><li>升级合约需严格权限控制，防止被恶意升级。</li><li>逻辑合约升级需兼容原有存储结构，避免数据丢失。</li><li>推荐使用OpenZeppelin Upgrades插件，减少人为失误。</li></ul><h2 id="_3-自动化部署实践" tabindex="-1">3. 自动化部署实践 <a class="header-anchor" href="#_3-自动化部署实践" aria-label="Permalink to &quot;3. 自动化部署实践&quot;">​</a></h2><ul><li>使用脚本（如Hardhat、Truffle）实现一键部署和升级。</li><li>可集成CI/CD流程，自动化测试和部署。</li></ul><h2 id="_4-示例代码" tabindex="-1">4. 示例代码 <a class="header-anchor" href="#_4-示例代码" aria-label="Permalink to &quot;4. 示例代码&quot;">​</a></h2><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// scripts/deploy.js (Hardhat自动化部署示例)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ethers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">upgrades</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hardhat&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Demo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ethers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getContractFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Demo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> proxy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> upgrades.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deployProxy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Demo, [</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 构造参数 */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], { initializer: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;initialize&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> proxy.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deployed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Proxy合约地址:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, proxy.address);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div class="language-solidity vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// SPDX-License-Identifier: MIT</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">pragma</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;"> solidity</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ^0.8.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">contract</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Demo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> is</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Initializable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  uint</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> initialize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _v) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> initializer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _v;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _v) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _v;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="_5-常见问题与注意事项" tabindex="-1">5. 常见问题与注意事项 <a class="header-anchor" href="#_5-常见问题与注意事项" aria-label="Permalink to &quot;5. 常见问题与注意事项&quot;">​</a></h2><ul><li><strong>升级合约需严格权限控制</strong>，建议仅owner或多签可升级。</li><li><strong>升级逻辑需兼容原有存储结构</strong>，避免变量顺序变动。</li><li><strong>自动化部署脚本应充分测试</strong>，防止误操作。</li><li><strong>主网部署前务必多轮审计和测试</strong>。</li><li><strong>升级合约后应及时验证新逻辑</strong>，并通知用户。</li></ul><hr><p>如需深入了解合约升级原理和自动化部署实践，可参考OpenZeppelin官方文档或本教程后续章节。</p>`,27)]))}const g=i(e,[["render",p]]);export{o as __pageData,g as default};
