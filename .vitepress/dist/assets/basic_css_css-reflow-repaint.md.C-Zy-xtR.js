import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.DPDPlp3K.js";const c=JSON.parse('{"title":"如何减少CSS重排与重绘","description":"深入解析浏览器重排（Reflow）与重绘（Repaint）机制，提供高效减少重排重绘的实用技巧。","frontmatter":{"layout":"doc","title":"如何减少CSS重排与重绘","description":"深入解析浏览器重排（Reflow）与重绘（Repaint）机制，提供高效减少重排重绘的实用技巧。"},"headers":[],"relativePath":"basic/css/css-reflow-repaint.md","filePath":"basic/css/css-reflow-repaint.md","lastUpdated":1746781833000}'),e={name:"basic/css/css-reflow-repaint.md"};function t(h,s,p,r,k,d){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="如何减少css重排与重绘" tabindex="-1">如何减少CSS重排与重绘 <a class="header-anchor" href="#如何减少css重排与重绘" aria-label="Permalink to &quot;如何减少CSS重排与重绘&quot;">​</a></h1><p>重排（Reflow）与重绘（Repaint）是影响页面性能的关键因素。本文将系统讲解其原理、常见触发方式与优化技巧。</p><h2 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;目录&quot;">​</a></h2><ul><li><a href="#重排与重绘的原理">重排与重绘的原理</a></li><li><a href="#常见触发重排重绘的操作">常见触发重排/重绘的操作</a></li><li><a href="#减少重排与重绘的技巧">减少重排与重绘的技巧</a></li><li><a href="#高效动画与过渡实现">高效动画与过渡实现</a></li><li><a href="#性能监测与调试">性能监测与调试</a></li></ul><h2 id="重排与重绘的原理" tabindex="-1">重排与重绘的原理 <a class="header-anchor" href="#重排与重绘的原理" aria-label="Permalink to &quot;重排与重绘的原理&quot;">​</a></h2><ul><li><strong>重排（Reflow）</strong>：布局阶段，涉及元素尺寸、位置变化，代价较高</li><li><strong>重绘（Repaint）</strong>：仅涉及外观（如颜色、阴影）变化，代价较低</li></ul><h2 id="常见触发重排-重绘的操作" tabindex="-1">常见触发重排/重绘的操作 <a class="header-anchor" href="#常见触发重排-重绘的操作" aria-label="Permalink to &quot;常见触发重排/重绘的操作&quot;">​</a></h2><ul><li>修改元素尺寸、位置、结构（如增删节点）</li><li>读取布局属性（如offsetWidth、clientHeight）会强制刷新布局</li><li>频繁操作样式、批量DOM操作</li></ul><h2 id="减少重排与重绘的技巧" tabindex="-1">减少重排与重绘的技巧 <a class="header-anchor" href="#减少重排与重绘的技巧" aria-label="Permalink to &quot;减少重排与重绘的技巧&quot;">​</a></h2><ul><li>批量修改样式，合并DOM操作</li><li>使用<code>class</code>切换而非逐条修改样式</li><li>离线操作（如DocumentFragment、display:none）后再插入</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 批量插入节点，减少重排</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {HTMLElement}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> parent</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 父节点</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {HTMLElement[]}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> children</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 子节点数组</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> appendBatch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">parent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">children</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> frag</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createDocumentFragment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  children.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">child</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> frag.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(child));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  parent.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(frag);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="高效动画与过渡实现" tabindex="-1">高效动画与过渡实现 <a class="header-anchor" href="#高效动画与过渡实现" aria-label="Permalink to &quot;高效动画与过渡实现&quot;">​</a></h2><ul><li>优先使用<code>transform</code>和<code>opacity</code>，避免触发重排</li><li>合理使用<code>will-change</code>提升动画流畅度</li></ul><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.box</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  transition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: transform </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, opacity </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="性能监测与调试" tabindex="-1">性能监测与调试 <a class="header-anchor" href="#性能监测与调试" aria-label="Permalink to &quot;性能监测与调试&quot;">​</a></h2><ul><li>使用Chrome DevTools Performance面板分析重排/重绘</li><li>利用requestAnimationFrame优化高频操作</li></ul><hr><blockquote><p>参考资料：<a href="https://developer.mozilla.org/zh-CN/docs/Web/Performance/How_browsers_work" target="_blank" rel="noreferrer">MDN 重排与重绘</a></p></blockquote>`,18)]))}const E=i(e,[["render",t]]);export{c as __pageData,E as default};
