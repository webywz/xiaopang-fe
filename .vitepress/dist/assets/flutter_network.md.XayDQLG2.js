import{_ as a,c as i,o as n,ag as e}from"./chunks/framework.DPDPlp3K.js";const c=JSON.parse('{"title":"网络与数据","description":"","frontmatter":{"title":"网络与数据"},"headers":[],"relativePath":"flutter/network.md","filePath":"flutter/network.md","lastUpdated":1747310844000}'),l={name:"flutter/network.md"};function t(h,s,p,r,k,d){return n(),i("div",null,s[0]||(s[0]=[e(`<p>/**</p><ul><li>Flutter网络与数据</li><li>@description 介绍Flutter中常用的网络请求与数据处理方法。 */</li></ul><h1 id="网络与数据" tabindex="-1">网络与数据 <a class="header-anchor" href="#网络与数据" aria-label="Permalink to &quot;网络与数据&quot;">​</a></h1><h2 id="http包基础用法" tabindex="-1">http包基础用法 <a class="header-anchor" href="#http包基础用法" aria-label="Permalink to &quot;http包基础用法&quot;">​</a></h2><ul><li>适合简单网络请求。</li></ul><div class="language-dart vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;package:http/http.dart&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fetchData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Uri</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://api.example.com/data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (response.statusCode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(response.body);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="dio高级用法" tabindex="-1">Dio高级用法 <a class="header-anchor" href="#dio高级用法" aria-label="Permalink to &quot;Dio高级用法&quot;">​</a></h2><ul><li>支持拦截器、全局配置、文件上传下载等。</li></ul><div class="language-dart vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;package:dio/dio.dart&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dio </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Dio</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dio.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://api.example.com/data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="网络请求封装" tabindex="-1">网络请求封装 <a class="header-anchor" href="#网络请求封装" aria-label="Permalink to &quot;网络请求封装&quot;">​</a></h2><ul><li>推荐将请求逻辑封装为独立类，便于管理和测试。</li></ul><h2 id="异步与future-stream" tabindex="-1">异步与Future/Stream <a class="header-anchor" href="#异步与future-stream" aria-label="Permalink to &quot;异步与Future/Stream&quot;">​</a></h2><ul><li>Future 适合一次性异步操作，Stream 适合多次/持续数据流。</li></ul><h2 id="json解析与数据模型" tabindex="-1">JSON解析与数据模型 <a class="header-anchor" href="#json解析与数据模型" aria-label="Permalink to &quot;JSON解析与数据模型&quot;">​</a></h2><ul><li>使用 <code>dart:convert</code> 解析 JSON。</li></ul><div class="language-dart vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;dart:convert&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> jsonDecode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(response.body);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>建议定义数据模型类，提升类型安全。</li></ul><h2 id="数据缓存与本地化" tabindex="-1">数据缓存与本地化 <a class="header-anchor" href="#数据缓存与本地化" aria-label="Permalink to &quot;数据缓存与本地化&quot;">​</a></h2><ul><li>可结合本地存储（如 shared_preferences、hive）缓存数据。</li></ul><h2 id="网络异常与重试机制" tabindex="-1">网络异常与重试机制 <a class="header-anchor" href="#网络异常与重试机制" aria-label="Permalink to &quot;网络异常与重试机制&quot;">​</a></h2><ul><li>建议统一处理异常，必要时自动重试。</li></ul><h2 id="graphql-socket等高级用法" tabindex="-1">GraphQL/Socket等高级用法 <a class="header-anchor" href="#graphql-socket等高级用法" aria-label="Permalink to &quot;GraphQL/Socket等高级用法&quot;">​</a></h2><ul><li>支持 graphql_flutter、web_socket_channel 等第三方库实现实时通信。</li></ul><h2 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h2><ul><li>支持Dio、GraphQL等第三方库</li></ul>`,25)]))}const E=a(l,[["render",t]]);export{c as __pageData,E as default};
