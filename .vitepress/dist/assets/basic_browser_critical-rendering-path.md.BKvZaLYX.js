import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.DPDPlp3K.js";const o=JSON.parse('{"title":"关键渲染路径与性能优化","description":"深入解析浏览器关键渲染路径工作原理，掌握前端性能优化的核心技术与实践方法。","frontmatter":{"layout":"doc","title":"关键渲染路径与性能优化","description":"深入解析浏览器关键渲染路径工作原理，掌握前端性能优化的核心技术与实践方法。"},"headers":[],"relativePath":"basic/browser/critical-rendering-path.md","filePath":"basic/browser/critical-rendering-path.md","lastUpdated":1746781833000}'),e={name:"basic/browser/critical-rendering-path.md"};function p(t,s,h,r,k,d){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="关键渲染路径与性能优化" tabindex="-1">关键渲染路径与性能优化 <a class="header-anchor" href="#关键渲染路径与性能优化" aria-label="Permalink to &quot;关键渲染路径与性能优化&quot;">​</a></h1><p>关键渲染路径(Critical Rendering Path)是浏览器将HTML、CSS和JavaScript转换为屏幕上的像素所经历的一系列步骤。掌握这一过程对于前端性能优化至关重要。</p><h2 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;目录&quot;">​</a></h2><ul><li><a href="#关键渲染路径概述">关键渲染路径概述</a><ul><li><a href="#基本渲染流程">基本渲染流程</a></li><li><a href="#性能关键指标">性能关键指标</a></li></ul></li><li><a href="#dom构建过程">DOM构建过程</a><ul><li><a href="#html解析原理">HTML解析原理</a></li><li><a href="#dom树结构">DOM树结构</a></li><li><a href="#dom构建优化">DOM构建优化</a></li></ul></li><li><a href="#cssom构建过程">CSSOM构建过程</a><ul><li><a href="#css解析逻辑">CSS解析逻辑</a></li><li><a href="#cssom树特性">CSSOM树特性</a></li><li><a href="#css阻塞渲染机制">CSS阻塞渲染机制</a></li></ul></li><li><a href="#javascript执行影响">JavaScript执行影响</a><ul><li><a href="#脚本加载与解析">脚本加载与解析</a></li><li><a href="#解决js阻塞问题">解决JS阻塞问题</a></li></ul></li><li><a href="#渲染树构建">渲染树构建</a><ul><li><a href="#dom与cssom合并">DOM与CSSOM合并</a></li><li><a href="#不可见元素处理">不可见元素处理</a></li></ul></li><li><a href="#布局与绘制">布局与绘制</a><ul><li><a href="#布局计算原理">布局计算原理</a></li><li><a href="#绘制操作过程">绘制操作过程</a></li><li><a href="#合成与显示">合成与显示</a></li></ul></li><li><a href="#优化策略与最佳实践">优化策略与最佳实践</a><ul><li><a href="#关键资源识别">关键资源识别</a></li><li><a href="#优化资源加载顺序">优化资源加载顺序</a></li><li><a href="#减少关键资源大小">减少关键资源大小</a></li><li><a href="#减少关键路径长度">减少关键路径长度</a></li></ul></li><li><a href="#性能测量与分析工具">性能测量与分析工具</a><ul><li><a href="#chrome-devtools">Chrome DevTools</a></li><li><a href="#lighthouse">Lighthouse</a></li><li><a href="#webpagetest">WebPageTest</a></li></ul></li><li><a href="#案例分析与实战">案例分析与实战</a><ul><li><a href="#电商网站优化案例">电商网站优化案例</a></li><li><a href="#资讯类网站优化案例">资讯类网站优化案例</a></li></ul></li></ul><h2 id="关键渲染路径概述" tabindex="-1">关键渲染路径概述 <a class="header-anchor" href="#关键渲染路径概述" aria-label="Permalink to &quot;关键渲染路径概述&quot;">​</a></h2><p>关键渲染路径是浏览器从接收HTML、CSS和JavaScript字节到将它们转换为渲染的像素所经历的一系列步骤。理解这个过程对前端开发者至关重要。</p><h3 id="基本渲染流程" tabindex="-1">基本渲染流程 <a class="header-anchor" href="#基本渲染流程" aria-label="Permalink to &quot;基本渲染流程&quot;">​</a></h3><p>浏览器渲染页面的基本流程包括以下主要步骤：</p><ol><li><strong>构建DOM树</strong>：解析HTML文档，构建DOM树结构</li><li><strong>构建CSSOM树</strong>：解析CSS规则，构建CSSOM树</li><li><strong>执行JavaScript</strong>：下载并执行JavaScript代码</li><li><strong>生成渲染树</strong>：结合DOM和CSSOM，创建渲染树</li><li><strong>布局计算</strong>：计算元素的精确位置和大小</li><li><strong>绘制像素</strong>：将计算结果绘制到屏幕上</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 模拟浏览器关键渲染路径主要步骤</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {string}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> html</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> - HTML文档内容</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {string}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> css</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> - CSS样式内容</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {string}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> js</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> - JavaScript代码内容</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> criticalRenderingPath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">css</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> domTree</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> parseHTML</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(html);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> cssomTree</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> parseCSS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(css);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (js) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    executeJS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(js, domTree, cssomTree);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> renderTree</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createRenderTree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(domTree, cssomTree);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> layoutInfo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> calculateLayout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(renderTree);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  paint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(layoutInfo);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>这个过程并非完全线性，浏览器会尽可能并行处理某些步骤，但关键路径中的阻塞资源会显著影响页面加载速度。</p><h3 id="性能关键指标" tabindex="-1">性能关键指标 <a class="header-anchor" href="#性能关键指标" aria-label="Permalink to &quot;性能关键指标&quot;">​</a></h3><p>评估关键渲染路径性能的重要指标包括：</p><ul><li><strong>首次内容绘制(FCP)</strong>：首次有内容渲染到屏幕的时间</li><li><strong>首次有效绘制(FMP)</strong>：页面主要内容可见的时间</li><li><strong>可交互时间(TTI)</strong>：页面可以响应用户交互的时间</li><li><strong>视觉完成时间(VC)</strong>：页面视觉上完全加载的时间</li><li><strong>总阻塞时间(TBT)</strong>：主线程被阻塞，无法响应用户输入的总时间</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 关键性能指标计算（伪代码）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@returns</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {Object}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 性能指标集合</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> calculatePerformanceMetrics</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    FCP: performance.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getEntriesByName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;first-contentful-paint&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].startTime,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    TTI: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">calculateTTI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    TBT: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">calculateTotalBlockingTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>优化关键渲染路径的目标是尽可能减少这些指标的值，提供更快的用户体验。</p><h2 id="dom构建过程" tabindex="-1">DOM构建过程 <a class="header-anchor" href="#dom构建过程" aria-label="Permalink to &quot;DOM构建过程&quot;">​</a></h2><p>DOM（文档对象模型）是浏览器对HTML文档的内部表示，也是网页交互的基础。</p><h3 id="html解析原理" tabindex="-1">HTML解析原理 <a class="header-anchor" href="#html解析原理" aria-label="Permalink to &quot;HTML解析原理&quot;">​</a></h3><p>浏览器解析HTML文档并构建DOM树的过程如下：</p><ol><li><strong>字节处理</strong>：将接收到的HTML字节转换为字符</li><li><strong>标记识别</strong>：将字符转换为标记(tokens)，如<code>&lt;html&gt;</code>、<code>&lt;body&gt;</code>等</li><li><strong>节点构建</strong>：根据标记创建节点对象</li><li><strong>DOM构建</strong>：按照HTML的嵌套关系构建完整的DOM树结构</li></ol><p>这个过程是增量进行的，浏览器不需要等待所有HTML下载完成就可以开始构建DOM树，这也是为什么在慢网络环境下，页面会逐步显示的原因。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * HTML解析过程简化示例</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {string}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> htmlString</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> - HTML文档字符串</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@returns</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {Object}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> DOM树结构</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> parseHTML</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">htmlString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> tokens</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tokenize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(htmlString);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nodes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createNodes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tokens);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> buildDOMTree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(nodes);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="dom树结构" tabindex="-1">DOM树结构 <a class="header-anchor" href="#dom树结构" aria-label="Permalink to &quot;DOM树结构&quot;">​</a></h3><p>DOM树是一个包含所有HTML元素的节点树，具有以下特性：</p><ul><li>每个HTML元素都是一个节点</li><li>元素的嵌套关系反映为节点的父子关系</li><li>文本内容也是独立的节点</li><li>注释和处理指令也会成为DOM树的一部分</li></ul><p>一个简单HTML文档的DOM树结构示例：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>html</span></span>
<span class="line"><span>├── head</span></span>
<span class="line"><span>│   ├── title</span></span>
<span class="line"><span>│   │   └── [文本节点] &quot;页面标题&quot;</span></span>
<span class="line"><span>│   └── meta</span></span>
<span class="line"><span>└── body</span></span>
<span class="line"><span>    ├── h1</span></span>
<span class="line"><span>    │   └── [文本节点] &quot;标题内容&quot; </span></span>
<span class="line"><span>    └── p</span></span>
<span class="line"><span>        └── [文本节点] &quot;段落内容&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="dom构建优化" tabindex="-1">DOM构建优化 <a class="header-anchor" href="#dom构建优化" aria-label="Permalink to &quot;DOM构建优化&quot;">​</a></h3><p>优化DOM构建过程的关键策略包括：</p><ol><li><strong>减少HTML大小</strong>：移除不必要的注释、空格和嵌套结构</li><li><strong>避免复杂的DOM结构</strong>：保持DOM层级简单，避免不必要的嵌套</li><li><strong>使用语义化标签</strong>：帮助浏览器更快地理解文档结构</li><li><strong>延迟加载非关键内容</strong>：使用懒加载等技术延迟加载非首屏内容</li></ol><p>这些优化可以显著减少浏览器处理DOM的时间，加快首屏内容的显示。</p><h2 id="cssom构建过程" tabindex="-1">CSSOM构建过程 <a class="header-anchor" href="#cssom构建过程" aria-label="Permalink to &quot;CSSOM构建过程&quot;">​</a></h2><p>CSS对象模型(CSSOM)与DOM类似，是浏览器对CSS的内部表示。</p><h3 id="css解析逻辑" tabindex="-1">CSS解析逻辑 <a class="header-anchor" href="#css解析逻辑" aria-label="Permalink to &quot;CSS解析逻辑&quot;">​</a></h3><p>浏览器解析CSS并构建CSSOM的过程如下：</p><ol><li><strong>字节处理</strong>：将CSS字节转换为字符</li><li><strong>标记识别</strong>：将字符转换为标记，如选择器、属性、值等</li><li><strong>规则构建</strong>：将标记组合为完整的CSS规则</li><li><strong>CSSOM构建</strong>：创建树形结构，表示样式层叠和继承关系</li></ol><p>与HTML不同，CSS是渲染阻塞资源，浏览器会等待CSSOM完全构建后才继续渲染流程。这是因为样式信息对于决定元素如何显示至关重要。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * CSS解析过程简化示例</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {string}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cssString</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> - CSS样式文本</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@returns</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {Object}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> CSSOM树结构</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> parseCSS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">cssString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> tokens</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tokenizeCSS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cssString);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rules</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createCSSRules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tokens);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> buildCSSOTree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rules);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="cssom树特性" tabindex="-1">CSSOM树特性 <a class="header-anchor" href="#cssom树特性" aria-label="Permalink to &quot;CSSOM树特性&quot;">​</a></h3><p>CSSOM树具有以下特点：</p><ul><li>反映了CSS选择器与属性的关系</li><li>包含样式计算和继承的逻辑</li><li>解决了样式冲突和优先级</li><li>表示了最终应用到每个元素的计算样式</li></ul><p>CSSOM树示例：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>html {font-size: 16px;}</span></span>
<span class="line"><span>├── body {font-size: 1rem;}</span></span>
<span class="line"><span>│   ├── h1 {font-size: 2rem; font-weight: bold;}</span></span>
<span class="line"><span>│   └── p {font-size: 1rem; line-height: 1.5;}</span></span>
<span class="line"><span>│       └── span {color: red; font-size: inherit;}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="css阻塞渲染机制" tabindex="-1">CSS阻塞渲染机制 <a class="header-anchor" href="#css阻塞渲染机制" aria-label="Permalink to &quot;CSS阻塞渲染机制&quot;">​</a></h3><p>CSS对浏览器渲染的阻塞效果表现为：</p><ul><li>CSS被视为渲染阻塞资源，必须完成CSSOM构建才能进行下一步</li><li>外部CSS文件的下载会阻塞渲染树的构建</li><li>内联CSS虽然避免了网络请求，但解析复杂的CSS仍然会消耗时间</li><li>media查询可以将非匹配的CSS标记为非阻塞资源</li></ul><p>理解这些机制对于优化CSS加载至关重要。</p><h2 id="javascript执行影响" tabindex="-1">JavaScript执行影响 <a class="header-anchor" href="#javascript执行影响" aria-label="Permalink to &quot;JavaScript执行影响&quot;">​</a></h2><p>JavaScript是关键渲染路径中最复杂的部分，因为它既可以修改DOM也可以修改CSSOM。</p><h3 id="脚本加载与解析" tabindex="-1">脚本加载与解析 <a class="header-anchor" href="#脚本加载与解析" aria-label="Permalink to &quot;脚本加载与解析&quot;">​</a></h3><p>JavaScript对渲染路径的影响体现在：</p><ol><li><strong>解析阻塞</strong>：遇到<code>&lt;script&gt;</code>标签时，HTML解析会暂停</li><li><strong>执行阻塞</strong>：必须等待前面的CSS解析完成才能执行JS</li><li><strong>DOM修改</strong>：JS可以动态修改DOM结构</li><li><strong>样式计算</strong>：JS可以查询和修改元素样式</li></ol><p>这使得JavaScript成为关键渲染路径中潜在的性能瓶颈。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * JavaScript对关键渲染路径的影响（伪代码）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> processScript</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">scriptContent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">dom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">cssom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 暂停DOM解析</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  pauseDOMParsing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 确保CSSOM已构建完成</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cssom.isComplete) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    waitForCSSOCompletion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 执行脚本</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  executeScript</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(scriptContent, dom, cssom);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 继续DOM解析</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  resumeDOMParsing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="解决js阻塞问题" tabindex="-1">解决JS阻塞问题 <a class="header-anchor" href="#解决js阻塞问题" aria-label="Permalink to &quot;解决JS阻塞问题&quot;">​</a></h3><p>优化JavaScript加载与执行的策略包括：</p><ol><li><p><strong>使用<code>async</code>属性</strong>：异步加载脚本，不阻塞HTML解析</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;analytics.js&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p><strong>使用<code>defer</code>属性</strong>：延迟脚本执行到DOM解析完成后</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;app.js&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p><strong>使用<code>module</code>类型</strong>：ES模块默认延迟加载</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;module&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;module.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p><strong>内联关键JavaScript</strong>：减少网络请求</p></li><li><p><strong>将脚本放在底部</strong>：确保优先解析HTML和CSS</p></li></ol><p>这些技巧可以显著减少JavaScript对关键渲染路径的阻塞。</p><h2 id="渲染树构建" tabindex="-1">渲染树构建 <a class="header-anchor" href="#渲染树构建" aria-label="Permalink to &quot;渲染树构建&quot;">​</a></h2><p>渲染树(Render Tree)是DOM树和CSSOM树结合的产物，包含了所有需要显示的元素及其样式信息。</p><h3 id="dom与cssom合并" tabindex="-1">DOM与CSSOM合并 <a class="header-anchor" href="#dom与cssom合并" aria-label="Permalink to &quot;DOM与CSSOM合并&quot;">​</a></h3><p>渲染树构建过程：</p><ol><li>从DOM树的根节点开始遍历</li><li>排除所有不可见元素（如<code>&lt;head&gt;</code>、<code>&lt;script&gt;</code>、设置了<code>display:none</code>的元素）</li><li>为每个可见元素匹配CSSOM中的样式规则</li><li>发射可见节点及其内容和计算样式</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 渲染树构建过程</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {Object}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> domTree</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> - DOM树</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {Object}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cssomTree</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> - CSSOM树</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@returns</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {Object}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 渲染树</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> buildRenderTree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">domTree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">cssomTree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> renderTree</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> traverse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">domNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 跳过不可见元素</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isNotVisible</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(domNode)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 应用样式规则</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> styledNode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> applyStyles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(domNode, cssomTree);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    renderTree.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(styledNode);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 遍历子节点</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    domNode.children.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">child</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> traverse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(child));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  traverse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(domTree.root);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> renderTree;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h3 id="不可见元素处理" tabindex="-1">不可见元素处理 <a class="header-anchor" href="#不可见元素处理" aria-label="Permalink to &quot;不可见元素处理&quot;">​</a></h3><p>在渲染树构建过程中，以下元素会被忽略：</p><ul><li><code>&lt;head&gt;</code>元素及其子元素</li><li><code>&lt;script&gt;</code>、<code>&lt;meta&gt;</code>、<code>&lt;link&gt;</code>等非视觉元素</li><li>设置了<code>display: none</code>的元素（注意：<code>visibility: hidden</code>的元素仍会包含在渲染树中）</li><li>通过媒体查询被排除的元素</li></ul><p>这种处理机制确保了渲染树只包含需要实际绘制的元素。</p><h2 id="布局与绘制" tabindex="-1">布局与绘制 <a class="header-anchor" href="#布局与绘制" aria-label="Permalink to &quot;布局与绘制&quot;">​</a></h2><p>渲染树构建完成后，浏览器需要计算每个元素的几何信息并将其绘制到屏幕上。</p><h3 id="布局计算原理" tabindex="-1">布局计算原理 <a class="header-anchor" href="#布局计算原理" aria-label="Permalink to &quot;布局计算原理&quot;">​</a></h3><p>布局（也称为回流或重排）计算每个元素在视口中的精确位置和大小：</p><ol><li>从渲染树的根节点开始遍历</li><li>确定每个元素的确切位置和尺寸</li><li>考虑元素的盒模型、定位方案和外部因素</li><li>生成最终的布局树</li></ol><p>布局是一个计算密集型过程，尤其对于复杂的响应式布局。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 布局计算过程</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {Object}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> renderTree</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> - 渲染树</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@returns</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {Object}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 布局树（包含位置和尺寸信息）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> computeLayout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">renderTree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> layoutTree</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> calculateNodeGeometry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">parentConstraints</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 计算当前节点的宽度</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> width</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> calculateWidth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(node, parentConstraints);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 计算当前节点的位置</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> position</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> calculatePosition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(node, parentConstraints);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 计算子节点的约束条件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> childConstraints</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> deriveChildConstraints</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(node, width, position);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 递归计算子节点的几何信息</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> childrenGeometry</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> node.children.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">child</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      calculateNodeGeometry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(child, childConstraints)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 计算当前节点的高度（可能依赖于子节点的高度）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> height</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> calculateHeight</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(node, childrenGeometry);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 创建带有完整几何信息的节点</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> geometryNode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      element: node.element,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      x: position.x,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      y: position.y,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      width: width,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      height: height,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      children: childrenGeometry</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    layoutTree.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(geometryNode);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> geometryNode;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  calculateNodeGeometry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(renderTree.root, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">initialViewportConstraints</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> layoutTree;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div><h3 id="绘制操作过程" tabindex="-1">绘制操作过程 <a class="header-anchor" href="#绘制操作过程" aria-label="Permalink to &quot;绘制操作过程&quot;">​</a></h3><p>绘制是将布局树转换为实际像素的过程：</p><ol><li>创建图层(layers)</li><li>将布局树中的元素分配到相应图层</li><li>对每个图层进行绘制，生成绘制记录</li><li>将图层合成为最终图像</li></ol><p>绘制过程通常包括：文本绘制、背景绘制、边框绘制、阴影等多个步骤。</p><h3 id="合成与显示" tabindex="-1">合成与显示 <a class="header-anchor" href="#合成与显示" aria-label="Permalink to &quot;合成与显示&quot;">​</a></h3><p>现代浏览器使用合成技术优化渲染：</p><ol><li><strong>分层</strong>：将页面分解为多个图层</li><li><strong>光栅化</strong>：将矢量信息转换为像素</li><li><strong>合成</strong>：将各个图层按正确的顺序组合在一起</li><li><strong>显示</strong>：将最终结果发送到屏幕</li></ol><p>合成让浏览器可以只重新绘制发生变化的图层，大幅提高性能。</p><h2 id="优化策略与最佳实践" tabindex="-1">优化策略与最佳实践 <a class="header-anchor" href="#优化策略与最佳实践" aria-label="Permalink to &quot;优化策略与最佳实践&quot;">​</a></h2><p>优化关键渲染路径的核心是减少阻塞时间，加快首屏内容的显示。</p><h3 id="关键资源识别" tabindex="-1">关键资源识别 <a class="header-anchor" href="#关键资源识别" aria-label="Permalink to &quot;关键资源识别&quot;">​</a></h3><p>首先需要识别对首屏渲染至关重要的资源：</p><ol><li><strong>关键HTML</strong>：构建DOM所需的初始HTML</li><li><strong>关键CSS</strong>：渲染首屏所需的样式规则</li><li><strong>关键JavaScript</strong>：影响首屏显示的脚本</li></ol><p>非关键资源应该被延迟加载，以避免阻塞主要内容的渲染。</p><h3 id="优化资源加载顺序" tabindex="-1">优化资源加载顺序 <a class="header-anchor" href="#优化资源加载顺序" aria-label="Permalink to &quot;优化资源加载顺序&quot;">​</a></h3><p>控制资源加载顺序可以显著提升性能：</p><ol><li><p><strong>优先加载关键CSS</strong>：使用<code>&lt;link rel=&quot;preload&quot;&gt;</code>预加载关键样式</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;preload&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;critical.css&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;style&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p><strong>延迟加载非关键JavaScript</strong>：使用<code>async</code>或<code>defer</code>属性</p></li><li><p><strong>使用资源提示</strong>：如DNS预解析、预连接等</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dns-prefetch&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;//example.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;preconnect&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://example.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p><strong>服务器推送</strong>：通过HTTP/2 Server Push提前推送关键资源</p></li></ol><h3 id="减少关键资源大小" tabindex="-1">减少关键资源大小 <a class="header-anchor" href="#减少关键资源大小" aria-label="Permalink to &quot;减少关键资源大小&quot;">​</a></h3><p>减小资源大小可以直接加快下载速度：</p><ol><li><p><strong>压缩HTML、CSS和JavaScript</strong>：使用Gzip或Brotli</p></li><li><p><strong>提取关键CSS</strong>：内联首屏关键样式</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 关键CSS规则 */</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { ... }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.hero</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { ... }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li><p><strong>代码分割</strong>：将JavaScript分割为更小的块</p></li><li><p><strong>消除未使用的代码</strong>：使用工具检测和删除无用代码</p></li><li><p><strong>图像优化</strong>：使用合适的格式和压缩级别</p></li></ol><h3 id="减少关键路径长度" tabindex="-1">减少关键路径长度 <a class="header-anchor" href="#减少关键路径长度" aria-label="Permalink to &quot;减少关键路径长度&quot;">​</a></h3><p>关键路径长度是获取所有关键资源所需的往返次数：</p><ol><li><strong>减少关键资源数量</strong>：合并文件，内联小资源</li><li><strong>使用CDN</strong>：减少资源获取的延迟</li><li><strong>缓存策略优化</strong>：有效利用浏览器缓存</li><li><strong>减少重定向</strong>：每个重定向都会增加往返次数</li></ol><h2 id="性能测量与分析工具" tabindex="-1">性能测量与分析工具 <a class="header-anchor" href="#性能测量与分析工具" aria-label="Permalink to &quot;性能测量与分析工具&quot;">​</a></h2><p>要有效优化关键渲染路径，需要恰当的测量和分析工具。</p><h3 id="chrome-devtools" tabindex="-1">Chrome DevTools <a class="header-anchor" href="#chrome-devtools" aria-label="Permalink to &quot;Chrome DevTools&quot;">​</a></h3><p>Chrome DevTools提供了丰富的性能分析功能：</p><ul><li><strong>Network面板</strong>：分析资源加载时间线</li><li><strong>Performance面板</strong>：记录和分析渲染性能</li><li><strong>Coverage面板</strong>：识别未使用的CSS和JavaScript代码</li><li><strong>Lighthouse集成</strong>：综合性能评估和优化建议</li></ul><h3 id="lighthouse" tabindex="-1">Lighthouse <a class="header-anchor" href="#lighthouse" aria-label="Permalink to &quot;Lighthouse&quot;">​</a></h3><p>Lighthouse是一个自动化工具，可以评估网页的性能、可访问性和SEO等：</p><ul><li>提供关键渲染路径相关的性能分数</li><li>识别阻塞渲染的资源</li><li>提供具体的优化建议和机会</li><li>模拟不同的网络和设备条件</li></ul><h3 id="webpagetest" tabindex="-1">WebPageTest <a class="header-anchor" href="#webpagetest" aria-label="Permalink to &quot;WebPageTest&quot;">​</a></h3><p>WebPageTest提供更全面的性能测试能力：</p><ul><li>在实际设备和浏览器上测试性能</li><li>提供详细的瀑布图分析</li><li>支持视频捕获和视觉比较</li><li>提供多地点和多条件测试</li></ul><h2 id="案例分析与实战" tabindex="-1">案例分析与实战 <a class="header-anchor" href="#案例分析与实战" aria-label="Permalink to &quot;案例分析与实战&quot;">​</a></h2><h3 id="电商网站优化案例" tabindex="-1">电商网站优化案例 <a class="header-anchor" href="#电商网站优化案例" aria-label="Permalink to &quot;电商网站优化案例&quot;">​</a></h3><p>电商网站的关键渲染路径优化策略：</p><ol><li><p><strong>产品列表页优化</strong></p><ul><li>内联关键CSS，加速首屏产品显示</li><li>使用图片懒加载，仅加载可见产品图片</li><li>延迟加载非关键JavaScript（如分析脚本）</li></ul></li><li><p><strong>产品详情页优化</strong></p><ul><li>预加载主产品图片</li><li>优先渲染价格和购买按钮</li><li>延迟加载评论和推荐产品</li><li>服务端渲染关键内容</li></ul></li></ol><h3 id="资讯类网站优化案例" tabindex="-1">资讯类网站优化案例 <a class="header-anchor" href="#资讯类网站优化案例" aria-label="Permalink to &quot;资讯类网站优化案例&quot;">​</a></h3><p>新闻和内容网站的优化方案：</p><ol><li><p><strong>首页优化</strong></p><ul><li>使用AMP或轻量级框架</li><li>内联关键CSS，延迟加载非首屏样式</li><li>优先加载头条文章内容和图片</li><li>延迟加载评论和相关文章</li></ul></li><li><p><strong>文章页优化</strong></p><ul><li>优先渲染文章内容</li><li>实现渐进式图片加载</li><li>延迟广告和社交插件加载</li><li>使用指定尺寸的图片容器，减少布局变化</li></ul></li></ol><p>这些实际案例展示了如何在实际项目中应用关键渲染路径优化原则，取得显著的性能提升。</p><hr><blockquote><p>参考资料：</p><ul><li><a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path" target="_blank" rel="noreferrer">Google Web Fundamentals: Critical Rendering Path</a></li><li><a href="https://web.dev/articles/critical-rendering-path" target="_blank" rel="noreferrer">Understanding the Critical Rendering Path</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/Performance/Critical_rendering_path" target="_blank" rel="noreferrer">MDN Web Docs: Critical Rendering Path</a></li></ul></blockquote>`,120)]))}const g=i(e,[["render",p]]);export{o as __pageData,g as default};
