import{_ as s,c as a,o as n,ag as l}from"./chunks/framework.DPDPlp3K.js";const c=JSON.parse('{"title":"安全与认证","description":"","frontmatter":{"title":"安全与认证"},"headers":[],"relativePath":"spring/springboot/security.md","filePath":"spring/springboot/security.md","lastUpdated":1747111449000}'),e={name:"spring/springboot/security.md"};function t(h,i,r,p,k,d){return n(),a("div",null,i[0]||(i[0]=[l(`<h1 id="安全与认证" tabindex="-1">安全与认证 <a class="header-anchor" href="#安全与认证" aria-label="Permalink to &quot;安全与认证&quot;">​</a></h1><p>SpringBoot 集成了强大的 Spring Security 框架，支持多种认证授权方式，适合企业级安全需求。</p><h2 id="_1-spring-security-原理与架构" tabindex="-1">1. Spring Security 原理与架构 <a class="header-anchor" href="#_1-spring-security-原理与架构" aria-label="Permalink to &quot;1. Spring Security 原理与架构&quot;">​</a></h2><ul><li>基于 Servlet 过滤器链，所有请求都经过安全过滤器</li><li>核心组件：<code>AuthenticationManager</code>、<code>UserDetailsService</code>、<code>SecurityContext</code>、<code>FilterChain</code></li><li>支持表单登录、HTTP Basic、Token、OAuth2、LDAP 等多种认证方式</li></ul><h2 id="_2-认证与授权流程" tabindex="-1">2. 认证与授权流程 <a class="header-anchor" href="#_2-认证与授权流程" aria-label="Permalink to &quot;2. 认证与授权流程&quot;">​</a></h2><ul><li>用户请求 -&gt; 过滤器链 -&gt; 认证（Authentication） -&gt; 授权（Authorization） -&gt; 资源访问</li><li>认证通过后，用户信息存储在 <code>SecurityContextHolder</code></li><li>授权通过后，允许访问受保护资源</li></ul><h2 id="_3-用户体系与密码加密" tabindex="-1">3. 用户体系与密码加密 <a class="header-anchor" href="#_3-用户体系与密码加密" aria-label="Permalink to &quot;3. 用户体系与密码加密&quot;">​</a></h2><ul><li>用户信息实现 <code>UserDetails</code> 接口，持久化存储</li><li>密码加密推荐使用 <code>BCryptPasswordEncoder</code></li><li>示例：<div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PasswordEncoder </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">passwordEncoder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BCryptPasswordEncoder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li>用户自定义加载：实现 <code>UserDetailsService#loadUserByUsername</code></li></ul><h2 id="_4-配置与自定义登录" tabindex="-1">4. 配置与自定义登录 <a class="header-anchor" href="#_4-配置与自定义登录" aria-label="Permalink to &quot;4. 配置与自定义登录&quot;">​</a></h2><ul><li>继承 <code>WebSecurityConfigurerAdapter</code>（Spring Security 5.7 之前）或实现 <code>SecurityFilterChain</code>（5.7+ 推荐）</li><li>配置登录页、登出、异常处理、静态资源放行</li><li>示例：<div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Configuration</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SecurityConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SecurityFilterChain </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filterChain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpSecurity </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">http</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        http</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">authorizeHttpRequests</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">antMatchers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/login&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/css/**&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">permitAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">anyRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">authenticated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">formLogin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">loginPage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/login&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">permitAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">logout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">permitAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div></li></ul><h2 id="_5-jwt-认证机制" tabindex="-1">5. JWT 认证机制 <a class="header-anchor" href="#_5-jwt-认证机制" aria-label="Permalink to &quot;5. JWT 认证机制&quot;">​</a></h2><ul><li>适合前后端分离、移动端、微服务</li><li>登录成功后生成 JWT，前端存储在 localStorage/cookie</li><li>每次请求携带 JWT，后端解析校验</li><li>推荐使用 jjwt、spring-security-oauth2-resource-server</li><li>示例：<div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String token </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Jwts.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setSubject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(username)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setExpiration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">currentTimeMillis</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 86400000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">signWith</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(SignatureAlgorithm.HS512, secret)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compact</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li></ul><h2 id="_6-oauth2-与单点登录-sso" tabindex="-1">6. OAuth2 与单点登录（SSO） <a class="header-anchor" href="#_6-oauth2-与单点登录-sso" aria-label="Permalink to &quot;6. OAuth2 与单点登录（SSO）&quot;">​</a></h2><ul><li>Spring Security 支持 OAuth2.0、OpenID Connect</li><li>可作为认证服务器、资源服务器、客户端</li><li>推荐用 spring-boot-starter-oauth2-client/resource-server</li><li>支持第三方登录（微信、GitHub、企业微信等）</li><li>单点登录（SSO）适合多系统统一认证</li></ul><h2 id="_7-csrf-防护" tabindex="-1">7. CSRF 防护 <a class="header-anchor" href="#_7-csrf-防护" aria-label="Permalink to &quot;7. CSRF 防护&quot;">​</a></h2><ul><li>默认开启 CSRF 防护，防止跨站请求伪造</li><li>表单需携带 <code>_csrf</code> token</li><li>API 场景可关闭 CSRF 或自定义防护</li><li>示例：<div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">csrf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">disable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 仅限 API 场景</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul><h2 id="_8-rbac-权限模型" tabindex="-1">8. RBAC 权限模型 <a class="header-anchor" href="#_8-rbac-权限模型" aria-label="Permalink to &quot;8. RBAC 权限模型&quot;">​</a></h2><ul><li>基于角色的访问控制（Role-Based Access Control）</li><li>配置角色、权限、菜单</li><li>方法级安全：<code>@PreAuthorize</code>、<code>@Secured</code>、<code>@RolesAllowed</code></li><li>示例：<div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">PreAuthorize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hasRole(&#39;ADMIN&#39;)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> adminOnly</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ul><h2 id="_9-方法级安全与注解" tabindex="-1">9. 方法级安全与注解 <a class="header-anchor" href="#_9-方法级安全与注解" aria-label="Permalink to &quot;9. 方法级安全与注解&quot;">​</a></h2><ul><li>启用方法安全：<code>@EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true)</code></li><li>常用注解：<code>@PreAuthorize</code>、<code>@PostAuthorize</code>、<code>@Secured</code>、<code>@RolesAllowed</code></li></ul><h2 id="_10-加密存储与敏感信息保护" tabindex="-1">10. 加密存储与敏感信息保护 <a class="header-anchor" href="#_10-加密存储与敏感信息保护" aria-label="Permalink to &quot;10. 加密存储与敏感信息保护&quot;">​</a></h2><ul><li>密码、Token、密钥等敏感信息建议加密存储</li><li>配合 Jasypt、KMS、环境变量等</li><li>日志脱敏，防止敏感信息泄露</li></ul><h2 id="_11-常见安全漏洞与防护" tabindex="-1">11. 常见安全漏洞与防护 <a class="header-anchor" href="#_11-常见安全漏洞与防护" aria-label="Permalink to &quot;11. 常见安全漏洞与防护&quot;">​</a></h2><ul><li><strong>XSS</strong>：前端输出转义，后端过滤输入</li><li><strong>CSRF</strong>：开启 CSRF 防护，Token 校验</li><li><strong>SQL 注入</strong>：使用预编译 SQL、MyBatis/JPA 参数绑定</li><li><strong>暴力破解</strong>：登录限流、验证码、IP 黑名单</li><li><strong>会话劫持</strong>：HTTPS、Cookie HttpOnly/Secure</li><li><strong>敏感信息泄露</strong>：配置脱敏、日志加密</li></ul><h2 id="_12-安全配置与最佳实践" tabindex="-1">12. 安全配置与最佳实践 <a class="header-anchor" href="#_12-安全配置与最佳实践" aria-label="Permalink to &quot;12. 安全配置与最佳实践&quot;">​</a></h2><ul><li>静态资源、登录、注册、验证码等接口放行</li><li>生产环境强制 HTTPS</li><li>密码加密存储，Token 定期刷新</li><li>日志不打印敏感信息</li><li>定期安全扫描与渗透测试</li><li>依赖库及时升级，修复 CVE</li></ul><h2 id="_13-常见问题与排查" tabindex="-1">13. 常见问题与排查 <a class="header-anchor" href="#_13-常见问题与排查" aria-label="Permalink to &quot;13. 常见问题与排查&quot;">​</a></h2><ul><li>登录失败：检查 UserDetailsService、密码加密、认证流程</li><li>权限不足：检查角色、权限配置、注解</li><li>JWT 失效：检查 Token 过期、签名、时钟同步</li><li>跨域失败：检查 CORS 配置、前端请求头</li><li>CSRF 报错：表单/接口是否携带 Token</li></ul><h2 id="_14-faq" tabindex="-1">14. FAQ <a class="header-anchor" href="#_14-faq" aria-label="Permalink to &quot;14. FAQ&quot;">​</a></h2><h3 id="q-spring-security-和-shiro-有什么区别" tabindex="-1">Q: Spring Security 和 Shiro 有什么区别？ <a class="header-anchor" href="#q-spring-security-和-shiro-有什么区别" aria-label="Permalink to &quot;Q: Spring Security 和 Shiro 有什么区别？&quot;">​</a></h3><p>A: Spring Security 功能更全，生态更好，适合企业级项目；Shiro 轻量级，适合中小项目。</p><h3 id="q-如何自定义登录逻辑" tabindex="-1">Q: 如何自定义登录逻辑？ <a class="header-anchor" href="#q-如何自定义登录逻辑" aria-label="Permalink to &quot;Q: 如何自定义登录逻辑？&quot;">​</a></h3><p>A: 实现 UserDetailsService，配置自定义登录页和认证流程。</p><h3 id="q-jwt-如何安全存储" tabindex="-1">Q: JWT 如何安全存储？ <a class="header-anchor" href="#q-jwt-如何安全存储" aria-label="Permalink to &quot;Q: JWT 如何安全存储？&quot;">​</a></h3><p>A: 推荐 HttpOnly Cookie，防止 XSS 窃取。</p><h3 id="q-如何防止接口被刷" tabindex="-1">Q: 如何防止接口被刷？ <a class="header-anchor" href="#q-如何防止接口被刷" aria-label="Permalink to &quot;Q: 如何防止接口被刷？&quot;">​</a></h3><p>A: 配合限流（如 Bucket4j、Sentinel）、验证码、IP 黑名单。</p><hr><blockquote><p>安全无小事，建议结合实际业务场景，充分利用 Spring Security 能力，定期安全加固与审计。</p></blockquote>`,39)]))}const E=s(e,[["render",t]]);export{c as __pageData,E as default};
