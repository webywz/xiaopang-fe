import{_ as a,c as e,o as i,ag as n}from"./chunks/framework.DPDPlp3K.js";const o=JSON.parse('{"title":"WebSocket与Server-Sent Events原理","description":"深入解析WebSocket与SSE的协议原理、浏览器实现与应用场景，助你掌握实时通信技术。","frontmatter":{"layout":"doc","title":"WebSocket与Server-Sent Events原理","description":"深入解析WebSocket与SSE的协议原理、浏览器实现与应用场景，助你掌握实时通信技术。"},"headers":[],"relativePath":"basic/browser/websocket-sse-principles.md","filePath":"basic/browser/websocket-sse-principles.md","lastUpdated":1746781833000}'),t={name:"basic/browser/websocket-sse-principles.md"};function l(r,s,p,h,k,d){return i(),e("div",null,s[0]||(s[0]=[n(`<h1 id="websocket与server-sent-events原理" tabindex="-1">WebSocket与Server-Sent Events原理 <a class="header-anchor" href="#websocket与server-sent-events原理" aria-label="Permalink to &quot;WebSocket与Server-Sent Events原理&quot;">​</a></h1><p>WebSocket与Server-Sent Events（SSE）是现代Web实时通信的两大主流方案。本文将系统讲解两者的协议原理、浏览器实现与应用场景。</p><h2 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;目录&quot;">​</a></h2><ul><li><a href="#websocket协议原理">WebSocket协议原理</a></li><li><a href="#sse协议原理">SSE协议原理</a></li><li><a href="#浏览器实现与api">浏览器实现与API</a></li><li><a href="#应用场景与对比">应用场景与对比</a></li><li><a href="#调试与最佳实践">调试与最佳实践</a></li></ul><h2 id="websocket协议原理" tabindex="-1">WebSocket协议原理 <a class="header-anchor" href="#websocket协议原理" aria-label="Permalink to &quot;WebSocket协议原理&quot;">​</a></h2><ul><li>基于TCP的全双工通信协议，单连接可双向实时收发数据</li><li>握手阶段通过HTTP/1.1升级协议，后续数据帧独立于HTTP</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 创建WebSocket连接</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {string}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> url</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 服务器地址</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@returns</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {WebSocket}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createWebSocket</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WebSocket</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(url);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="sse协议原理" tabindex="-1">SSE协议原理 <a class="header-anchor" href="#sse协议原理" aria-label="Permalink to &quot;SSE协议原理&quot;">​</a></h2><ul><li>基于HTTP的单向服务器推送协议，客户端自动重连</li><li>只支持服务器到客户端的消息流，文本格式</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 创建SSE连接</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {string}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> url</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 服务器地址</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@returns</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {EventSource}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createSSE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EventSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(url);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="浏览器实现与api" tabindex="-1">浏览器实现与API <a class="header-anchor" href="#浏览器实现与api" aria-label="Permalink to &quot;浏览器实现与API&quot;">​</a></h2><ul><li>WebSocket：<code>WebSocket</code>对象，支持二进制、心跳、断线重连需自实现</li><li>SSE：<code>EventSource</code>对象，自动重连，支持自定义事件</li></ul><h2 id="应用场景与对比" tabindex="-1">应用场景与对比 <a class="header-anchor" href="#应用场景与对比" aria-label="Permalink to &quot;应用场景与对比&quot;">​</a></h2><table tabindex="0"><thead><tr><th>特性</th><th>WebSocket</th><th>SSE</th></tr></thead><tbody><tr><td>通信方向</td><td>双向</td><td>单向（服务器推送）</td></tr><tr><td>协议</td><td>独立于HTTP</td><td>基于HTTP</td></tr><tr><td>断线重连</td><td>需自实现</td><td>自动支持</td></tr><tr><td>二进制支持</td><td>支持</td><td>不支持</td></tr><tr><td>浏览器支持</td><td>主流全支持</td><td>IE不支持</td></tr></tbody></table><h2 id="调试与最佳实践" tabindex="-1">调试与最佳实践 <a class="header-anchor" href="#调试与最佳实践" aria-label="Permalink to &quot;调试与最佳实践&quot;">​</a></h2><ul><li>Chrome DevTools &gt; Network面板查看WS/SSE连接</li><li>WebSocket需实现心跳与重连机制</li><li>SSE适合轻量推送、兼容性要求不高场景</li></ul><hr><blockquote><p>参考资料：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket" target="_blank" rel="noreferrer">MDN WebSocket</a> | <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Server-sent_events" target="_blank" rel="noreferrer">MDN SSE</a></p></blockquote>`,18)]))}const b=a(t,[["render",l]]);export{o as __pageData,b as default};
