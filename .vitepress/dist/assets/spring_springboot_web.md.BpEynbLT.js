import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.DPDPlp3K.js";const o=JSON.parse('{"title":"Web开发","description":"","frontmatter":{"title":"Web开发"},"headers":[],"relativePath":"spring/springboot/web.md","filePath":"spring/springboot/web.md","lastUpdated":1747111449000}'),e={name:"spring/springboot/web.md"};function t(h,s,p,r,k,d){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="web开发" tabindex="-1">Web开发 <a class="header-anchor" href="#web开发" aria-label="Permalink to &quot;Web开发&quot;">​</a></h1><p>SpringBoot 提供了极为便捷的 Web 应用开发体验，支持 RESTful API、MVC、静态资源、文件上传、拦截器等全套能力，适合企业级项目。</p><h2 id="_1-controller-设计与-restful-规范" tabindex="-1">1. Controller 设计与 RESTful 规范 <a class="header-anchor" href="#_1-controller-设计与-restful-规范" aria-label="Permalink to &quot;1. Controller 设计与 RESTful 规范&quot;">​</a></h2><h3 id="_1-1-controller-基本用法" tabindex="-1">1.1 Controller 基本用法 <a class="header-anchor" href="#_1-1-controller-基本用法" aria-label="Permalink to &quot;1.1 Controller 基本用法&quot;">​</a></h3><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RestController</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RequestMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/api&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HelloController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GetMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello, SpringBoot!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="_1-2-restful-设计规范" tabindex="-1">1.2 RESTful 设计规范 <a class="header-anchor" href="#_1-2-restful-设计规范" aria-label="Permalink to &quot;1.2 RESTful 设计规范&quot;">​</a></h3><ul><li>路径用名词，资源层级用斜杠分隔，如 <code>/api/users/1/orders</code></li><li>GET 查询、POST 新增、PUT 更新、DELETE 删除</li><li>状态码语义化：200 成功、201 新建、204 无内容、400 参数错误、401 未授权、403 禁止、404 未找到、500 服务器错误</li><li>推荐统一响应结构（如 code、msg、data）</li></ul><h3 id="_1-3-参数校验" tabindex="-1">1.3 参数校验 <a class="header-anchor" href="#_1-3-参数校验" aria-label="Permalink to &quot;1.3 参数校验&quot;">​</a></h3><ul><li>使用 <code>@Valid</code>、<code>@Validated</code> 注解，结合 JSR-303/JSR-380</li><li>常用注解：<code>@NotNull</code>、<code>@Size</code>、<code>@Email</code>、<code>@Pattern</code></li><li>示例：<div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserDTO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NotNull</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String username;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Email</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String email;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">PostMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Result </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Valid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RequestBody</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UserDTO user) { ... }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li></ul><h3 id="_1-4-路由与参数绑定" tabindex="-1">1.4 路由与参数绑定 <a class="header-anchor" href="#_1-4-路由与参数绑定" aria-label="Permalink to &quot;1.4 路由与参数绑定&quot;">​</a></h3><ul><li><code>@RequestParam</code>：请求参数</li><li><code>@PathVariable</code>：路径参数</li><li><code>@RequestBody</code>：JSON 请求体</li><li><code>@RequestHeader</code>：请求头</li><li><code>@CookieValue</code>：Cookie</li></ul><h3 id="_1-5-分页与排序" tabindex="-1">1.5 分页与排序 <a class="header-anchor" href="#_1-5-分页与排序" aria-label="Permalink to &quot;1.5 分页与排序&quot;">​</a></h3><ul><li>推荐 PageHelper、Spring Data Pageable</li><li>示例：<div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GetMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/users&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Page</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">User</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RequestParam</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> page, @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RequestParam</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> size) { ... }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ul><h2 id="_2-请求与响应进阶" tabindex="-1">2. 请求与响应进阶 <a class="header-anchor" href="#_2-请求与响应进阶" aria-label="Permalink to &quot;2. 请求与响应进阶&quot;">​</a></h2><h3 id="_2-1-自定义请求头、响应头" tabindex="-1">2.1 自定义请求头、响应头 <a class="header-anchor" href="#_2-1-自定义请求头、响应头" aria-label="Permalink to &quot;2.1 自定义请求头、响应头&quot;">​</a></h3><ul><li>通过 <code>@RequestHeader</code> 获取，<code>ResponseEntity</code> 设置</li></ul><h3 id="_2-2-文件下载、流式响应" tabindex="-1">2.2 文件下载、流式响应 <a class="header-anchor" href="#_2-2-文件下载、流式响应" aria-label="Permalink to &quot;2.2 文件下载、流式响应&quot;">​</a></h3><ul><li>返回 <code>ResponseEntity&lt;Resource&gt;</code>，设置 Content-Disposition</li><li>支持大文件分片下载、断点续传</li></ul><h3 id="_2-3-统一响应结构" tabindex="-1">2.3 统一响应结构 <a class="header-anchor" href="#_2-3-统一响应结构" aria-label="Permalink to &quot;2.3 统一响应结构&quot;">​</a></h3><ul><li>推荐封装 Result/ApiResponse 类，统一 code/msg/data</li><li>示例：<div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> code;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String msg;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> T data;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // getter/setter</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li></ul><h2 id="_3-全局异常处理" tabindex="-1">3. 全局异常处理 <a class="header-anchor" href="#_3-全局异常处理" aria-label="Permalink to &quot;3. 全局异常处理&quot;">​</a></h2><h3 id="_3-1-controlleradvice-exceptionhandler" tabindex="-1">3.1 @ControllerAdvice + @ExceptionHandler <a class="header-anchor" href="#_3-1-controlleradvice-exceptionhandler" aria-label="Permalink to &quot;3.1 @ControllerAdvice + @ExceptionHandler&quot;">​</a></h3><ul><li>捕获所有 Controller 层异常，返回统一结构</li><li>支持自定义异常类、业务异常码</li><li>示例：<div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ControllerAdvice</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GlobalExceptionHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ExceptionHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(BizException.class)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Result </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">handleBiz</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(BizException </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Result.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fail</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ex.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getCode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), ex.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ExceptionHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Exception.class)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Result </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">handle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Exception </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Result.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fail</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ex.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></li></ul><h3 id="_3-2-常见异常类型" tabindex="-1">3.2 常见异常类型 <a class="header-anchor" href="#_3-2-常见异常类型" aria-label="Permalink to &quot;3.2 常见异常类型&quot;">​</a></h3><ul><li>参数校验异常（MethodArgumentNotValidException）</li><li>业务异常（自定义 BizException）</li><li>404/405/500 等全局异常</li></ul><h2 id="_4-静态资源管理" tabindex="-1">4. 静态资源管理 <a class="header-anchor" href="#_4-静态资源管理" aria-label="Permalink to &quot;4. 静态资源管理&quot;">​</a></h2><ul><li>默认静态资源目录：<code>src/main/resources/static/</code></li><li>访问 <code>/static/logo.png</code> 可通过 <code>/logo.png</code> 直接访问</li><li>支持自定义静态资源路径、缓存策略、CDN 加速</li><li>推荐前后端分离，静态资源独立部署</li></ul><h2 id="_5-拦截器与过滤器" tabindex="-1">5. 拦截器与过滤器 <a class="header-anchor" href="#_5-拦截器与过滤器" aria-label="Permalink to &quot;5. 拦截器与过滤器&quot;">​</a></h2><h3 id="_5-1-拦截器-handlerinterceptor" tabindex="-1">5.1 拦截器（HandlerInterceptor） <a class="header-anchor" href="#_5-1-拦截器-handlerinterceptor" aria-label="Permalink to &quot;5.1 拦截器（HandlerInterceptor）&quot;">​</a></h3><ul><li>用于登录校验、权限控制、日志埋点、接口限流</li><li>注册到 WebMvcConfigurer</li><li>支持 preHandle、postHandle、afterCompletion</li></ul><h3 id="_5-2-过滤器-filter" tabindex="-1">5.2 过滤器（Filter） <a class="header-anchor" href="#_5-2-过滤器-filter" aria-label="Permalink to &quot;5.2 过滤器（Filter）&quot;">​</a></h3><ul><li>用于请求预处理、XSS 防护、全局日志</li><li>注册为 Bean 或 @WebFilter</li></ul><h3 id="_5-3-示例" tabindex="-1">5.3 示例 <a class="header-anchor" href="#_5-3-示例" aria-label="Permalink to &quot;5.3 示例&quot;">​</a></h3><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AuthInterceptor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HandlerInterceptor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> boolean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> preHandle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpServletRequest </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, HttpServletResponse </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Object </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">handler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Configuration</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WebConfig</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WebMvcConfigurer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> addInterceptors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(InterceptorRegistry </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">registry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        registry.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addInterceptor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AuthInterceptor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addPathPatterns</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/api/**&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="_6-跨域资源共享-cors" tabindex="-1">6. 跨域资源共享（CORS） <a class="header-anchor" href="#_6-跨域资源共享-cors" aria-label="Permalink to &quot;6. 跨域资源共享（CORS）&quot;">​</a></h2><ul><li>支持全局/局部跨域配置</li><li>推荐用 WebMvcConfigurer 配置全局 CORS</li><li>支持指定域名、方法、头部、凭证</li><li>示例：<div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Configuration</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CorsConfig</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WebMvcConfigurer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> addCorsMappings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CorsRegistry </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">registry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        registry.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/**&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">allowedOrigins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://yourdomain.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">allowedMethods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;GET&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;POST&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;PUT&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;DELETE&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">allowCredentials</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></li></ul><h2 id="_7-文件上传与下载" tabindex="-1">7. 文件上传与下载 <a class="header-anchor" href="#_7-文件上传与下载" aria-label="Permalink to &quot;7. 文件上传与下载&quot;">​</a></h2><h3 id="_7-1-文件上传" tabindex="-1">7.1 文件上传 <a class="header-anchor" href="#_7-1-文件上传" aria-label="Permalink to &quot;7.1 文件上传&quot;">​</a></h3><ul><li>依赖 <code>spring-boot-starter-web</code></li><li>配置最大文件大小：<code>spring.servlet.multipart.max-file-size=10MB</code></li><li>Controller 方法参数用 <code>MultipartFile</code></li><li>支持多文件上传、断点续传、分片上传</li><li>示例：<div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">PostMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/upload&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Result </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">upload</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RequestParam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;file&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) MultipartFile file) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Result.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">success</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li></ul><h3 id="_7-2-文件下载" tabindex="-1">7.2 文件下载 <a class="header-anchor" href="#_7-2-文件下载" aria-label="Permalink to &quot;7.2 文件下载&quot;">​</a></h3><ul><li>返回 <code>ResponseEntity&lt;Resource&gt;</code>，设置 Content-Disposition</li><li>支持大文件分片下载</li></ul><h2 id="_8-接口幂等性" tabindex="-1">8. 接口幂等性 <a class="header-anchor" href="#_8-接口幂等性" aria-label="Permalink to &quot;8. 接口幂等性&quot;">​</a></h2><ul><li>幂等 Token、唯一索引、状态机</li><li>防止重复提交、支付、下单</li><li>推荐用拦截器+Redis 实现</li></ul><h2 id="_9-接口文档与自动化测试" tabindex="-1">9. 接口文档与自动化测试 <a class="header-anchor" href="#_9-接口文档与自动化测试" aria-label="Permalink to &quot;9. 接口文档与自动化测试&quot;">​</a></h2><ul><li>推荐 Swagger（springfox-swagger2、springdoc-openapi）</li><li>自动生成接口文档、支持在线调试</li><li>示例：<div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ApiOperation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;创建用户&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">PostMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Result </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RequestBody</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UserDTO user) { ... }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li>推荐 Postman、RestAssured 做接口自动化测试</li></ul><h2 id="_10-接口安全" tabindex="-1">10. 接口安全 <a class="header-anchor" href="#_10-接口安全" aria-label="Permalink to &quot;10. 接口安全&quot;">​</a></h2><ul><li>JWT 认证、RBAC 权限、接口签名、限流、验证码</li><li>防止 XSS、CSRF、SQL 注入</li><li>HTTPS 强制、敏感信息脱敏</li><li>日志审计、异常报警</li></ul><h2 id="_11-性能优化" tabindex="-1">11. 性能优化 <a class="header-anchor" href="#_11-性能优化" aria-label="Permalink to &quot;11. 性能优化&quot;">​</a></h2><ul><li>GZIP 压缩、缓存控制、CDN 加速</li><li>异步处理（@Async）、线程池、消息队列</li><li>数据库分页、懒加载、批量操作</li><li>慢查询分析、接口监控（Actuator、Prometheus）</li></ul><h2 id="_12-常见问题与排查" tabindex="-1">12. 常见问题与排查 <a class="header-anchor" href="#_12-常见问题与排查" aria-label="Permalink to &quot;12. 常见问题与排查&quot;">​</a></h2><ul><li>404/405：检查路由、HTTP 方法、静态资源路径</li><li>参数绑定失败：检查注解、类型、JSON 格式</li><li>跨域失败：检查 CORS 配置、前端请求头</li><li>文件上传失败：检查依赖、配置、前端表单</li><li>响应慢：排查数据库、网络、代码性能</li></ul><h2 id="_13-最佳实践" tabindex="-1">13. 最佳实践 <a class="header-anchor" href="#_13-最佳实践" aria-label="Permalink to &quot;13. 最佳实践&quot;">​</a></h2><ul><li>路由统一加前缀，便于管理</li><li>Controller 层只做参数校验和分发，业务逻辑下沉到 Service</li><li>异常统一处理，返回结构标准化</li><li>静态资源与接口分离，便于前后端协作</li><li>接口文档自动生成，便于前后端联调</li><li>安全、性能、监控全流程覆盖</li></ul><h2 id="_14-faq" tabindex="-1">14. FAQ <a class="header-anchor" href="#_14-faq" aria-label="Permalink to &quot;14. FAQ&quot;">​</a></h2><h3 id="q-如何自定义-404-500-错误页面" tabindex="-1">Q: 如何自定义 404/500 错误页面？ <a class="header-anchor" href="#q-如何自定义-404-500-错误页面" aria-label="Permalink to &quot;Q: 如何自定义 404/500 错误页面？&quot;">​</a></h3><p>A: 在 <code>resources/public</code> 目录下放置 <code>error/404.html</code>、<code>error/500.html</code> 即可。</p><h3 id="q-如何实现接口版本管理" tabindex="-1">Q: 如何实现接口版本管理？ <a class="header-anchor" href="#q-如何实现接口版本管理" aria-label="Permalink to &quot;Q: 如何实现接口版本管理？&quot;">​</a></h3><p>A: 路由加版本前缀，如 <code>/api/v1/user</code>，或用自定义注解实现。</p><h3 id="q-如何保证接口幂等性" tabindex="-1">Q: 如何保证接口幂等性？ <a class="header-anchor" href="#q-如何保证接口幂等性" aria-label="Permalink to &quot;Q: 如何保证接口幂等性？&quot;">​</a></h3><p>A: 推荐用幂等 Token、唯一索引、状态机，结合 Redis/数据库实现。</p><h3 id="q-如何自动生成接口文档" tabindex="-1">Q: 如何自动生成接口文档？ <a class="header-anchor" href="#q-如何自动生成接口文档" aria-label="Permalink to &quot;Q: 如何自动生成接口文档？&quot;">​</a></h3><p>A: 推荐集成 Swagger/OpenAPI，注解生成文档，支持在线调试。</p><h3 id="q-如何防止接口被刷" tabindex="-1">Q: 如何防止接口被刷？ <a class="header-anchor" href="#q-如何防止接口被刷" aria-label="Permalink to &quot;Q: 如何防止接口被刷？&quot;">​</a></h3><p>A: 配合限流（如 Bucket4j、Sentinel）、验证码、IP 黑名单。</p><hr><blockquote><p>SpringBoot Web 开发能力强大，建议结合实际项目多实践，善用全局异常、拦截器、接口文档和安全手段，提升健壮性与可维护性。</p></blockquote>`,66)]))}const c=i(e,[["render",t]]);export{o as __pageData,c as default};
