import{_ as a,c as i,o as n,ag as l}from"./chunks/framework.DPDPlp3K.js";const c=JSON.parse('{"title":"浏览器中的内存管理与垃圾回收","description":"深入解析浏览器内存管理、垃圾回收机制与常见内存泄漏，助你编写高效可靠的前端代码。","frontmatter":{"layout":"doc","title":"浏览器中的内存管理与垃圾回收","description":"深入解析浏览器内存管理、垃圾回收机制与常见内存泄漏，助你编写高效可靠的前端代码。"},"headers":[],"relativePath":"basic/browser/browser-memory-management.md","filePath":"basic/browser/browser-memory-management.md","lastUpdated":1746781833000}'),e={name:"basic/browser/browser-memory-management.md"};function p(t,s,h,r,k,d){return n(),i("div",null,s[0]||(s[0]=[l(`<h1 id="浏览器中的内存管理与垃圾回收" tabindex="-1">浏览器中的内存管理与垃圾回收 <a class="header-anchor" href="#浏览器中的内存管理与垃圾回收" aria-label="Permalink to &quot;浏览器中的内存管理与垃圾回收&quot;">​</a></h1><p>内存管理与垃圾回收是保障Web应用性能与稳定性的基础。本文将系统讲解浏览器的内存分配、回收机制与常见内存泄漏问题。</p><h2 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;目录&quot;">​</a></h2><ul><li><a href="#浏览器内存管理概述">浏览器内存管理概述</a></li><li><a href="#垃圾回收机制原理">垃圾回收机制原理</a></li><li><a href="#常见内存泄漏场景">常见内存泄漏场景</a></li><li><a href="#内存优化与调试技巧">内存优化与调试技巧</a></li></ul><h2 id="浏览器内存管理概述" tabindex="-1">浏览器内存管理概述 <a class="header-anchor" href="#浏览器内存管理概述" aria-label="Permalink to &quot;浏览器内存管理概述&quot;">​</a></h2><ul><li>JS引擎自动分配与回收内存（自动垃圾回收）</li><li>堆（Heap）用于对象、数组等动态分配，栈（Stack）用于基本类型与函数调用</li></ul><h2 id="垃圾回收机制原理" tabindex="-1">垃圾回收机制原理 <a class="header-anchor" href="#垃圾回收机制原理" aria-label="Permalink to &quot;垃圾回收机制原理&quot;">​</a></h2><ul><li><strong>标记-清除（Mark-Sweep）</strong>：标记可达对象，清除不可达对象</li><li><strong>引用计数</strong>：统计对象被引用次数，引用为0时回收</li><li><strong>分代回收</strong>：新生代（Scavenge）、老生代（Mark-Sweep/Mark-Compact）</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 模拟标记-清除GC流程</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {Object[]}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> objects</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 所有对象</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {Object}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> root</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 根对象</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> markAndSweep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">objects</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">root</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 1. 标记所有可达对象</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 2. 清除未标记对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="常见内存泄漏场景" tabindex="-1">常见内存泄漏场景 <a class="header-anchor" href="#常见内存泄漏场景" aria-label="Permalink to &quot;常见内存泄漏场景&quot;">​</a></h2><ul><li>全局变量、闭包未释放</li><li>DOM引用未解除</li><li>定时器/事件监听未清理</li><li>缓存过大、未及时清理</li></ul><h2 id="内存优化与调试技巧" tabindex="-1">内存优化与调试技巧 <a class="header-anchor" href="#内存优化与调试技巧" aria-label="Permalink to &quot;内存优化与调试技巧&quot;">​</a></h2><ul><li>避免无用全局变量，及时释放引用</li><li>组件卸载时清理定时器、事件</li><li>使用Chrome DevTools Memory面板分析内存快照、查找泄漏</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 释放事件监听，防止内存泄漏</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {HTMLElement}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> el</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 元素</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {string}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> type</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 事件类型</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {Function}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> handler</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 事件处理函数</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> removeListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">el</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">handler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  el.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">removeEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type, handler);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><hr><blockquote><p>参考资料：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Memory_Management" target="_blank" rel="noreferrer">MDN 垃圾回收</a></p></blockquote>`,16)]))}const g=a(e,[["render",p]]);export{c as __pageData,g as default};
