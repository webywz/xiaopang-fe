import{_ as i,c as a,o as l,ag as n}from"./chunks/framework.DPDPlp3K.js";const E=JSON.parse('{"title":"Gas 优化","description":"","frontmatter":{"title":"Gas 优化"},"headers":[],"relativePath":"solidity/gas-optimization.md","filePath":"solidity/gas-optimization.md","lastUpdated":1747119657000}'),e={name:"solidity/gas-optimization.md"};function t(h,s,r,p,k,d){return l(),a("div",null,s[0]||(s[0]=[n(`<h1 id="gas-优化" tabindex="-1">Gas 优化 <a class="header-anchor" href="#gas-优化" aria-label="Permalink to &quot;Gas 优化&quot;">​</a></h1><p>Solidity合约部署和调用时会消耗Gas，Gas优化不仅能节省成本，还能提升合约性能和用户体验。</p><h2 id="_1-gas消耗原理与计费机制" tabindex="-1">1. Gas消耗原理与计费机制 <a class="header-anchor" href="#_1-gas消耗原理与计费机制" aria-label="Permalink to &quot;1. Gas消耗原理与计费机制&quot;">​</a></h2><ul><li>每条EVM指令、存储操作、合约部署等都会消耗不同数量的Gas。</li><li>主要消耗来源：存储（SSTORE）、外部调用、循环、事件日志等。</li><li>Gas价格由网络拥堵和矿工设定，直接影响交易费用。</li></ul><h2 id="_2-常见gas优化技巧" tabindex="-1">2. 常见Gas优化技巧 <a class="header-anchor" href="#_2-常见gas优化技巧" aria-label="Permalink to &quot;2. 常见Gas优化技巧&quot;">​</a></h2><h3 id="_2-1-存储布局优化" tabindex="-1">2.1 存储布局优化 <a class="header-anchor" href="#_2-1-存储布局优化" aria-label="Permalink to &quot;2.1 存储布局优化&quot;">​</a></h3><ul><li>尽量将同类型、位宽较小的变量打包，减少存储槽占用。</li><li>优先使用uint256，避免类型转换带来的额外消耗。</li></ul><h3 id="_2-2-循环与批量操作" tabindex="-1">2.2 循环与批量操作 <a class="header-anchor" href="#_2-2-循环与批量操作" aria-label="Permalink to &quot;2.2 循环与批量操作&quot;">​</a></h3><ul><li>避免在链上大循环，推荐分批处理或链下批量。</li><li>尽量减少循环体内的SSTORE、外部调用等高消耗操作。</li></ul><h3 id="_2-3-事件与日志" tabindex="-1">2.3 事件与日志 <a class="header-anchor" href="#_2-3-事件与日志" aria-label="Permalink to &quot;2.3 事件与日志&quot;">​</a></h3><ul><li>只记录必要信息，避免事件参数过多。</li><li>使用indexed关键字提升检索效率。</li></ul><h3 id="_2-4-常量与不可变变量" tabindex="-1">2.4 常量与不可变变量 <a class="header-anchor" href="#_2-4-常量与不可变变量" aria-label="Permalink to &quot;2.4 常量与不可变变量&quot;">​</a></h3><ul><li>用<code>constant</code>和<code>immutable</code>修饰符声明不会变的变量，节省存储和访问成本。</li></ul><h3 id="_2-5-函数可见性与修饰符" tabindex="-1">2.5 函数可见性与修饰符 <a class="header-anchor" href="#_2-5-函数可见性与修饰符" aria-label="Permalink to &quot;2.5 函数可见性与修饰符&quot;">​</a></h3><ul><li>明确函数可见性（external、public、internal、private），external比public更省Gas。</li><li>合理使用view/pure修饰符，节省调用成本。</li></ul><h3 id="_2-6-短路求值与条件判断" tabindex="-1">2.6 短路求值与条件判断 <a class="header-anchor" href="#_2-6-短路求值与条件判断" aria-label="Permalink to &quot;2.6 短路求值与条件判断&quot;">​</a></h3><ul><li>利用<code>&amp;&amp;</code>、<code>||</code>的短路特性，减少不必要的计算。</li><li>优化require顺序，将最可能失败的条件放前面。</li></ul><h3 id="_2-7-其他技巧" tabindex="-1">2.7 其他技巧 <a class="header-anchor" href="#_2-7-其他技巧" aria-label="Permalink to &quot;2.7 其他技巧&quot;">​</a></h3><ul><li>避免动态数组频繁扩容。</li><li>使用内存变量替代存储变量做中间计算。</li><li>合理拆分合约，减少单合约复杂度。</li></ul><h2 id="_3-优化前后对比代码" tabindex="-1">3. 优化前后对比代码 <a class="header-anchor" href="#_3-优化前后对比代码" aria-label="Permalink to &quot;3. 优化前后对比代码&quot;">​</a></h2><div class="language-solidity vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 优化前：每次循环都写入存储</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> users.length; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  users[i].balance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 优化后：用内存变量批量处理，最后一次性写回</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">User[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">memory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> memUsers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> users;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> memUsers.length; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  memUsers[i].balance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">users </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> memUsers;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="常量与不可变变量示例" tabindex="-1">常量与不可变变量示例 <a class="header-anchor" href="#常量与不可变变量示例" aria-label="Permalink to &quot;常量与不可变变量示例&quot;">​</a></h3><div class="language-solidity vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uint</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fee </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ether</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 非常量</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uint</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> constant</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FEE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ether</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 常量，节省Gas</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="_4-工具与检测方法" tabindex="-1">4. 工具与检测方法 <a class="header-anchor" href="#_4-工具与检测方法" aria-label="Permalink to &quot;4. 工具与检测方法&quot;">​</a></h2><ul><li><a href="https://github.com/cgewecke/eth-gas-reporter" target="_blank" rel="noreferrer">eth-gas-reporter</a>：测试时统计各函数Gas消耗。</li><li><a href="https://github.com/sc-forks/solidity-coverage" target="_blank" rel="noreferrer">Solidity Coverage</a>：测试覆盖率与Gas分析。</li><li>Remix IDE、Hardhat等也可直接查看Gas消耗。</li></ul><h2 id="_5-最佳实践与常见问题" tabindex="-1">5. 最佳实践与常见问题 <a class="header-anchor" href="#_5-最佳实践与常见问题" aria-label="Permalink to &quot;5. 最佳实践与常见问题&quot;">​</a></h2><ul><li><strong>避免链上大循环</strong>，推荐链下批量或分批处理。</li><li><strong>所有变量类型优先用uint256</strong>，减少类型转换。</li><li><strong>频繁操作的变量优先用内存变量</strong>，最后一次性写回存储。</li><li><strong>事件参数只保留必要信息</strong>，避免Gas浪费。</li><li><strong>定期用工具检测合约各函数Gas消耗</strong>，持续优化。</li><li><strong>部署前多次测试，关注主网实际Gas表现</strong>。</li></ul><hr><p>如需深入了解Gas优化的高级技巧，可参考官方文档或本教程后续章节。</p>`,29)]))}const c=i(e,[["render",t]]);export{E as __pageData,c as default};
