import{_ as i,c as s,o as l,ag as e}from"./chunks/framework.DPDPlp3K.js";const k=JSON.parse('{"title":"Spring WebFlux 详解","description":"","frontmatter":{"title":"Spring WebFlux 详解"},"headers":[],"relativePath":"spring/spring-webflux.md","filePath":"spring/spring-webflux.md","lastUpdated":1747111449000}'),n={name:"spring/spring-webflux.md"};function t(r,a,h,p,o,u){return l(),s("div",null,a[0]||(a[0]=[e(`<h1 id="spring-webflux-详解" tabindex="-1">Spring WebFlux 详解 <a class="header-anchor" href="#spring-webflux-详解" aria-label="Permalink to &quot;Spring WebFlux 详解&quot;">​</a></h1><hr><h2 id="_1-响应式编程与spring-webflux生态全景" tabindex="-1">1. 响应式编程与Spring WebFlux生态全景 <a class="header-anchor" href="#_1-响应式编程与spring-webflux生态全景" aria-label="Permalink to &quot;1. 响应式编程与Spring WebFlux生态全景&quot;">​</a></h2><h3 id="_1-1-响应式编程核心思想" tabindex="-1">1.1 响应式编程核心思想 <a class="header-anchor" href="#_1-1-响应式编程核心思想" aria-label="Permalink to &quot;1.1 响应式编程核心思想&quot;">​</a></h3><ul><li>非阻塞、事件驱动、背压、异步流</li><li>适合高并发、IO密集型、微服务、Serverless</li></ul><h3 id="_1-2-spring-webflux-生态组件" tabindex="-1">1.2 Spring WebFlux 生态组件 <a class="header-anchor" href="#_1-2-spring-webflux-生态组件" aria-label="Permalink to &quot;1.2 Spring WebFlux 生态组件&quot;">​</a></h3><ul><li>Reactor（Mono、Flux）、WebHandler、RouterFunction、HandlerFunction、WebFilter</li><li>注解式/函数式编程模型、WebClient、Data、Security、Actuator</li></ul><h3 id="_1-3-架构图" tabindex="-1">1.3 架构图 <a class="header-anchor" href="#_1-3-架构图" aria-label="Permalink to &quot;1.3 架构图&quot;">​</a></h3><div class="language-mermaid vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">graph TD</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    A[Client] --&gt; B[Netty/Servlet]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B --&gt; C[WebHandler]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    C --&gt; D[RouterFunction/HandlerFunction]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    D --&gt; E[Service]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    C --&gt; F[WebFilter]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    C --&gt; G[ExceptionHandler]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><hr><h2 id="_2-核心原理与源码极致细化" tabindex="-1">2. 核心原理与源码极致细化 <a class="header-anchor" href="#_2-核心原理与源码极致细化" aria-label="Permalink to &quot;2. 核心原理与源码极致细化&quot;">​</a></h2><h3 id="_2-1-reactor-mono-flux原理" tabindex="-1">2.1 Reactor/Mono/Flux原理 <a class="header-anchor" href="#_2-1-reactor-mono-flux原理" aria-label="Permalink to &quot;2.1 Reactor/Mono/Flux原理&quot;">​</a></h3><ul><li>Mono：0-1个元素的异步流</li><li>Flux：0-N个元素的异步流</li><li>支持背压、链式操作、调度器切换</li></ul><h3 id="_2-2-webhandler-routerfunction-handlerfunction" tabindex="-1">2.2 WebHandler/RouterFunction/HandlerFunction <a class="header-anchor" href="#_2-2-webhandler-routerfunction-handlerfunction" aria-label="Permalink to &quot;2.2 WebHandler/RouterFunction/HandlerFunction&quot;">​</a></h3><ul><li>WebHandler：请求入口，分发到Router/Handler</li><li>RouterFunction：函数式路由，支持条件、分组</li><li>HandlerFunction：处理请求，返回Mono/Flux</li></ul><h3 id="_2-3-webfilter-exceptionhandler" tabindex="-1">2.3 WebFilter/ExceptionHandler <a class="header-anchor" href="#_2-3-webfilter-exceptionhandler" aria-label="Permalink to &quot;2.3 WebFilter/ExceptionHandler&quot;">​</a></h3><ul><li>WebFilter：全局过滤器，支持安全、日志、限流</li><li>ExceptionHandler：全局异常处理，返回响应式结果</li></ul><h3 id="_2-4-源码与时序图" tabindex="-1">2.4 源码与时序图 <a class="header-anchor" href="#_2-4-源码与时序图" aria-label="Permalink to &quot;2.4 源码与时序图&quot;">​</a></h3><div class="language-mermaid vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sequenceDiagram</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    participant Client</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    participant Netty</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    participant WebHandler</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    participant RouterFunction</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    participant HandlerFunction</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Client-&gt;&gt;Netty: HTTP请求</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Netty-&gt;&gt;WebHandler: 事件分发</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    WebHandler-&gt;&gt;RouterFunction: 路由匹配</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    RouterFunction-&gt;&gt;HandlerFunction: 处理请求</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    HandlerFunction--&gt;&gt;WebHandler: Mono/Flux结果</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    WebHandler--&gt;&gt;Netty: 响应</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Netty--&gt;&gt;Client: 响应</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><ul><li>核心源码：DispatcherHandler、DefaultWebFilterChain、AnnotatedControllerEndpoint</li></ul><hr><h2 id="_3-注解式与函数式编程模型极致细化" tabindex="-1">3. 注解式与函数式编程模型极致细化 <a class="header-anchor" href="#_3-注解式与函数式编程模型极致细化" aria-label="Permalink to &quot;3. 注解式与函数式编程模型极致细化&quot;">​</a></h2><h3 id="_3-1-注解式模型" tabindex="-1">3.1 注解式模型 <a class="header-anchor" href="#_3-1-注解式模型" aria-label="Permalink to &quot;3.1 注解式模型&quot;">​</a></h3><ul><li>@RestController、@RequestMapping、@GetMapping、@PostMapping</li><li>支持参数绑定、校验、响应式返回值</li></ul><h3 id="_3-2-函数式模型" tabindex="-1">3.2 函数式模型 <a class="header-anchor" href="#_3-2-函数式模型" aria-label="Permalink to &quot;3.2 函数式模型&quot;">​</a></h3><ul><li>RouterFunction、HandlerFunction、Router DSL</li><li>支持条件路由、分组、嵌套路由</li></ul><h3 id="_3-3-对比与实战" tabindex="-1">3.3 对比与实战 <a class="header-anchor" href="#_3-3-对比与实战" aria-label="Permalink to &quot;3.3 对比与实战&quot;">​</a></h3><ul><li>注解式适合传统开发，函数式适合响应式流、灵活编排</li><li>实战：</li></ul><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 注解式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RestController</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GetMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/user/{id}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Mono&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">PathVariable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Long </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { ... }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 函数式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RouterFunction</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ServerResponse</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> userRouter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(UserHandler handler) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RouterFunctions.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/user/{id}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, handler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">getUser)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><hr><h2 id="_4-数据流、背压、调度器、性能极致细化" tabindex="-1">4. 数据流、背压、调度器、性能极致细化 <a class="header-anchor" href="#_4-数据流、背压、调度器、性能极致细化" aria-label="Permalink to &quot;4. 数据流、背压、调度器、性能极致细化&quot;">​</a></h2><h3 id="_4-1-数据流与背压" tabindex="-1">4.1 数据流与背压 <a class="header-anchor" href="#_4-1-数据流与背压" aria-label="Permalink to &quot;4.1 数据流与背压&quot;">​</a></h3><ul><li>支持Publisher/Subscriber、Request-N协议、背压策略</li><li>Flux/Mono支持onBackpressureBuffer、onBackpressureDrop</li></ul><h3 id="_4-2-调度器与线程模型" tabindex="-1">4.2 调度器与线程模型 <a class="header-anchor" href="#_4-2-调度器与线程模型" aria-label="Permalink to &quot;4.2 调度器与线程模型&quot;">​</a></h3><ul><li>Schedulers.immediate/elastic/boundedElastic/parallel</li><li>线程切换：publishOn/subscribeOn</li></ul><h3 id="_4-3-性能调优" tabindex="-1">4.3 性能调优 <a class="header-anchor" href="#_4-3-性能调优" aria-label="Permalink to &quot;4.3 性能调优&quot;">​</a></h3><ul><li>连接池、批量处理、内存溢出防护、监控</li><li>监控：Micrometer、Prometheus、Actuator</li></ul><hr><h2 id="_5-webclient、文件上传下载、流式传输极致细化" tabindex="-1">5. WebClient、文件上传下载、流式传输极致细化 <a class="header-anchor" href="#_5-webclient、文件上传下载、流式传输极致细化" aria-label="Permalink to &quot;5. WebClient、文件上传下载、流式传输极致细化&quot;">​</a></h2><h3 id="_5-1-webclient" tabindex="-1">5.1 WebClient <a class="header-anchor" href="#_5-1-webclient" aria-label="Permalink to &quot;5.1 WebClient&quot;">​</a></h3><ul><li>替代RestTemplate，支持异步、流式、链式调用</li><li>支持请求/响应拦截、重试、超时、限流</li><li>配置：WebClient.builder().baseUrl(...).build()</li></ul><h3 id="_5-2-文件上传下载" tabindex="-1">5.2 文件上传下载 <a class="header-anchor" href="#_5-2-文件上传下载" aria-label="Permalink to &quot;5.2 文件上传下载&quot;">​</a></h3><ul><li>支持多文件、分片、流式上传下载</li><li>实战：</li></ul><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">PostMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/upload&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Mono</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> upload</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RequestPart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;file&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) FilePart file) { ... }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_5-3-流式传输" tabindex="-1">5.3 流式传输 <a class="header-anchor" href="#_5-3-流式传输" aria-label="Permalink to &quot;5.3 流式传输&quot;">​</a></h3><ul><li>SSE、WebSocket、Server-Sent Events</li><li>实战：Flux.interval/Flux.generate推送数据流</li></ul><hr><h2 id="_6-全链路安全极致细化" tabindex="-1">6. 全链路安全极致细化 <a class="header-anchor" href="#_6-全链路安全极致细化" aria-label="Permalink to &quot;6. 全链路安全极致细化&quot;">​</a></h2><h3 id="_6-1-认证与授权" tabindex="-1">6.1 认证与授权 <a class="header-anchor" href="#_6-1-认证与授权" aria-label="Permalink to &quot;6.1 认证与授权&quot;">​</a></h3><ul><li>Spring Security集成，支持JWT、OAuth2、SSO</li><li>ReactiveUserDetailsService、ReactiveAuthenticationManager</li></ul><h3 id="_6-2-csrf、cors、xss、限流、签名" tabindex="-1">6.2 CSRF、CORS、XSS、限流、签名 <a class="header-anchor" href="#_6-2-csrf、cors、xss、限流、签名" aria-label="Permalink to &quot;6.2 CSRF、CORS、XSS、限流、签名&quot;">​</a></h3><ul><li>CSRF防护、CORS跨域、XSS过滤、接口签名、IP/用户限流</li><li>配置：SecurityWebFilterChain、CorsWebFilter、RateLimiter</li></ul><h3 id="_6-3-日志与审计" tabindex="-1">6.3 日志与审计 <a class="header-anchor" href="#_6-3-日志与审计" aria-label="Permalink to &quot;6.3 日志与审计&quot;">​</a></h3><ul><li>全链路日志、TraceId、异常告警、日志脱敏</li></ul><hr><h2 id="_7-与spring-boot-security-cloud集成极致细化" tabindex="-1">7. 与Spring Boot/Security/Cloud集成极致细化 <a class="header-anchor" href="#_7-与spring-boot-security-cloud集成极致细化" aria-label="Permalink to &quot;7. 与Spring Boot/Security/Cloud集成极致细化&quot;">​</a></h2><h3 id="_7-1-spring-boot自动装配" tabindex="-1">7.1 Spring Boot自动装配 <a class="header-anchor" href="#_7-1-spring-boot自动装配" aria-label="Permalink to &quot;7.1 Spring Boot自动装配&quot;">​</a></h3><ul><li>spring-boot-starter-webflux、自动注册Handler、Router、Filter</li><li>application.yml配置示例</li></ul><h3 id="_7-2-spring-security集成" tabindex="-1">7.2 Spring Security集成 <a class="header-anchor" href="#_7-2-spring-security集成" aria-label="Permalink to &quot;7.2 Spring Security集成&quot;">​</a></h3><ul><li>spring-boot-starter-security、响应式安全配置</li><li>配置：SecurityWebFilterChain、ReactiveAuthenticationManager</li></ul><h3 id="_7-3-spring-cloud集成" tabindex="-1">7.3 Spring Cloud集成 <a class="header-anchor" href="#_7-3-spring-cloud集成" aria-label="Permalink to &quot;7.3 Spring Cloud集成&quot;">​</a></h3><ul><li>Gateway、服务注册发现、全链路追踪、配置中心</li></ul><h3 id="_7-4-监控与健康检查" tabindex="-1">7.4 监控与健康检查 <a class="header-anchor" href="#_7-4-监控与健康检查" aria-label="Permalink to &quot;7.4 监控与健康检查&quot;">​</a></h3><ul><li>Actuator端点、Prometheus、告警脚本</li></ul><hr><h2 id="_8-生产环境部署、运维、ci-cd极致细化" tabindex="-1">8. 生产环境部署、运维、CI/CD极致细化 <a class="header-anchor" href="#_8-生产环境部署、运维、ci-cd极致细化" aria-label="Permalink to &quot;8. 生产环境部署、运维、CI/CD极致细化&quot;">​</a></h2><h3 id="_8-1-dockerfile-k8s部署yaml" tabindex="-1">8.1 Dockerfile/K8s部署YAML <a class="header-anchor" href="#_8-1-dockerfile-k8s部署yaml" aria-label="Permalink to &quot;8.1 Dockerfile/K8s部署YAML&quot;">​</a></h3><ul><li>Dockerfile、k8s-deployment.yaml、健康检查、弹性伸缩</li></ul><h3 id="_8-2-自动化运维与ci-cd" tabindex="-1">8.2 自动化运维与CI/CD <a class="header-anchor" href="#_8-2-自动化运维与ci-cd" aria-label="Permalink to &quot;8.2 自动化运维与CI/CD&quot;">​</a></h3><ul><li>Jenkinsfile、定时任务、失败告警、日志采集</li></ul><hr><h2 id="_9-常见问题与faq、面试高频题、最佳实践极致细化" tabindex="-1">9. 常见问题与FAQ、面试高频题、最佳实践极致细化 <a class="header-anchor" href="#_9-常见问题与faq、面试高频题、最佳实践极致细化" aria-label="Permalink to &quot;9. 常见问题与FAQ、面试高频题、最佳实践极致细化&quot;">​</a></h2><h3 id="_9-1-faq" tabindex="-1">9.1 FAQ <a class="header-anchor" href="#_9-1-faq" aria-label="Permalink to &quot;9.1 FAQ&quot;">​</a></h3><ul><li>WebFlux与Spring MVC区别？</li><li>如何实现响应式安全？</li><li>如何处理背压与内存溢出？</li><li>如何与Spring Cloud集成？</li><li>如何监控WebFlux应用？</li></ul><h3 id="_9-2-高频面试题与标准答案" tabindex="-1">9.2 高频面试题与标准答案 <a class="header-anchor" href="#_9-2-高频面试题与标准答案" aria-label="Permalink to &quot;9.2 高频面试题与标准答案&quot;">​</a></h3><ul><li>Q: WebFlux核心组件？ A: Reactor、Mono、Flux、WebHandler、RouterFunction、HandlerFunction、WebFilter等。</li><li>Q: WebFlux与MVC区别？ A: WebFlux基于响应式流，非阻塞，适合高并发IO，MVC基于Servlet阻塞模型。</li><li>Q: 如何实现全链路安全？ A: SecurityWebFilterChain、JWT/OAuth2、CSRF、CORS、限流、日志。</li><li>Q: 如何与Spring Boot集成？ A: spring-boot-starter-webflux自动装配，配置Handler、Router、Filter，支持Actuator监控。</li></ul><h3 id="_9-3-最佳实践" tabindex="-1">9.3 最佳实践 <a class="header-anchor" href="#_9-3-最佳实践" aria-label="Permalink to &quot;9.3 最佳实践&quot;">​</a></h3><ul><li>Handler/Router/Filter分层设计</li><li>统一异常处理与告警</li><li>生产环境安全基线与自动化测试</li><li>自动化监控与运维</li></ul><hr><blockquote><p>本文档已极致细化 Spring WebFlux 全部核心与进阶知识点，适合企业级响应式架构设计、攻防实战与面试深度准备。</p></blockquote>`,80)]))}const c=i(n,[["render",t]]);export{k as __pageData,c as default};
