import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.DPDPlp3K.js";const o=JSON.parse('{"title":"测试","description":"","frontmatter":{"title":"测试"},"headers":[],"relativePath":"spring/springboot/testing.md","filePath":"spring/springboot/testing.md","lastUpdated":1747111449000}'),e={name:"spring/springboot/testing.md"};function t(p,s,h,r,k,d){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="测试" tabindex="-1">测试 <a class="header-anchor" href="#测试" aria-label="Permalink to &quot;测试&quot;">​</a></h1><p>SpringBoot 提供了完善的测试体系，支持单元测试、集成测试、Mock、数据库测试、接口自动化等，助力高质量交付。</p><h2 id="_1-测试体系概览" tabindex="-1">1. 测试体系概览 <a class="header-anchor" href="#_1-测试体系概览" aria-label="Permalink to &quot;1. 测试体系概览&quot;">​</a></h2><ul><li><strong>单元测试</strong>：验证单个类/方法的功能，隔离依赖</li><li><strong>集成测试</strong>：验证多个组件协作，启动 Spring 容器</li><li><strong>端到端测试</strong>：模拟真实用户操作，覆盖全流程</li></ul><h2 id="_2-单元测试" tabindex="-1">2. 单元测试 <a class="header-anchor" href="#_2-单元测试" aria-label="Permalink to &quot;2. 单元测试&quot;">​</a></h2><h3 id="依赖与环境" tabindex="-1">依赖与环境 <a class="header-anchor" href="#依赖与环境" aria-label="Permalink to &quot;依赖与环境&quot;">​</a></h3><ul><li>推荐 JUnit 5（spring-boot-starter-test 默认集成）</li><li>常用断言库：AssertJ、Hamcrest</li><li>Mock 框架：Mockito、EasyMock</li></ul><h3 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h3><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SpringBootTest</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserServiceTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Autowired</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UserService userService;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> testFindUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        User user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">findById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        assertNotNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="mock-测试" tabindex="-1">Mock 测试 <a class="header-anchor" href="#mock-测试" aria-label="Permalink to &quot;Mock 测试&quot;">​</a></h3><ul><li>使用 @MockBean 替换依赖 Bean</li><li>使用 Mockito.mock/when/verify</li><li>示例：<div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">MockBean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UserRepository userRepository;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> testMockRepo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(userRepository.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">findById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">thenReturn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Optional.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li></ul><h2 id="_3-集成测试" tabindex="-1">3. 集成测试 <a class="header-anchor" href="#_3-集成测试" aria-label="Permalink to &quot;3. 集成测试&quot;">​</a></h2><h3 id="启动-spring-容器" tabindex="-1">启动 Spring 容器 <a class="header-anchor" href="#启动-spring-容器" aria-label="Permalink to &quot;启动 Spring 容器&quot;">​</a></h3><ul><li>@SpringBootTest 启动完整应用上下文</li><li>@WebMvcTest 只加载 MVC 相关 Bean，适合 Controller 层测试</li><li>@DataJpaTest 只加载 JPA 相关 Bean，适合数据层测试</li></ul><h3 id="示例-1" tabindex="-1">示例 <a class="header-anchor" href="#示例-1" aria-label="Permalink to &quot;示例&quot;">​</a></h3><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WebMvcTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(UserController.class)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserControllerTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Autowired</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MockMvc mockMvc;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> testGetUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        mockMvc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">perform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/api/user/1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">andExpect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isOk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">andExpect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jsonPath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;$.id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="_4-数据库测试" tabindex="-1">4. 数据库测试 <a class="header-anchor" href="#_4-数据库测试" aria-label="Permalink to &quot;4. 数据库测试&quot;">​</a></h2><ul><li>使用 H2、PostgreSQL TestContainer 等内存数据库</li><li>@Transactional 保证测试数据自动回滚</li><li>@Sql 注解预置/清理数据</li><li>示例：<div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DataJpaTest</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Sql</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;classpath:sql/init.sql&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserRepositoryTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { ... }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ul><h2 id="_5-测试覆盖率与质量" tabindex="-1">5. 测试覆盖率与质量 <a class="header-anchor" href="#_5-测试覆盖率与质量" aria-label="Permalink to &quot;5. 测试覆盖率与质量&quot;">​</a></h2><ul><li>推荐 JaCoCo 插件统计覆盖率</li><li>关注分支覆盖、条件覆盖</li><li>代码审查与静态分析（SonarQube、Checkstyle）</li></ul><h2 id="_6-测试容器-testcontainers" tabindex="-1">6. 测试容器（Testcontainers） <a class="header-anchor" href="#_6-测试容器-testcontainers" aria-label="Permalink to &quot;6. 测试容器（Testcontainers）&quot;">​</a></h2><ul><li>支持 Docker 容器化测试环境（如 MySQL、Redis、Kafka）</li><li>保证测试环境一致性，适合微服务/分布式场景</li><li>示例：<div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Testcontainers</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MySQLTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Container</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MySQLContainer&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; mysql </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MySQLContainer&lt;&gt;(DockerImageName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mysql:8.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li></ul><h2 id="_7-接口自动化测试" tabindex="-1">7. 接口自动化测试 <a class="header-anchor" href="#_7-接口自动化测试" aria-label="Permalink to &quot;7. 接口自动化测试&quot;">​</a></h2><ul><li>推荐 RestAssured、Postman/Newman、HttpRunner</li><li>支持接口回归、性能测试、断言校验</li><li>可集成到 CI/CD 流程</li></ul><h2 id="_8-持续集成-ci-与自动化" tabindex="-1">8. 持续集成（CI）与自动化 <a class="header-anchor" href="#_8-持续集成-ci-与自动化" aria-label="Permalink to &quot;8. 持续集成（CI）与自动化&quot;">​</a></h2><ul><li>推荐 GitHub Actions、Jenkins、GitLab CI</li><li>自动执行测试、生成报告、推送覆盖率</li><li>示例（GitHub Actions）：<div class="language-yaml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Run Tests</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">mvn test</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Upload Coverage</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  uses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">codecov/codecov-action@v3</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ul><h2 id="_9-常见问题与排查" tabindex="-1">9. 常见问题与排查 <a class="header-anchor" href="#_9-常见问题与排查" aria-label="Permalink to &quot;9. 常见问题与排查&quot;">​</a></h2><ul><li>测试用例未被执行：检查 @Test 注解、包结构</li><li>Mock 失效：检查注入方式、@MockBean/@Mock 区别</li><li>数据未回滚：检查 @Transactional、数据库类型</li><li>覆盖率低：补充边界/异常/分支测试</li></ul><h2 id="_10-最佳实践" tabindex="-1">10. 最佳实践 <a class="header-anchor" href="#_10-最佳实践" aria-label="Permalink to &quot;10. 最佳实践&quot;">​</a></h2><ul><li>单元测试与集成测试分层管理</li><li>业务逻辑优先单元测试，接口/流程用集成测试</li><li>Mock 外部依赖，保证测试隔离</li><li>测试数据自动清理，避免污染</li><li>持续集成自动执行测试，保障主干质量</li></ul><h2 id="_11-faq" tabindex="-1">11. FAQ <a class="header-anchor" href="#_11-faq" aria-label="Permalink to &quot;11. FAQ&quot;">​</a></h2><h3 id="q-springboottest-和-webmvctest-有什么区别" tabindex="-1">Q: @SpringBootTest 和 @WebMvcTest 有什么区别？ <a class="header-anchor" href="#q-springboottest-和-webmvctest-有什么区别" aria-label="Permalink to &quot;Q: @SpringBootTest 和 @WebMvcTest 有什么区别？&quot;">​</a></h3><p>A: @SpringBootTest 启动完整容器，适合集成测试；@WebMvcTest 只加载 MVC 相关 Bean，适合 Controller 层测试。</p><h3 id="q-如何测试异步-定时任务" tabindex="-1">Q: 如何测试异步/定时任务？ <a class="header-anchor" href="#q-如何测试异步-定时任务" aria-label="Permalink to &quot;Q: 如何测试异步/定时任务？&quot;">​</a></h3><p>A: 可用 Awaitility 等工具等待异步结果，定时任务可用 @TestableScheduler 控制。</p><h3 id="q-如何保证测试数据不污染生产" tabindex="-1">Q: 如何保证测试数据不污染生产？ <a class="header-anchor" href="#q-如何保证测试数据不污染生产" aria-label="Permalink to &quot;Q: 如何保证测试数据不污染生产？&quot;">​</a></h3><p>A: 使用内存数据库、@Transactional 自动回滚、@Sql 预置/清理。</p><hr><blockquote><p>测试是高质量交付的基石，建议单元测试+集成测试+自动化结合，持续提升代码健壮性与可维护性。</p></blockquote>`,39)]))}const c=i(e,[["render",t]]);export{o as __pageData,c as default};
