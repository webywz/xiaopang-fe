import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.DPDPlp3K.js";const E=JSON.parse('{"title":"Web加密API与安全通信","description":"全面解析Web加密API的原理、常用算法、实际用法与安全通信实践，助你构建安全的前端应用。","frontmatter":{"layout":"doc","title":"Web加密API与安全通信","description":"全面解析Web加密API的原理、常用算法、实际用法与安全通信实践，助你构建安全的前端应用。"},"headers":[],"relativePath":"basic/browser/web-cryptography-api.md","filePath":"basic/browser/web-cryptography-api.md","lastUpdated":1746781833000}'),t={name:"basic/browser/web-cryptography-api.md"};function e(h,s,p,r,k,d){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="web加密api与安全通信" tabindex="-1">Web加密API与安全通信 <a class="header-anchor" href="#web加密api与安全通信" aria-label="Permalink to &quot;Web加密API与安全通信&quot;">​</a></h1><p>Web加密API（Web Cryptography API）为前端应用提供了原生的加密、解密、签名与验证能力。本文将系统讲解Web加密API的原理、常用算法、实际用法与安全通信实践。</p><h2 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;目录&quot;">​</a></h2><ul><li><a href="#web加密api简介">Web加密API简介</a></li><li><a href="#常用加密算法与用途">常用加密算法与用途</a></li><li><a href="#加密与解密代码示例">加密与解密代码示例</a></li><li><a href="#数字签名与验证">数字签名与验证</a></li><li><a href="#安全通信实践">安全通信实践</a></li></ul><h2 id="web加密api简介" tabindex="-1">Web加密API简介 <a class="header-anchor" href="#web加密api简介" aria-label="Permalink to &quot;Web加密API简介&quot;">​</a></h2><ul><li>通过<code>window.crypto.subtle</code>提供加密、解密、签名、验证、密钥生成等功能</li><li>支持对称加密（AES）、非对称加密（RSA、ECDSA）、哈希（SHA-256）等</li></ul><h2 id="常用加密算法与用途" tabindex="-1">常用加密算法与用途 <a class="header-anchor" href="#常用加密算法与用途" aria-label="Permalink to &quot;常用加密算法与用途&quot;">​</a></h2><table tabindex="0"><thead><tr><th>算法</th><th>类型</th><th>典型用途</th></tr></thead><tbody><tr><td>AES-GCM</td><td>对称</td><td>数据加密</td></tr><tr><td>RSA-OAEP</td><td>非对称</td><td>密钥交换/加密</td></tr><tr><td>ECDSA</td><td>非对称</td><td>数字签名</td></tr><tr><td>SHA-256</td><td>哈希</td><td>数据完整性校验</td></tr></tbody></table><h2 id="加密与解密代码示例" tabindex="-1">加密与解密代码示例 <a class="header-anchor" href="#加密与解密代码示例" aria-label="Permalink to &quot;加密与解密代码示例&quot;">​</a></h2><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 使用AES-GCM加密数据</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {string}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> plainText</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 明文</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {CryptoKey}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 密钥</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {Uint8Array}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> iv</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 初始向量</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@returns</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {Promise&lt;ArrayBuffer&gt;}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 密文</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> encryptAES</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">plainText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">iv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> encoder</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TextEncoder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> encoder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(plainText);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> crypto.subtle.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encrypt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;AES-GCM&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, iv }, key, data);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="数字签名与验证" tabindex="-1">数字签名与验证 <a class="header-anchor" href="#数字签名与验证" aria-label="Permalink to &quot;数字签名与验证&quot;">​</a></h2><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 使用ECDSA签名数据</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {CryptoKey}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> privateKey</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 私钥</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {ArrayBuffer}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 待签名数据</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@returns</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {Promise&lt;ArrayBuffer&gt;}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 签名</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> signData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">privateKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> crypto.subtle.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sign</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ECDSA&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, hash: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;SHA-256&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, privateKey, data);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="安全通信实践" tabindex="-1">安全通信实践 <a class="header-anchor" href="#安全通信实践" aria-label="Permalink to &quot;安全通信实践&quot;">​</a></h2><ul><li>始终使用HTTPS，防止中间人攻击</li><li>密钥仅在受信任环境生成与存储，避免前端明文传递</li><li>配合CSP、SameSite Cookie等机制提升通信安全</li><li>定期更新依赖库与浏览器，防范已知漏洞</li></ul><hr><blockquote><p>参考资料：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Crypto_API" target="_blank" rel="noreferrer">MDN Web Crypto API</a></p></blockquote>`,16)]))}const c=i(t,[["render",e]]);export{E as __pageData,c as default};
