import{_ as i,c as a,o as n,ag as t}from"./chunks/framework.DPDPlp3K.js";const k=JSON.parse('{"title":"CSS-in-JS解决方案对比","description":"全面对比主流CSS-in-JS方案的原理、优缺点与适用场景，助你选择最佳样式管理方式。","frontmatter":{"layout":"doc","title":"CSS-in-JS解决方案对比","description":"全面对比主流CSS-in-JS方案的原理、优缺点与适用场景，助你选择最佳样式管理方式。"},"headers":[],"relativePath":"basic/css/css-in-js-comparison.md","filePath":"basic/css/css-in-js-comparison.md","lastUpdated":1746781833000}'),l={name:"basic/css/css-in-js-comparison.md"};function e(r,s,p,h,d,o){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="css-in-js解决方案对比" tabindex="-1">CSS-in-JS解决方案对比 <a class="header-anchor" href="#css-in-js解决方案对比" aria-label="Permalink to &quot;CSS-in-JS解决方案对比&quot;">​</a></h1><p>CSS-in-JS是现代前端开发中流行的样式管理方式。本文将对比主流CSS-in-JS方案的原理、优缺点与适用场景，助你选择最佳实践。</p><h2 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;目录&quot;">​</a></h2><ul><li><a href="#什么是css-in-js">什么是CSS-in-JS</a></li><li><a href="#主流css-in-js库对比">主流CSS-in-JS库对比</a></li><li><a href="#优缺点分析">优缺点分析</a></li><li><a href="#典型应用场景">典型应用场景</a></li><li><a href="#最佳实践与建议">最佳实践与建议</a></li></ul><h2 id="什么是css-in-js" tabindex="-1">什么是CSS-in-JS <a class="header-anchor" href="#什么是css-in-js" aria-label="Permalink to &quot;什么是CSS-in-JS&quot;">​</a></h2><p>CSS-in-JS指在JavaScript中定义和管理样式，常用于React、Vue等现代框架。</p><ul><li>样式与组件强绑定，提升可维护性</li><li>支持动态样式、主题切换</li></ul><h2 id="主流css-in-js库对比" tabindex="-1">主流CSS-in-JS库对比 <a class="header-anchor" href="#主流css-in-js库对比" aria-label="Permalink to &quot;主流CSS-in-JS库对比&quot;">​</a></h2><table tabindex="0"><thead><tr><th>方案</th><th>代表库</th><th>特点</th></tr></thead><tbody><tr><td>styled-components</td><td>React</td><td>语法直观，生态完善</td></tr><tr><td>emotion</td><td>React/Vue</td><td>性能优异，API灵活</td></tr><tr><td>JSS</td><td>React/Vue/原生</td><td>纯JS对象风格，易扩展</td></tr><tr><td>Linaria</td><td>React</td><td>零runtime，静态提取</td></tr><tr><td>Stitches</td><td>React</td><td>极致性能，TypeScript友好</td></tr></tbody></table><h2 id="优缺点分析" tabindex="-1">优缺点分析 <a class="header-anchor" href="#优缺点分析" aria-label="Permalink to &quot;优缺点分析&quot;">​</a></h2><p><strong>优点：</strong></p><ul><li>样式作用域隔离，避免全局污染</li><li>支持动态样式、主题切换</li><li>便于与JS逻辑深度集成</li></ul><p><strong>缺点：</strong></p><ul><li>运行时性能开销（部分方案）</li><li>构建配置复杂度提升</li><li>部分方案不利于SEO</li></ul><h2 id="典型应用场景" tabindex="-1">典型应用场景 <a class="header-anchor" href="#典型应用场景" aria-label="Permalink to &quot;典型应用场景&quot;">​</a></h2><ul><li>组件库、设计系统</li><li>需要动态主题/响应式样式的项目</li><li>大型SPA/MPA应用</li></ul><h2 id="代码示例" tabindex="-1">代码示例 <a class="header-anchor" href="#代码示例" aria-label="Permalink to &quot;代码示例&quot;">​</a></h2><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// styled-components 示例</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> styled </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;styled-components&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Button</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> styled.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">button</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  color: #fff;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  background: #2196f3;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &amp;:hover { background: #1976d2; }</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// emotion 示例</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/** </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@jsxImportSource</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> @emotion/react */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { css } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@emotion/react&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> style</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> css</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  color: #fff;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  background: #e91e63;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="最佳实践与建议" tabindex="-1">最佳实践与建议 <a class="header-anchor" href="#最佳实践与建议" aria-label="Permalink to &quot;最佳实践与建议&quot;">​</a></h2><ul><li>小型项目可用styled-components/emotion，追求极致性能可选Linaria/Stitches</li><li>结合TypeScript提升类型安全</li><li>持续关注社区与生态发展</li></ul><hr><blockquote><p>参考资料：<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_in_JS" target="_blank" rel="noreferrer">MDN CSS-in-JS</a></p></blockquote>`,23)]))}const u=i(l,[["render",e]]);export{k as __pageData,u as default};
