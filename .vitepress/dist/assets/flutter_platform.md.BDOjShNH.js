import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.DPDPlp3K.js";const E=JSON.parse('{"title":"平台集成","description":"","frontmatter":{"title":"平台集成"},"headers":[],"relativePath":"flutter/platform.md","filePath":"flutter/platform.md","lastUpdated":1747310844000}'),e={name:"flutter/platform.md"};function t(h,s,r,p,k,d){return n(),a("div",null,s[0]||(s[0]=[l(`<p>/**</p><ul><li>Flutter平台集成</li><li>@description 介绍Flutter与原生平台集成的常见方式。 */</li></ul><h1 id="平台集成" tabindex="-1">平台集成 <a class="header-anchor" href="#平台集成" aria-label="Permalink to &quot;平台集成&quot;">​</a></h1><h2 id="platform-channels原理" tabindex="-1">Platform Channels原理 <a class="header-anchor" href="#platform-channels原理" aria-label="Permalink to &quot;Platform Channels原理&quot;">​</a></h2><ul><li>用于 Dart 与原生(Android/iOS)代码互调。</li><li>支持 MethodChannel、EventChannel、BasicMessageChannel。</li></ul><h2 id="与android原生交互" tabindex="-1">与Android原生交互 <a class="header-anchor" href="#与android原生交互" aria-label="Permalink to &quot;与Android原生交互&quot;">​</a></h2><ul><li>在 Android 端实现 MethodChannel 处理方法。</li><li>可调用原生 API、第三方 SDK。</li></ul><div class="language-kotlin vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MainActivity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FlutterActivity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CHANNEL </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;samples.flutter.dev/battery&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> configureFlutterEngine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(flutterEngine: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FlutterEngine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    MethodChannel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(flutterEngine.dartExecutor.binaryMessenger, CHANNEL).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setMethodCallHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      call, result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 处理方法调用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="与ios原生交互" tabindex="-1">与iOS原生交互 <a class="header-anchor" href="#与ios原生交互" aria-label="Permalink to &quot;与iOS原生交互&quot;">​</a></h2><ul><li>在 iOS 端实现 MethodChannel 处理方法。</li></ul><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> controller : FlutterViewController </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> window</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.rootViewController </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FlutterViewController</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> batteryChannel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> FlutterMethodChannel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;samples.flutter.dev/battery&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">binaryMessenger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: controller.binaryMessenger)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">batteryChannel.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setMethodCallHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: FlutterMethodCall, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@escaping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FlutterResult) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 处理方法调用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="插件开发与发布" tabindex="-1">插件开发与发布 <a class="header-anchor" href="#插件开发与发布" aria-label="Permalink to &quot;插件开发与发布&quot;">​</a></h2><ul><li>可自定义插件扩展原生能力。</li><li>发布到 <a href="https://pub.dev/" target="_blank" rel="noreferrer">pub.dev</a> 供社区使用。</li></ul><h2 id="web-桌面平台适配" tabindex="-1">Web/桌面平台适配 <a class="header-anchor" href="#web-桌面平台适配" aria-label="Permalink to &quot;Web/桌面平台适配&quot;">​</a></h2><ul><li>Flutter 支持 Web、Windows、macOS、Linux 多端部署。</li><li>可通过条件编译适配不同平台。</li></ul><h2 id="第三方原生插件集成" tabindex="-1">第三方原生插件集成 <a class="header-anchor" href="#第三方原生插件集成" aria-label="Permalink to &quot;第三方原生插件集成&quot;">​</a></h2><ul><li>通过 pubspec.yaml 添加依赖，自动适配原生平台。</li></ul><h2 id="常见平台兼容性问题" tabindex="-1">常见平台兼容性问题 <a class="header-anchor" href="#常见平台兼容性问题" aria-label="Permalink to &quot;常见平台兼容性问题&quot;">​</a></h2><ul><li>不同平台 API 差异、权限申请、UI 适配等。</li><li>建议多端测试，关注官方 issue。</li></ul><h2 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h2><div class="language-dart vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 调用原生方法示例</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 详见官方文档 platform channels</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>`,21)]))}const u=i(e,[["render",t]]);export{E as __pageData,u as default};
